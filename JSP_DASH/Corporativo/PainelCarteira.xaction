<?xml version="1.0" encoding="UTF-8"?>
<action-sequence> 
  <title>getData</title>
  <version>1</version>
  <logging-level>ERROR</logging-level>
  <documentation> 
    <author>Rpassos</author>  
    <description>MDX Query to JSON</description>  
    <help/>  
    <result-type/>  
    <icon/> 
  </documentation>

  <inputs> 
    <callback type="string"> 
      <sources> 
        <request>callback</request> 
      </sources>  
      <default-value/> 
    </callback>  
    <getData type="string"> 
      <sources> 
        <request>getData</request> 
      </sources>  
      <default-value><![CDATA[1]]></default-value> 
    </getData> 
	<Ano type="string"> 
      <sources> 
        <request>Ano</request> 
      </sources>  
      <default-value><![CDATA[2001]]></default-value> 
    </Ano> 
	 <Mes type="string"> 
      <sources> 
        <request>Mes</request> 
      </sources>  
      <default-value><![CDATA['xx']]></default-value> 
    </Mes>

	 <Cedente type="string"> 
      <sources> 
        <request>Cedente</request> 
      </sources>  
      <default-value><![CDATA['xx']]></default-value> 
    </Cedente>
	

	 <TipoConsulta type="string"> 
      <sources> 
        <request>TipoConsulta</request> 
      </sources>  
      <default-value><![CDATA['S']]></default-value> 
    </TipoConsulta>
	
	
	
	<Empresa type="string"> 
      <sources> 
        <request>Empresa</request> 
      </sources>  
      <default-value><![CDATA['xx']]></default-value> 
    </Empresa>
			
	<Sacado type="string"> 
      <sources> 
        <request>Sacado</request> 
      </sources>  
      <default-value><![CDATA['xx']]></default-value> 
    </Sacado>
	
	<CNPJ type="string"> 
      <sources> 
        <request>CNPJ</request> 
      </sources>  
      <default-value><![CDATA['xx']]></default-value> 
    </CNPJ>
		

	
	</inputs>

  <outputs> 
    <out type="string"> 
      <destinations> 
        <response>content</response> 
      </destinations> 
    </out>  
    <json_done type="string"> 
      <destinations> 
        <response>content</response> 
      </destinations> 
    </json_done> 
  </outputs>

  <resources> 
    <catalog> 
      <solution-file> 
        <catalog>Operacoes de Credito</catalog>       
        <mime-type>text/plain</mime-type> 
      </solution-file> 
    </catalog>  
    <catalog1>
      <solution-file>
        <catalog>Operacoes de Credito</catalog>     
        <mime-type>text/plain</mime-type>
      </solution-file>
    </catalog1>
    <catalog2>
      <solution-file>
        <catalog>Operacoes de Credito</catalog>     
        <mime-type>text/plain</mime-type>
      </solution-file>
    </catalog2>
	
	
	<catalogoComercial>
      <solution-file>
			<location>solution:_WBA-FI/3.Comercial/wbafi_comercial.mondrian.xml</location>
	    <mime-type>text/plain</mime-type>
      </solution-file>
    </catalogoComercial>
	
	
  </resources>
  
  <!-- Mapeamento dos parametros-->  
  <!-- variaveis de saida-->  
  <!-- Schemas XML-->  
  <actions> 
    <!-- Funcao para pegar as empresas dinamicamente -->
    <actions> 
      <action-definition> 
        <component-name>SQLLookupRule</component-name>
        <action-type>Relational Ano</action-type>
        <action-outputs> 
          <query-result type="result-set" mapping="query_result_Empresa"/>  
          <ano type="integer"/>  
          <nm_empresa type="string"/>  
          <grp_economico type="string"/> 
        </action-outputs>
        <component-definition> 
          <jndi><![CDATA[dw_wba_fi]]></jndi>  
          <query><![CDATA[
		SELECT  year(GETDATE()) as ano
			,dm023_010 as nm_empresa
			,dm023_040 as grp_economico
		FROM tctbdm023
		where dm023_001 in (1,2)
		order by dm023_001 
		]]></query>  
          <live><![CDATA[true]]></live> 
        </component-definition> 
      </action-definition>
 
    </actions>
	   
    <!-- *************************** BAR - CARTEIRA CONTENCIOSO *************** -->  
    <actions>
      <condition><![CDATA[getData == "bar"]]></condition>  
            <action-definition> 
        <component-name>JavascriptRule</component-name>
        <action-type>JavaScript</action-type>
        <action-inputs> 
          <query_result_Empresa type="result-set"/>
		</action-inputs>
        <action-outputs> 
          <strQuery type="string"/> 
        </action-outputs>
        <component-definition> 
          <script><![CDATA[

		  
 strQuery  = "with set [Duvidoso] as 'Except({[Comportamento de Pagamento].[Total].Children}, {[Comportamento de Pagamento].[Duvidoso]})'   member [Measures].[Contenciosos] as '([Comportamento de Pagamento].[Duvidoso], [Measures].[Valor do Titulo])'   member [Measures].[Recebiveis_Aux] as 'Sum({[Operacoes.Operacoes : Codigo].[Outros].[053], [Operacoes.Operacoes : Codigo].[Titulos].[041], [Operacoes.Operacoes : Codigo].[Titulos].[040], [Operacoes.Operacoes : Codigo].[Titulos].[046], [Operacoes.Operacoes : Codigo].[Titulos].[042]}, [Measures].[Valor do Titulo])'   member [Measures].[Recebiveis] as 'Sum([Duvidoso], [Measures].[Recebiveis_Aux])' select NON EMPTY {[Measures].[Contenciosos], [Measures].[Recebiveis]} ON COLUMNS,   NON EMPTY {[Empresa].[CONSOLIDADO].Children} ON ROWS from [Operacoes de Credito] where Crossjoin({[Produto].[Propria]}, {[Situacao do Pagamento].[Em aberto]})";

		
;]]> </script> 
        </component-definition> 
      </action-definition>
	  	  
	  <action-definition> 
        <component-name>MDXLookupRule</component-name>
        <action-type>OLAP</action-type>
        <action-inputs> 
     	  <strQuery type="string"/> 
        </action-inputs>
        <action-resources> 
          <catalog mapping="catalog1"/> 
        </action-resources>
        <action-outputs> 
          <query-results type="result-set" mapping="query_result"/> 
        </action-outputs>
        <component-definition> 
          <jndi><![CDATA[dw_wba_fi]]></jndi>  
          <catalog>Operacoes de Credito</catalog> 
           <query><![CDATA[{strQuery}]]></query> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>JavascriptRule</component-name>
        <action-type>JavaScript</action-type>
        <action-inputs> 
          <query_result type="result-set"/>  
          <callback type="string"/> 
        </action-inputs>
        <action-outputs> 
          <json type="string"/>  
          <rowCount type="integer"/> 
        </action-outputs>
        <component-definition> 
          <script><![CDATA[
QL = ''; 
DEBUG=false;

function formataJSON(v) {
        var s = null;
        if (v == null) {
            s = 'null';
        } else if (v instanceof java.lang.String) {
            s = '"' + v + '"';
        } else if (v instanceof java.util.Date) {
            s = /*"new Date(" +*/ v.getTime() /*+ ")"*/;
        } else if (v instanceof Array) {
            s = new java.lang.StringBuilder("[ ");
            for (var i=0; i<v.length; i++) {
                if (i>0) {
                    s.append(',');
                }
                s.append(formataJSON(v[i]));
            }
            s.append(" ]");
        } else {
            s = v.toString();
        }
        if (DEBUG) {
             s = s.toString() + " /* " + v.getClass().getName() + " */";
        }
        return s.toString();
}

var rowCount=query_result.getRowCount();
var colCount=query_result.getColumnCount();
var json=new java.lang.StringBuilder('{ "result" : {');

var columnHeaders = new Array();
columnHeaders[0] = '"metrica"';
for (var col=0; col<colCount; col++) {
	columnHeaders[col+1] = query_result.getMetaData().getColumnHeaders()[0][col];
}

json.append( 
    '"metadata": { ' +
        '"columns": ' + formataJSON(columnHeaders) + ', ' + QL +
        '"rows": ' + rowCount + ', ' + QL +
        '"cols": ' + (colCount+1) + QL +
    ' },' + QL);


json.append('"data" : [ ');
var rowData = null;
while (rowData = query_result.nextFlattened()) {
	json.append(QL).append(formataJSON(rowData));
	json.append(',');
}
json.deleteCharAt(json.length()-1); 

json.append(QL + '] ' + QL);

json.append('}' + QL + '}');

if (callback !== '' || callback === null) {
    json = callback + '(' + json.toString() + ')'
} else {
    json = json.toString();
}]]></script> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>TemplateComponent</component-name>
        <action-type>Message Template</action-type>
        <action-inputs> 
          <json type="string"/> 
        </action-inputs>
        <action-outputs> 
          <output-message type="string" mapping="out"/> 
        </action-outputs>
        <component-definition> 
          <template><![CDATA[{json}]]></template> 
        </component-definition> 
      </action-definition>
 
    </actions>
  





    <!-- ***************************RECEBIVEIS POR EMPRESA / VENCIDOS *************** -->  
    <actions> 
      <condition><![CDATA[getData == "RecebiveisEVencidosPorEmpresa"]]></condition>  
            <action-definition> 
        <component-name>JavascriptRule</component-name>
        <action-type>JavaScript</action-type>
        <action-inputs> 
          <query_result_Empresa type="result-set"/>
		</action-inputs>
        <action-outputs> 
          <strQuery type="string"/> 
        </action-outputs>
        <component-definition> 
          <script><![CDATA[

		  
 strQuery  = "with member [Measures].[Comissaria] as '([Operacoes.Operacoes : Codigo].[Titulos].[046], [Measures].[Valor do Titulo])'   member [Measures].[Cheques] as '([Operacoes.Operacoes : Codigo].[Titulos].[041], [Measures].[Valor do Titulo])'   member [Measures].[Titulos] as '([Operacoes.Operacoes : Codigo].[Titulos].[040], [Measures].[Valor do Titulo])'   member [Measures].[Fomento] as '([Operacoes.Operacoes : Codigo].[Outros].[053], [Measures].[Valor do Titulo])'   member [Measures].[Recebiveis] as '((([Measures].[Comissaria] + [Measures].[Cheques]) + [Measures].[Titulos]) + [Measures].[Fomento])'   member [Measures].[Vencidos] as '([Situacao do Pagamento].[Em aberto].[Em aberto   Vencido], [Measures].[Valor do Titulo])' select NON EMPTY {[Measures].[Recebiveis], [Measures].[Vencidos]} ON COLUMNS,   NON EMPTY {[Empresa].[CONSOLIDADO].Children} ON ROWS from [Operacoes de Credito] where Crossjoin({[Produto].[Propria]}, {[Situacao do Pagamento].[Em aberto]}) ";

		
;]]> </script> 
        </component-definition> 
      </action-definition>
	  	  
	  <action-definition> 
        <component-name>MDXLookupRule</component-name>
        <action-type>OLAP</action-type>
        <action-inputs> 
     	  <strQuery type="string"/> 
        </action-inputs>
        <action-resources> 
          <catalog mapping="catalog1"/> 
        </action-resources>
        <action-outputs> 
          <query-results type="result-set" mapping="query_result"/> 
        </action-outputs>
        <component-definition> 
          <jndi><![CDATA[dw_wba_fi]]></jndi>  
          <catalog>Operacoes de Credito</catalog> 
           <query><![CDATA[{strQuery}]]></query> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>JavascriptRule</component-name>
        <action-type>JavaScript</action-type>
        <action-inputs> 
          <query_result type="result-set"/>  
          <callback type="string"/> 
        </action-inputs>
        <action-outputs> 
          <json type="string"/>  
          <rowCount type="integer"/> 
        </action-outputs>
        <component-definition> 
          <script><![CDATA[
QL = ''; 
DEBUG=false;

function formataJSON(v) {
        var s = null;
        if (v == null) {
            s = 'null';
        } else if (v instanceof java.lang.String) {
            s = '"' + v + '"';
        } else if (v instanceof java.util.Date) {
            s = /*"new Date(" +*/ v.getTime() /*+ ")"*/;
        } else if (v instanceof Array) {
            s = new java.lang.StringBuilder("[ ");
            for (var i=0; i<v.length; i++) {
                if (i>0) {
                    s.append(',');
                }
                s.append(formataJSON(v[i]));
            }
            s.append(" ]");
        } else {
            s = v.toString();
        }
        if (DEBUG) {
             s = s.toString() + " /* " + v.getClass().getName() + " */";
        }
        return s.toString();
}

var rowCount=query_result.getRowCount();
var colCount=query_result.getColumnCount();
var json=new java.lang.StringBuilder('{ "result" : {');

var columnHeaders = new Array();
columnHeaders[0] = '"metrica"';
for (var col=0; col<colCount; col++) {
	columnHeaders[col+1] = query_result.getMetaData().getColumnHeaders()[0][col];
}

json.append( 
    '"metadata": { ' +
        '"columns": ' + formataJSON(columnHeaders) + ', ' + QL +
        '"rows": ' + rowCount + ', ' + QL +
        '"cols": ' + (colCount+1) + QL +
    ' },' + QL);


json.append('"data" : [ ');
var rowData = null;
while (rowData = query_result.nextFlattened()) {
	json.append(QL).append(formataJSON(rowData));
	json.append(',');
}
json.deleteCharAt(json.length()-1); 

json.append(QL + '] ' + QL);

json.append('}' + QL + '}');

if (callback !== '' || callback === null) {
    json = callback + '(' + json.toString() + ')'
} else {
    json = json.toString();
}]]></script> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>TemplateComponent</component-name>
        <action-type>Message Template</action-type>
        <action-inputs> 
          <json type="string"/> 
        </action-inputs>
        <action-outputs> 
          <output-message type="string" mapping="out"/> 
        </action-outputs>
        <component-definition> 
          <template><![CDATA[{json}]]></template> 
        </component-definition> 
      </action-definition>
 
    </actions>
  


  <!-- ***************************  PIZZA - EVOLUCAO DE OPERACAO*************** -->  
    <actions> 
      <condition><![CDATA[getData == "pizza1"]]></condition>  
      <action-definition> 
        <component-name>MDXLookupRule</component-name>
        <action-type>OLAP</action-type>
        <action-inputs> 
          <Ano type="string"/> 
        </action-inputs>
        <action-resources> 
          <catalog mapping="catalog1"/> 
        </action-resources>
        <action-outputs> 
          <query-results type="result-set" mapping="query_result"/> 
        </action-outputs>
        <component-definition> 
          <jndi><![CDATA[dw_wba_fi]]></jndi>  
          <catalog>Operacoes de Credito</catalog> 
          <query><![CDATA[
		  
		  with set [Duvidoso] as 'Except({[Comportamento de Pagamento].[Total].Children}, {[Comportamento de Pagamento].[Duvidoso]})'
  member [Measures].[Contencioso] as '([Comportamento de Pagamento].[Duvidoso], [Measures].[Valor do Titulo])'
  member [Measures].[Recebiveis_Aux] as 'Sum({[Operacoes.Operacoes : Codigo].[Outros].[053], [Operacoes.Operacoes : Codigo].[Titulos].[041], [Operacoes.Operacoes : Codigo].[Titulos].[040], [Operacoes.Operacoes : Codigo].[Titulos].[046], [Operacoes.Operacoes : Codigo].[Titulos].[042]}, [Measures].[Valor do Titulo])'
  member [Measures].[Recebiveis] as 'Sum([Duvidoso], [Measures].[Recebiveis_Aux])'
select NON EMPTY {[Measures].[Contencioso], [Measures].[Recebiveis]} ON COLUMNS,
  NON EMPTY {[Empresa].[CONSOLIDADO]} ON ROWS
from [Operacoes de Credito]
where Crossjoin({[Produto].[Propria]}, {[Situacao do Pagamento].[Em aberto]})


		  
		  ]]></query>
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>JavascriptRule</component-name>
        <action-type>JavaScript</action-type>
        <action-inputs> 
          <query_result type="result-set"/>  
          <callback type="string"/> 
        </action-inputs>
        <action-outputs> 
          <json type="string"/>  
          <rowCount type="integer"/> 
        </action-outputs>
        <component-definition> 
          <script><![CDATA[
QL = ''; 
DEBUG=false;

function formataJSON(v) {
        var s = null;
        if (v == null) {
            s = 'null';
        } else if (v instanceof java.lang.String) {
            s = '"' + v + '"';
        } else if (v instanceof java.util.Date) {
            s = /*"new Date(" +*/ v.getTime() /*+ ")"*/;
        } else if (v instanceof Array) {
            s = new java.lang.StringBuilder("[ ");
            for (var i=0; i<v.length; i++) {
                if (i>0) {
                    s.append(',');
                }
                s.append(formataJSON(v[i]));
            }
            s.append(" ]");
        } else {
            s = v.toString();
        }
        if (DEBUG) {
             s = s.toString() + " /* " + v.getClass().getName() + " */";
        }
        return s.toString();
}

var rowCount=query_result.getRowCount();
var colCount=query_result.getColumnCount();
var json=new java.lang.StringBuilder('{ "result" : {');

var columnHeaders = new Array();
columnHeaders[0] = '"metrica"';
for (var col=0; col<colCount; col++) {
	columnHeaders[col+1] = query_result.getMetaData().getColumnHeaders()[0][col];
}

json.append( 
    '"metadata": { ' +
        '"columns": ' + formataJSON(columnHeaders) + ', ' + QL +
        '"rows": ' + rowCount + ', ' + QL +
        '"cols": ' + (colCount+1) + QL +
    ' },' + QL);


json.append('"data" : [ ');
var rowData = null;
while (rowData = query_result.nextFlattened()) {
	json.append(QL).append(formataJSON(rowData));
	json.append(',');
}
json.deleteCharAt(json.length()-1); 

json.append(QL + '] ' + QL);

json.append('}' + QL + '}');

if (callback !== '' || callback === null) {
    json = callback + '(' + json.toString() + ')'
} else {
    json = json.toString();
}]]></script> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>TemplateComponent</component-name>
        <action-type>Message Template</action-type>
        <action-inputs> 
          <json type="string"/> 
        </action-inputs>
        <action-outputs> 
          <output-message type="string" mapping="out"/> 
        </action-outputs>
        <component-definition> 
          <template><![CDATA[{json}]]></template> 
        </component-definition> 
      </action-definition>
 
    </actions>








	
	
	    <!-- ***************************  RECEBIVEIS e VENCIDOS*************** -->  
    <actions> 
      <condition><![CDATA[getData == "RecebiveisEVencidos"]]></condition>  
      <action-definition> 
        <component-name>MDXLookupRule</component-name>
        <action-type>OLAP</action-type>
        <action-inputs> 
          <Ano type="string"/> 
        </action-inputs>
        <action-resources> 
          <catalog mapping="catalog1"/> 
        </action-resources>
        <action-outputs> 
          <query-results type="result-set" mapping="query_result"/> 
        </action-outputs>
        <component-definition> 
          <jndi><![CDATA[dw_wba_fi]]></jndi>  
          <catalog>Operacoes de Credito</catalog> 
          <query><![CDATA[
		  
			with member [Measures].[Comissaria] as '([Operacoes.Operacoes : Codigo].[Titulos].[046], [Measures].[Valor do Titulo])'
			  member [Measures].[Cheques] as '([Operacoes.Operacoes : Codigo].[Titulos].[041], [Measures].[Valor do Titulo])'
			  member [Measures].[Titulos] as '([Operacoes.Operacoes : Codigo].[Titulos].[040], [Measures].[Valor do Titulo])'
			  member [Measures].[Fomento] as '([Operacoes.Operacoes : Codigo].[Outros].[053], [Measures].[Valor do Titulo])'
			  member [Measures].[Recebiveis] as '((([Measures].[Comissaria] + [Measures].[Cheques]) + [Measures].[Titulos]) + [Measures].[Fomento])'
			  member [Measures].[Vencidos] as '([Situacao do Pagamento].[Em aberto].[Em aberto   Vencido], [Measures].[Valor do Titulo])'
			select NON EMPTY {[Measures].[Recebiveis], [Measures].[Vencidos]} ON COLUMNS,
			  NON EMPTY {[Empresa].[CONSOLIDADO]} ON ROWS
			from [Operacoes de Credito]
			where Crossjoin({[Produto].[Propria]}, {[Situacao do Pagamento].[Em aberto]})

		  
		  ]]></query>
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>JavascriptRule</component-name>
        <action-type>JavaScript</action-type>
        <action-inputs> 
          <query_result type="result-set"/>  
          <callback type="string"/> 
        </action-inputs>
        <action-outputs> 
          <json type="string"/>  
          <rowCount type="integer"/> 
        </action-outputs>
        <component-definition> 
          <script><![CDATA[
QL = ''; 
DEBUG=false;

function formataJSON(v) {
        var s = null;
        if (v == null) {
            s = 'null';
        } else if (v instanceof java.lang.String) {
            s = '"' + v + '"';
        } else if (v instanceof java.util.Date) {
            s = /*"new Date(" +*/ v.getTime() /*+ ")"*/;
        } else if (v instanceof Array) {
            s = new java.lang.StringBuilder("[ ");
            for (var i=0; i<v.length; i++) {
                if (i>0) {
                    s.append(',');
                }
                s.append(formataJSON(v[i]));
            }
            s.append(" ]");
        } else {
            s = v.toString();
        }
        if (DEBUG) {
             s = s.toString() + " /* " + v.getClass().getName() + " */";
        }
        return s.toString();
}

var rowCount=query_result.getRowCount();
var colCount=query_result.getColumnCount();
var json=new java.lang.StringBuilder('{ "result" : {');

var columnHeaders = new Array();
columnHeaders[0] = '"metrica"';
for (var col=0; col<colCount; col++) {
	columnHeaders[col+1] = query_result.getMetaData().getColumnHeaders()[0][col];
}

json.append( 
    '"metadata": { ' +
        '"columns": ' + formataJSON(columnHeaders) + ', ' + QL +
        '"rows": ' + rowCount + ', ' + QL +
        '"cols": ' + (colCount+1) + QL +
    ' },' + QL);


json.append('"data" : [ ');
var rowData = null;
while (rowData = query_result.nextFlattened()) {
	json.append(QL).append(formataJSON(rowData));
	json.append(',');
}
json.deleteCharAt(json.length()-1); 

json.append(QL + '] ' + QL);

json.append('}' + QL + '}');

if (callback !== '' || callback === null) {
    json = callback + '(' + json.toString() + ')'
} else {
    json = json.toString();
}]]></script> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>TemplateComponent</component-name>
        <action-type>Message Template</action-type>
        <action-inputs> 
          <json type="string"/> 
        </action-inputs>
        <action-outputs> 
          <output-message type="string" mapping="out"/> 
        </action-outputs>
        <component-definition> 
          <template><![CDATA[{json}]]></template> 
        </component-definition> 
      </action-definition>
 
    </actions>

	
	
	
	
	
	
	<!-- *************************** gaugeConsolidado -  GAUGE - CONSOLIDADO || DASHBOARD - CARTEIRAO || Consolidado*************** -->  
    <actions> 
      <condition><![CDATA[getData == "gaugeConsolidado"]]></condition>  
            <action-definition> 
        <component-name>JavascriptRule</component-name>
        <action-type>JavaScript</action-type>
        <action-inputs> 
          <query_result_Empresa type="result-set"/>
		</action-inputs>
        <action-outputs> 
          <strQuery type="string"/> 
        </action-outputs>
        <component-definition> 
          <script><![CDATA[

		strQuery   = " with set [Duvidoso] as 'Except({[Comportamento de Pagamento].[Total].Children}, {[Comportamento de Pagamento].[Duvidoso]})'   member [Measures].[Contenciosos] as '([Comportamento de Pagamento].[Duvidoso], [Measures].[Valor do Titulo])'   member [Measures].[Recebiveis_Aux] as 'Sum({[Operacoes.Operacoes : Codigo].[Outros].[053], [Operacoes.Operacoes : Codigo].[Titulos].[041], [Operacoes.Operacoes : Codigo].[Titulos].[040], [Operacoes.Operacoes : Codigo].[Titulos].[046], [Operacoes.Operacoes : Codigo].[Titulos].[042]}, [Measures].[Valor do Titulo])'   member [Measures].[Recebiveis] as 'Sum([Duvidoso], [Measures].[Recebiveis_Aux])'   member [Measures].[Total] as '([Measures].[Contenciosos] + [Measures].[Recebiveis])'   member [Measures].[%_Aux] as '([Measures].[Contenciosos] / [Measures].[Total])*100', format_string = \"#0.00%\"   member [Measures].[%] as 'IIf(([Measures].[%_Aux] IS EMPTY), 0, [Measures].[%_Aux])' select NON EMPTY {[Measures].[%], [Measures].[Contenciosos], [Measures].[Total]} ON COLUMNS,   NON EMPTY {[Empresa].[CONSOLIDADO]} ON ROWS from [Operacoes de Credito] where Crossjoin({[Produto].[Propria]}, {[Situacao do Pagamento].[Em aberto]})";
		
;]]> </script> 
        </component-definition> 
      </action-definition>
	  	  
	  <action-definition> 
        <component-name>MDXLookupRule</component-name>
        <action-type>OLAP</action-type>
        <action-inputs> 
     	  <strQuery type="string"/> 
        </action-inputs>
        <action-resources> 
          <catalog mapping="catalog1"/> 
        </action-resources>
        <action-outputs> 
          <query-results type="result-set" mapping="query_result"/> 
        </action-outputs>
        <component-definition> 
          <jndi><![CDATA[dw_wba_fi]]></jndi>  
          <catalog>Operacoes de Credito</catalog> 
           <query><![CDATA[{strQuery}]]></query> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>JavascriptRule</component-name>
        <action-type>JavaScript</action-type>
        <action-inputs> 
          <query_result type="result-set"/>  
          <callback type="string"/> 
        </action-inputs>
        <action-outputs> 
          <json type="string"/>  
          <rowCount type="integer"/> 
        </action-outputs>
        <component-definition> 
          <script><![CDATA[
QL = ''; 
DEBUG=false;

function formataJSON(v) {
        var s = null;
        if (v == null) {
            s = 'null';
        } else if (v instanceof java.lang.String) {
            s = '"' + v + '"';
        } else if (v instanceof java.util.Date) {
            s = /*"new Date(" +*/ v.getTime() /*+ ")"*/;
        } else if (v instanceof Array) {
            s = new java.lang.StringBuilder("[ ");
            for (var i=0; i<v.length; i++) {
                if (i>0) {
                    s.append(',');
                }
                s.append(formataJSON(v[i]));
            }
            s.append(" ]");
        } else {
            s = v.toString();
        }
        if (DEBUG) {
             s = s.toString() + " /* " + v.getClass().getName() + " */";
        }
        return s.toString();
}

var rowCount=query_result.getRowCount();
var colCount=query_result.getColumnCount();
var json=new java.lang.StringBuilder('{ "result" : {');

var columnHeaders = new Array();
columnHeaders[0] = '"metrica"';
for (var col=0; col<colCount; col++) {
	columnHeaders[col+1] = query_result.getMetaData().getColumnHeaders()[0][col];
}

json.append( 
    '"metadata": { ' +
        '"columns": ' + formataJSON(columnHeaders) + ', ' + QL +
        '"rows": ' + rowCount + ', ' + QL +
        '"cols": ' + (colCount+1) + QL +
    ' },' + QL);


json.append('"data" : [ ');
var rowData = null;
while (rowData = query_result.nextFlattened()) {
	json.append(QL).append(formataJSON(rowData));
	json.append(',');
}
json.deleteCharAt(json.length()-1); 

json.append(QL + '] ' + QL);

json.append('}' + QL + '}');

if (callback !== '' || callback === null) {
    json = callback + '(' + json.toString() + ')'
} else {
    json = json.toString();
}]]></script> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>TemplateComponent</component-name>
        <action-type>Message Template</action-type>
        <action-inputs> 
          <json type="string"/> 
        </action-inputs>
        <action-outputs> 
          <output-message type="string" mapping="out"/> 
        </action-outputs>
        <component-definition> 
          <template><![CDATA[{json}]]></template> 
        </component-definition> 
      </action-definition>
 
    </actions>
	
	<!-- *************************** gaugeConsolidado -  GAUGE - FACTORING || DASHBOARD - CARTEIRAO || gaugeFactoring*************** -->  
    <actions> 
      <condition><![CDATA[getData == "gaugeFactoring"]]></condition>  
            <action-definition> 
        <component-name>JavascriptRule</component-name>
        <action-type>JavaScript</action-type>
        <action-inputs> 
          <query_result_Empresa type="result-set"/>
		</action-inputs>
        <action-outputs> 
          <strQuery type="string"/> 
        </action-outputs>
        <component-definition> 
          <script><![CDATA[

var empresaFACTORING = query_result_Empresa.getValueAt(0,1).toString();
var grupo_economicoFACTORING = query_result_Empresa.getValueAt(0,2).toString();	



strQuery   = " with set [Duvidoso] as 'Except({[Comportamento de Pagamento].[Total].Children}, {[Comportamento de Pagamento].[Duvidoso]})'   member [Measures].[Contenciosos] as '([Comportamento de Pagamento].[Duvidoso], [Measures].[Valor do Titulo])'   member [Measures].[Recebiveis_Aux] as 'Sum({[Operacoes.Operacoes : Codigo].[Outros].[053], [Operacoes.Operacoes : Codigo].[Titulos].[041], [Operacoes.Operacoes : Codigo].[Titulos].[040], [Operacoes.Operacoes : Codigo].[Titulos].[046], [Operacoes.Operacoes : Codigo].[Titulos].[042]}, [Measures].[Valor do Titulo])'   member [Measures].[Recebiveis] as 'Sum([Duvidoso], [Measures].[Recebiveis_Aux])'   member [Measures].[Total] as '([Measures].[Contenciosos] + [Measures].[Recebiveis])'   member [Measures].[%_Aux] as '([Measures].[Contenciosos] / [Measures].[Total])*100', format_string = \"#0.00%\"   member [Measures].[%] as 'IIf(([Measures].[%_Aux] IS EMPTY), 0, [Measures].[%_Aux])' select NON EMPTY {[Measures].[%], [Measures].[Contenciosos], [Measures].[Total]} ON COLUMNS,   NON EMPTY {[Empresa].[CONSOLIDADO].["+empresaFACTORING+"]} ON ROWS from [Operacoes de Credito] where Crossjoin({[Produto].[Propria]}, {[Situacao do Pagamento].[Em aberto]})";



		
;]]> </script> 
        </component-definition> 
      </action-definition>
	  	  
	  <action-definition> 
        <component-name>MDXLookupRule</component-name>
        <action-type>OLAP</action-type>
        <action-inputs> 
     	  <strQuery type="string"/> 
        </action-inputs>
        <action-resources> 
          <catalog mapping="catalog1"/> 
        </action-resources>
        <action-outputs> 
          <query-results type="result-set" mapping="query_result"/> 
        </action-outputs>
        <component-definition> 
          <jndi><![CDATA[dw_wba_fi]]></jndi>  
          <catalog>Operacoes de Credito</catalog> 
           <query><![CDATA[{strQuery}]]></query> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>JavascriptRule</component-name>
        <action-type>JavaScript</action-type>
        <action-inputs> 
          <query_result type="result-set"/>  
          <callback type="string"/> 
        </action-inputs>
        <action-outputs> 
          <json type="string"/>  
          <rowCount type="integer"/> 
        </action-outputs>
        <component-definition> 
          <script><![CDATA[
QL = ''; 
DEBUG=false;

function formataJSON(v) {
        var s = null;
        if (v == null) {
            s = 'null';
        } else if (v instanceof java.lang.String) {
            s = '"' + v + '"';
        } else if (v instanceof java.util.Date) {
            s = /*"new Date(" +*/ v.getTime() /*+ ")"*/;
        } else if (v instanceof Array) {
            s = new java.lang.StringBuilder("[ ");
            for (var i=0; i<v.length; i++) {
                if (i>0) {
                    s.append(',');
                }
                s.append(formataJSON(v[i]));
            }
            s.append(" ]");
        } else {
            s = v.toString();
        }
        if (DEBUG) {
             s = s.toString() + " /* " + v.getClass().getName() + " */";
        }
        return s.toString();
}

var rowCount=query_result.getRowCount();
var colCount=query_result.getColumnCount();
var json=new java.lang.StringBuilder('{ "result" : {');

var columnHeaders = new Array();
columnHeaders[0] = '"metrica"';
for (var col=0; col<colCount; col++) {
	columnHeaders[col+1] = query_result.getMetaData().getColumnHeaders()[0][col];
}

json.append( 
    '"metadata": { ' +
        '"columns": ' + formataJSON(columnHeaders) + ', ' + QL +
        '"rows": ' + rowCount + ', ' + QL +
        '"cols": ' + (colCount+1) + QL +
    ' },' + QL);


json.append('"data" : [ ');
var rowData = null;
while (rowData = query_result.nextFlattened()) {
	json.append(QL).append(formataJSON(rowData));
	json.append(',');
}
json.deleteCharAt(json.length()-1); 

json.append(QL + '] ' + QL);

json.append('}' + QL + '}');

if (callback !== '' || callback === null) {
    json = callback + '(' + json.toString() + ')'
} else {
    json = json.toString();
}]]></script> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>TemplateComponent</component-name>
        <action-type>Message Template</action-type>
        <action-inputs> 
          <json type="string"/> 
        </action-inputs>
        <action-outputs> 
          <output-message type="string" mapping="out"/> 
        </action-outputs>
        <component-definition> 
          <template><![CDATA[{json}]]></template> 
        </component-definition> 
      </action-definition>
 
    </actions>
	
	<!---GAUGE FIDC -->
	 <actions> 
      <condition><![CDATA[getData == "gaugeFidc"]]></condition>  
            <action-definition> 
        <component-name>JavascriptRule</component-name>
        <action-type>JavaScript</action-type>
        <action-inputs> 
          <query_result_Empresa type="result-set"/>
		</action-inputs>
        <action-outputs> 
          <strQuery type="string"/> 
        </action-outputs>
        <component-definition> 
          <script><![CDATA[

var empresaFACTORING = query_result_Empresa.getValueAt(0,1).toString();
var grupo_economicoFACTORING = query_result_Empresa.getValueAt(0,2).toString();	
			
var empresaFIDC = query_result_Empresa.getValueAt(1,1).toString();
var grupo_economicoFIDC = query_result_Empresa.getValueAt(1,2).toString();				



		strQuery   = " with set [Duvidoso] as 'Except({[Comportamento de Pagamento].[Total].Children}, {[Comportamento de Pagamento].[Duvidoso]})'   member [Measures].[Contenciosos] as '([Comportamento de Pagamento].[Duvidoso], [Measures].[Valor do Titulo])'   member [Measures].[Recebiveis_Aux] as 'Sum({[Operacoes.Operacoes : Codigo].[Outros].[053], [Operacoes.Operacoes : Codigo].[Titulos].[041], [Operacoes.Operacoes : Codigo].[Titulos].[040], [Operacoes.Operacoes : Codigo].[Titulos].[046], [Operacoes.Operacoes : Codigo].[Titulos].[042]}, [Measures].[Valor do Titulo])'   member [Measures].[Recebiveis] as 'Sum([Duvidoso], [Measures].[Recebiveis_Aux])'   member [Measures].[Total] as '([Measures].[Contenciosos] + [Measures].[Recebiveis])'   member [Measures].[%_Aux] as '([Measures].[Contenciosos] / [Measures].[Total])*100'   member [Measures].[%] as 'IIf(([Measures].[%_Aux] IS EMPTY), 0, [Measures].[%_Aux])' select NON EMPTY {[Measures].[%], [Measures].[Contenciosos], [Measures].[Total]} ON COLUMNS,   NON EMPTY {[Empresa].[CONSOLIDADO].["+empresaFIDC+"]} ON ROWS from [Operacoes de Credito] where Crossjoin({[Produto].[Propria]}, {[Situacao do Pagamento].[Em aberto]})";
		
;]]> </script> 
        </component-definition> 
      </action-definition>
	  	  
	  <action-definition> 
        <component-name>MDXLookupRule</component-name>
        <action-type>OLAP</action-type>
        <action-inputs> 
     	  <strQuery type="string"/> 
        </action-inputs>
        <action-resources> 
          <catalog mapping="catalog1"/> 
        </action-resources>
        <action-outputs> 
          <query-results type="result-set" mapping="query_result"/> 
        </action-outputs>
        <component-definition> 
          <jndi><![CDATA[dw_wba_fi]]></jndi>  
          <catalog>Operacoes de Credito</catalog> 
           <query><![CDATA[{strQuery}]]></query> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>JavascriptRule</component-name>
        <action-type>JavaScript</action-type>
        <action-inputs> 
          <query_result type="result-set"/>  
          <callback type="string"/> 
        </action-inputs>
        <action-outputs> 
          <json type="string"/>  
          <rowCount type="integer"/> 
        </action-outputs>
        <component-definition> 
          <script><![CDATA[
QL = ''; 
DEBUG=false;

function formataJSON(v) {
        var s = null;
        if (v == null) {
            s = 'null';
        } else if (v instanceof java.lang.String) {
            s = '"' + v + '"';
        } else if (v instanceof java.util.Date) {
            s = /*"new Date(" +*/ v.getTime() /*+ ")"*/;
        } else if (v instanceof Array) {
            s = new java.lang.StringBuilder("[ ");
            for (var i=0; i<v.length; i++) {
                if (i>0) {
                    s.append(',');
                }
                s.append(formataJSON(v[i]));
            }
            s.append(" ]");
        } else {
            s = v.toString();
        }
        if (DEBUG) {
             s = s.toString() + " /* " + v.getClass().getName() + " */";
        }
        return s.toString();
}

var rowCount=query_result.getRowCount();
var colCount=query_result.getColumnCount();
var json=new java.lang.StringBuilder('{ "result" : {');

var columnHeaders = new Array();
columnHeaders[0] = '"metrica"';
for (var col=0; col<colCount; col++) {
	columnHeaders[col+1] = query_result.getMetaData().getColumnHeaders()[0][col];
}

json.append( 
    '"metadata": { ' +
        '"columns": ' + formataJSON(columnHeaders) + ', ' + QL +
        '"rows": ' + rowCount + ', ' + QL +
        '"cols": ' + (colCount+1) + QL +
    ' },' + QL);


json.append('"data" : [ ');
var rowData = null;
while (rowData = query_result.nextFlattened()) {
	json.append(QL).append(formataJSON(rowData));
	json.append(',');
}
json.deleteCharAt(json.length()-1); 

json.append(QL + '] ' + QL);

json.append('}' + QL + '}');

if (callback !== '' || callback === null) {
    json = callback + '(' + json.toString() + ')'
} else {
    json = json.toString();
}]]></script> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>TemplateComponent</component-name>
        <action-type>Message Template</action-type>
        <action-inputs> 
          <json type="string"/> 
        </action-inputs>
        <action-outputs> 
          <output-message type="string" mapping="out"/> 
        </action-outputs>
        <component-definition> 
          <template><![CDATA[{json}]]></template> 
        </component-definition> 
      </action-definition>
 
    </actions>
	
	<!-- *************************** Tabela Cedentes -  TABELA - CONSOLIDADO || DASHBOARD - CARTEIRAO || tabelaCedente *************** -->  
    <actions> 
      <condition><![CDATA[getData == "tabelaCedente"]]></condition>  
            <action-definition> 
        <component-name>JavascriptRule</component-name>
        <action-type>JavaScript</action-type>
        <action-inputs> 
          <query_result_Empresa type="result-set"/>
		</action-inputs>
        <action-outputs> 
          <strQuery type="string"/> 
        </action-outputs>
        <component-definition> 
          <script><![CDATA[

		strQuery   = "with member [Measures].[Valor Total_] as 'Sum({Ancestor([Cedente].CurrentMember, 1.0)}, [Measures].[Valor do Titulo])' member [Measures].[Valor Total] as 'IIf(([Measures].[Valor Total_] IS EMPTY), 0, [Measures].[Valor Total_])' member [Measures].[%_] as '([Measures].[Valor do Titulo] / [Measures].[Valor Total])' member [Measures].[%] as 'IIf(([Measures].[%_] IS EMPTY), 0, [Measures].[%_])' member [Measures].[Titulo] as 'IIf(([Measures].[Valor do Titulo] IS EMPTY), 0, [Measures].[Valor do Titulo])' select NON EMPTY {[Measures].[%_], [Measures].[Valor do Titulo]} ON COLUMNS, NON EMPTY TopCount(Order({[Cedente].[Total].Children}, [Measures].[Valor do Titulo], DESC), 20.0) ON ROWS from [Operacoes de Credito] where Crossjoin(Crossjoin(Crossjoin({[Estado do Titulo].[Duvidoso]}, {[Empresa].[CONSOLIDADO]}), {[Operacoes.Operacoes : Codigo].[Outros].[053], [Operacoes.Operacoes : Codigo].[Titulos].[040], [Operacoes.Operacoes : Codigo].[Titulos].[041], [Operacoes.Operacoes : Codigo].[Titulos].[046], [Operacoes.Operacoes : Codigo].[Titulos].[042]}), {[Situacao do Pagamento].[Em aberto]})";		
				
;]]> </script> 
        </component-definition> 
      </action-definition>
	  	  
	  <action-definition> 
        <component-name>MDXLookupRule</component-name>
        <action-type>OLAP</action-type>
        <action-inputs> 
     	  <strQuery type="string"/> 
        </action-inputs>
        <action-resources> 
          <catalog mapping="catalog1"/> 
        </action-resources>
        <action-outputs> 
          <query-results type="result-set" mapping="query_result"/> 
        </action-outputs>
        <component-definition> 
          <jndi><![CDATA[dw_wba_fi]]></jndi>  
          <catalog>Operacoes de Credito</catalog> 
           <query><![CDATA[{strQuery}]]></query> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>JavascriptRule</component-name>
        <action-type>JavaScript</action-type>
        <action-inputs> 
          <query_result type="result-set"/>  
          <callback type="string"/> 
        </action-inputs>
        <action-outputs> 
          <json type="string"/>  
          <rowCount type="integer"/> 
        </action-outputs>
        <component-definition> 
          <script><![CDATA[
QL = ''; 
DEBUG=false;

function formataJSON(v) {
        var s = null;
        if (v == null) {
            s = 'null';
        } else if (v instanceof java.lang.String) {
            s = '"' + v + '"';
        } else if (v instanceof java.util.Date) {
            s = /*"new Date(" +*/ v.getTime() /*+ ")"*/;
        } else if (v instanceof Array) {
            s = new java.lang.StringBuilder("[ ");
            for (var i=0; i<v.length; i++) {
                if (i>0) {
                    s.append(',');
                }
                s.append(formataJSON(v[i]));
            }
            s.append(" ]");
        } else {
            s = v.toString();
        }
        if (DEBUG) {
             s = s.toString() + " /* " + v.getClass().getName() + " */";
        }
        return s.toString();
}

var rowCount=query_result.getRowCount();
var colCount=query_result.getColumnCount();
var json=new java.lang.StringBuilder('{ "result" : {');

var columnHeaders = new Array();
columnHeaders[0] = '"metrica"';
for (var col=0; col<colCount; col++) {
	columnHeaders[col+1] = query_result.getMetaData().getColumnHeaders()[0][col];
}

json.append( 
    '"metadata": { ' +
        '"columns": ' + formataJSON(columnHeaders) + ', ' + QL +
        '"rows": ' + rowCount + ', ' + QL +
        '"cols": ' + (colCount+1) + QL +
    ' },' + QL);


json.append('"data" : [ ');
var rowData = null;
while (rowData = query_result.nextFlattened()) {
	json.append(QL).append(formataJSON(rowData));
	json.append(',');
}
json.deleteCharAt(json.length()-1); 

json.append(QL + '] ' + QL);

json.append('}' + QL + '}');

if (callback !== '' || callback === null) {
    json = callback + '(' + json.toString() + ')'
} else {
    json = json.toString();
}]]></script> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>TemplateComponent</component-name>
        <action-type>Message Template</action-type>
        <action-inputs> 
          <json type="string"/> 
        </action-inputs>
        <action-outputs> 
          <output-message type="string" mapping="out"/> 
        </action-outputs>
        <component-definition> 
          <template><![CDATA[{json}]]></template> 
        </component-definition> 
      </action-definition>
 
    </actions>
	
	<!-- *************************** Tabela Cedentes -  TABELA - FIDC || DASHBOARD - CARTEIRAO || tabelaCedenteFidc *************** -->  
    <actions> 
      <condition><![CDATA[getData == "tabelaCedenteFidc"]]></condition>  
            <action-definition> 
        <component-name>JavascriptRule</component-name>
        <action-type>JavaScript</action-type>
        <action-inputs> 
          <query_result_Empresa type="result-set"/>
		</action-inputs>
        <action-outputs> 
          <strQuery type="string"/> 
        </action-outputs>
        <component-definition> 
          <script><![CDATA[

var empresaFACTORING = query_result_Empresa.getValueAt(0,1).toString();
var grupo_economicoFACTORING = query_result_Empresa.getValueAt(0,2).toString();	
			
var empresaFIDC = query_result_Empresa.getValueAt(1,1).toString();
var grupo_economicoFIDC = query_result_Empresa.getValueAt(1,2).toString();				



		strQuery   = " with member [Measures].[Valor Total_] as 'Sum({Ancestor([Cedente].CurrentMember, 1.0)}, [Measures].[Valor do Titulo])'";
		strQuery   += "   member [Measures].[Valor Total] as 'IIf(([Measures].[Valor Total_] IS EMPTY), 0, [Measures].[Valor Total_])'";
		strQuery   += "   member [Measures].[%_] as '([Measures].[Valor do Titulo] / [Measures].[Valor Total])'";
		strQuery   += "   member [Measures].[%] as 'IIf(([Measures].[%_] IS EMPTY), 0, [Measures].[%_])'";
		strQuery   += "   member [Measures].[Titulo] as 'IIf(([Measures].[Valor do Titulo] IS EMPTY), 0, [Measures].[Valor do Titulo])'";
		strQuery   += "   select NON EMPTY {[Measures].[%_], [Measures].[Valor do Titulo]} ON COLUMNS,";
		strQuery   += "   NON EMPTY TopCount(Order({[Cedente].[Total].Children}, [Measures].[Valor do Titulo], DESC), 20.0) ON ROWS";
		strQuery   += "   from [Operacoes de Credito]";
		strQuery   += "	  where Crossjoin(Crossjoin(Crossjoin({[Estado do Titulo].[Duvidoso]}, {[Empresa].[CONSOLIDADO].["+empresaFIDC+"]}), {[Operacoes.Operacoes : Codigo].[Outros].[053], [Operacoes.Operacoes : Codigo].[Titulos].[040], [Operacoes.Operacoes : Codigo].[Titulos].[041], [Operacoes.Operacoes : Codigo].[Titulos].[046], [Operacoes.Operacoes : Codigo].[Titulos].[042]}), {[Situacao do Pagamento].[Em aberto]})";		
				
;]]> </script> 
        </component-definition> 
      </action-definition>
	  	  
	  <action-definition> 
        <component-name>MDXLookupRule</component-name>
        <action-type>OLAP</action-type>
        <action-inputs> 
     	  <strQuery type="string"/> 
        </action-inputs>
        <action-resources> 
          <catalog mapping="catalog1"/> 
        </action-resources>
        <action-outputs> 
          <query-results type="result-set" mapping="query_result"/> 
        </action-outputs>
        <component-definition> 
          <jndi><![CDATA[dw_wba_fi]]></jndi>  
          <catalog>Operacoes de Credito</catalog> 
           <query><![CDATA[{strQuery}]]></query> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>JavascriptRule</component-name>
        <action-type>JavaScript</action-type>
        <action-inputs> 
          <query_result type="result-set"/>  
          <callback type="string"/> 
        </action-inputs>
        <action-outputs> 
          <json type="string"/>  
          <rowCount type="integer"/> 
        </action-outputs>
        <component-definition> 
          <script><![CDATA[
QL = ''; 
DEBUG=false;

function formataJSON(v) {
        var s = null;
        if (v == null) {
            s = 'null';
        } else if (v instanceof java.lang.String) {
            s = '"' + v + '"';
        } else if (v instanceof java.util.Date) {
            s = /*"new Date(" +*/ v.getTime() /*+ ")"*/;
        } else if (v instanceof Array) {
            s = new java.lang.StringBuilder("[ ");
            for (var i=0; i<v.length; i++) {
                if (i>0) {
                    s.append(',');
                }
                s.append(formataJSON(v[i]));
            }
            s.append(" ]");
        } else {
            s = v.toString();
        }
        if (DEBUG) {
             s = s.toString() + " /* " + v.getClass().getName() + " */";
        }
        return s.toString();
}

var rowCount=query_result.getRowCount();
var colCount=query_result.getColumnCount();
var json=new java.lang.StringBuilder('{ "result" : {');

var columnHeaders = new Array();
columnHeaders[0] = '"metrica"';
for (var col=0; col<colCount; col++) {
	columnHeaders[col+1] = query_result.getMetaData().getColumnHeaders()[0][col];
}

json.append( 
    '"metadata": { ' +
        '"columns": ' + formataJSON(columnHeaders) + ', ' + QL +
        '"rows": ' + rowCount + ', ' + QL +
        '"cols": ' + (colCount+1) + QL +
    ' },' + QL);


json.append('"data" : [ ');
var rowData = null;
while (rowData = query_result.nextFlattened()) {
	json.append(QL).append(formataJSON(rowData));
	json.append(',');
}
json.deleteCharAt(json.length()-1); 

json.append(QL + '] ' + QL);

json.append('}' + QL + '}');

if (callback !== '' || callback === null) {
    json = callback + '(' + json.toString() + ')'
} else {
    json = json.toString();
}]]></script> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>TemplateComponent</component-name>
        <action-type>Message Template</action-type>
        <action-inputs> 
          <json type="string"/> 
        </action-inputs>
        <action-outputs> 
          <output-message type="string" mapping="out"/> 
        </action-outputs>
        <component-definition> 
          <template><![CDATA[{json}]]></template> 
        </component-definition> 
      </action-definition>
 
    </actions>
	
	<!-- *************************** Tabela Cedentes -  TABELA - FACTORING || DASHBOARD - CARTEIRAO || tabelaCedenteFactoring *************** -->  
    <actions> 
      <condition><![CDATA[getData == "tabelaCedenteFactoring"]]></condition>  
            <action-definition> 
        <component-name>JavascriptRule</component-name>
        <action-type>JavaScript</action-type>
        <action-inputs> 
          <query_result_Empresa type="result-set"/>
		</action-inputs>
        <action-outputs> 
          <strQuery type="string"/> 
        </action-outputs>
        <component-definition> 
          <script><![CDATA[

		   
var empresaFACTORING = query_result_Empresa.getValueAt(0,1).toString();
var grupo_economicoFACTORING = query_result_Empresa.getValueAt(0,2).toString();	
			
var empresaFIDC = query_result_Empresa.getValueAt(1,1).toString();
var grupo_economicoFIDC = query_result_Empresa.getValueAt(1,2).toString();				



		strQuery   = " with member [Measures].[Valor Total_] as 'Sum({Ancestor([Cedente].CurrentMember, 1.0)}, [Measures].[Valor do Titulo])'";
		strQuery   += "   member [Measures].[Valor Total] as 'IIf(([Measures].[Valor Total_] IS EMPTY), 0, [Measures].[Valor Total_])'";
		strQuery   += "   member [Measures].[%_] as '([Measures].[Valor do Titulo] / [Measures].[Valor Total])', format_string = \"#0.00%\"";
		strQuery   += "   member [Measures].[%] as 'IIf(([Measures].[%_] IS EMPTY), 0, [Measures].[%_])'";
		strQuery   += "   member [Measures].[Titulo] as 'IIf(([Measures].[Valor do Titulo] IS EMPTY), 0, [Measures].[Valor do Titulo])'";
		strQuery   += "   select NON EMPTY {[Measures].[%_], [Measures].[Valor do Titulo]} ON COLUMNS,";
		strQuery   += "   NON EMPTY TopCount(Order({[Cedente].[Total].Children}, [Measures].[Valor do Titulo], DESC), 20.0) ON ROWS";
		strQuery   += "   from [Operacoes de Credito]";
		strQuery   += "	  where Crossjoin(Crossjoin(Crossjoin({[Estado do Titulo].[Duvidoso]}, {[Empresa].[CONSOLIDADO].["+empresaFACTORING+"]}), {[Operacoes.Operacoes : Codigo].[Outros].[053], [Operacoes.Operacoes : Codigo].[Titulos].[040], [Operacoes.Operacoes : Codigo].[Titulos].[041], [Operacoes.Operacoes : Codigo].[Titulos].[046], [Operacoes.Operacoes : Codigo].[Titulos].[042]}), {[Situacao do Pagamento].[Em aberto]})";		
				
;]]> </script> 
        </component-definition> 
      </action-definition>
	  	  
	  <action-definition> 
        <component-name>MDXLookupRule</component-name>
        <action-type>OLAP</action-type>
        <action-inputs> 
     	  <strQuery type="string"/> 
        </action-inputs>
        <action-resources> 
          <catalog mapping="catalog1"/> 
        </action-resources>
        <action-outputs> 
          <query-results type="result-set" mapping="query_result"/> 
        </action-outputs>
        <component-definition> 
          <jndi><![CDATA[dw_wba_fi]]></jndi>  
          <catalog>Operacoes de Credito</catalog> 
           <query><![CDATA[{strQuery}]]></query> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>JavascriptRule</component-name>
        <action-type>JavaScript</action-type>
        <action-inputs> 
          <query_result type="result-set"/>  
          <callback type="string"/> 
        </action-inputs>
        <action-outputs> 
          <json type="string"/>  
          <rowCount type="integer"/> 
        </action-outputs>
        <component-definition> 
          <script><![CDATA[
QL = ''; 
DEBUG=false;

function formataJSON(v) {
        var s = null;
        if (v == null) {
            s = 'null';
        } else if (v instanceof java.lang.String) {
            s = '"' + v + '"';
        } else if (v instanceof java.util.Date) {
            s = /*"new Date(" +*/ v.getTime() /*+ ")"*/;
        } else if (v instanceof Array) {
            s = new java.lang.StringBuilder("[ ");
            for (var i=0; i<v.length; i++) {
                if (i>0) {
                    s.append(',');
                }
                s.append(formataJSON(v[i]));
            }
            s.append(" ]");
        } else {
            s = v.toString();
        }
        if (DEBUG) {
             s = s.toString() + " /* " + v.getClass().getName() + " */";
        }
        return s.toString();
}

var rowCount=query_result.getRowCount();
var colCount=query_result.getColumnCount();
var json=new java.lang.StringBuilder('{ "result" : {');

var columnHeaders = new Array();
columnHeaders[0] = '"metrica"';
for (var col=0; col<colCount; col++) {
	columnHeaders[col+1] = query_result.getMetaData().getColumnHeaders()[0][col];
}

json.append( 
    '"metadata": { ' +
        '"columns": ' + formataJSON(columnHeaders) + ', ' + QL +
        '"rows": ' + rowCount + ', ' + QL +
        '"cols": ' + (colCount+1) + QL +
    ' },' + QL);


json.append('"data" : [ ');
var rowData = null;
while (rowData = query_result.nextFlattened()) {
	json.append(QL).append(formataJSON(rowData));
	json.append(',');
}
json.deleteCharAt(json.length()-1); 

json.append(QL + '] ' + QL);

json.append('}' + QL + '}');

if (callback !== '' || callback === null) {
    json = callback + '(' + json.toString() + ')'
} else {
    json = json.toString();
}]]></script> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>TemplateComponent</component-name>
        <action-type>Message Template</action-type>
        <action-inputs> 
          <json type="string"/> 
        </action-inputs>
        <action-outputs> 
          <output-message type="string" mapping="out"/> 
        </action-outputs>
        <component-definition> 
          <template><![CDATA[{json}]]></template> 
        </component-definition> 
      </action-definition>
 
    </actions>





	<!-- *************************** Tabela Cedentes -  Por Empresa *************** -->  
    <actions> 
      <condition><![CDATA[getData == "tabelaCedentePorEmpresa"]]></condition>  
            <action-definition> 
        <component-name>JavascriptRule</component-name>
        <action-type>JavaScript</action-type>
        <action-inputs> 
          <Empresa type="String"/>
		</action-inputs>
        <action-outputs> 
          <strQuery type="string"/> 
        </action-outputs>
        <component-definition> 
          <script><![CDATA[
		   	   
		if (Empresa == "0")
		{
		strQuery   = "with member [Measures].[Valor Total] as 'Sum({Ancestor([Cedente].CurrentMember, 1.0)}, [Measures].[Valor do Titulo])' 					  member [Measures].[%] as '([Measures].[Valor do Titulo] / [Measures].[Valor Total])', format_string = \"#0.00%\" 					  member [Measures].[Total Top 10] as 'Sum(TopCount(Order({[Cedente].[Total].Children}, [Measures].[Valor do Titulo], DESC), 10.0), [Measures].[Valor do Titulo])' 					  member [Measures].[% Top 10] as 'Sum(TopCount(Order({[Cedente].[Total].Children}, [Measures].[Valor do Titulo], DESC), 10.0), [Measures].[%])', format_string =  \"#0.00%\" 					select NON EMPTY {[Measures].[Valor do Titulo], [Measures].[%], [Measures].[Total Top 10], [Measures].[% Top 10]} ON COLUMNS, 					  NON EMPTY Union({[Cedente].[Total]}, TopCount(Order({[Cedente].[Total].Children}, [Measures].[Valor do Titulo], DESC), 10.0)) ON ROWS 					from [Operacoes de Credito] 					where Crossjoin(Crossjoin(Crossjoin({[Empresa].[CONSOLIDADO]}, {[Operacoes.Operacoes : Codigo].[Outros].[053], [Operacoes.Operacoes : Codigo].[Titulos].[040], [Operacoes.Operacoes : Codigo].[Titulos].[041], [Operacoes.Operacoes : Codigo].[Titulos].[046]}), {[Produto].[Propria]}), {[Situacao do Pagamento].[Em aberto]})";		
		
		
		}else{


		strQuery   = "with member [Measures].[Valor Total] as 'Sum({Ancestor([Cedente].CurrentMember, 1.0)}, [Measures].[Valor do Titulo])' 					  member [Measures].[%] as '([Measures].[Valor do Titulo] / [Measures].[Valor Total])', format_string = \"#0.00%\" 					  member [Measures].[Total Top 10] as 'Sum(TopCount(Order({[Cedente].[Total].Children}, [Measures].[Valor do Titulo], DESC), 10.0), [Measures].[Valor do Titulo])' 					  member [Measures].[% Top 10] as 'Sum(TopCount(Order({[Cedente].[Total].Children}, [Measures].[Valor do Titulo], DESC), 10.0), [Measures].[%])', format_string =  \"#0.00%\" 					select NON EMPTY {[Measures].[Valor do Titulo], [Measures].[%], [Measures].[Total Top 10], [Measures].[% Top 10]} ON COLUMNS, 					  NON EMPTY Union({[Cedente].[Total]}, TopCount(Order({[Cedente].[Total].Children}, [Measures].[Valor do Titulo], DESC), 10.0)) ON ROWS 					from [Operacoes de Credito] 					where Crossjoin(Crossjoin(Crossjoin({[Empresa].[CONSOLIDADO].[{Empresa}]}, {[Operacoes.Operacoes : Codigo].[Outros].[053], [Operacoes.Operacoes : Codigo].[Titulos].[040], [Operacoes.Operacoes : Codigo].[Titulos].[041], [Operacoes.Operacoes : Codigo].[Titulos].[046]}), {[Produto].[Propria]}), {[Situacao do Pagamento].[Em aberto]})";		

	}
		
;]]> </script> 
        </component-definition> 
      </action-definition>
	  	  
	  <action-definition> 
        <component-name>MDXLookupRule</component-name>
        <action-type>OLAP</action-type>
        <action-inputs> 
     	  <Empresa type="String"/>	
		  <strQuery type="string"/>
        </action-inputs>
        <action-resources> 
          <catalog mapping="catalog1"/> 
        </action-resources>
        <action-outputs> 
          <query-results type="result-set" mapping="query_result"/> 
        </action-outputs>
        <component-definition> 
          <jndi><![CDATA[dw_wba_fi]]></jndi>  
          <catalog>Operacoes de Credito</catalog> 
           <query><![CDATA[{strQuery}]]></query> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>JavascriptRule</component-name>
        <action-type>JavaScript</action-type>
        <action-inputs> 
          <query_result type="result-set"/>  
          <callback type="string"/> 
        </action-inputs>
        <action-outputs> 
          <json type="string"/>  
          <rowCount type="integer"/> 
        </action-outputs>
        <component-definition> 
          <script><![CDATA[
QL = ''; 
DEBUG=false;

function formataJSON(v) {
        var s = null;
        if (v == null) {
            s = 'null';
        } else if (v instanceof java.lang.String) {
            s = '"' + v + '"';
        } else if (v instanceof java.util.Date) {
            s = /*"new Date(" +*/ v.getTime() /*+ ")"*/;
        } else if (v instanceof Array) {
            s = new java.lang.StringBuilder("[ ");
            for (var i=0; i<v.length; i++) {
                if (i>0) {
                    s.append(',');
                }
                s.append(formataJSON(v[i]));
            }
            s.append(" ]");
        } else {
            s = v.toString();
        }
        if (DEBUG) {
             s = s.toString() + " /* " + v.getClass().getName() + " */";
        }
        return s.toString();
}

var rowCount=query_result.getRowCount();
var colCount=query_result.getColumnCount();
var json=new java.lang.StringBuilder('{ "result" : {');

var columnHeaders = new Array();
columnHeaders[0] = '"metrica"';
for (var col=0; col<colCount; col++) {
	columnHeaders[col+1] = query_result.getMetaData().getColumnHeaders()[0][col];
}

json.append( 
    '"metadata": { ' +
        '"columns": ' + formataJSON(columnHeaders) + ', ' + QL +
        '"rows": ' + rowCount + ', ' + QL +
        '"cols": ' + (colCount+1) + QL +
    ' },' + QL);


json.append('"data" : [ ');
var rowData = null;
while (rowData = query_result.nextFlattened()) {
	json.append(QL).append(formataJSON(rowData));
	json.append(',');
}
json.deleteCharAt(json.length()-1); 

json.append(QL + '] ' + QL);

json.append('}' + QL + '}');

if (callback !== '' || callback === null) {
    json = callback + '(' + json.toString() + ')'
} else {
    json = json.toString();
}]]></script> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>TemplateComponent</component-name>
        <action-type>Message Template</action-type>
        <action-inputs> 
          <json type="string"/> 
        </action-inputs>
        <action-outputs> 
          <output-message type="string" mapping="out"/> 
        </action-outputs>
        <component-definition> 
          <template><![CDATA[{json}]]></template> 
        </component-definition> 
      </action-definition>
 
    </actions>


	
	<!-- ***************************  EVOLUCAO DE OPERACAO*************** -->  
    <actions> 
      <condition><![CDATA[getData == "Evolucao"]]></condition>  
      <action-definition> 
        <component-name>JavascriptRule</component-name>
        <action-type>JavaScript</action-type>
        <action-inputs> 
          <Ano type="string"/>  
          <Mes type="string"/> 
		  <Cedente type="string"/>
  	      <query_result_Empresa type="result-set"/>
        </action-inputs>
        <action-outputs> 
          <strQuery type="string"/> 
        </action-outputs>
        <component-definition> 
          <script><![CDATA[
		
var hoje_ = new Date();
var ano_  = hoje_.getFullYear();
var Mes_  = hoje_.getMonth();
Mes_ =  Mes_+1;
ano_ = ano_- 1;


var Mes_2="";
if (Mes_.toString().length == 1) {
	Mes_2 = "0"+Mes_.toString();
}else
{
    Mes_2 = Mes_;
}
		
var data    = "01/";     	
    data   += Mes_2.toString()+"/";
	data   += ano_.toString();


var dataFim    = "01/";     	
    dataFim   += Mes_2.toString()+"/";
	dataFim   += (ano_+1).toString();

	
strQuery   =   "   select NON EMPTY {[Measures].[Valor do Titulo]} ON COLUMNS,";
strQuery  +=   "     NON EMPTY {([Data Inc Contabil.AnoMesDia].["+ano_+"].[{Mes}].["+data+"]  : [Data Inc Contabil.AnoMesDia].["+Ano+"].[{Mes}].["+dataFim+"])} ON ROWS";
strQuery  +=   "   from [Operacoes de Credito]";
strQuery  +=   "   where Crossjoin(Crossjoin(Crossjoin({[Cedente].[All Cedente]}, {[Empresa].[CONSOLIDADO]}), {[Operacoes.Operacoes : Codigo].[Titulos].[046], [Operacoes.Operacoes : Codigo].[Titulos].[041], [Operacoes.Operacoes : Codigo].[Titulos].[040], [Operacoes.Operacoes : Codigo].[Titulos].[042], [Operacoes.Operacoes : Codigo].[Titulos].[053]}), {[Produto].[Propria]})";



;]]> </script> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>MDXLookupRule</component-name>
        <action-type>OLAP</action-type>
        <action-inputs> 
          <Cedente type="string"/>  
          <Ano type="string"/>  
          <Mes type="string"/>  
		  <Cedente type="string"/>
          <strQuery type="string"/> 
        </action-inputs>
        <action-resources> 
          <catalog mapping="catalog"/> 
        </action-resources>
        <action-outputs> 
          <query-results type="result-set" mapping="query_result"/> 
        </action-outputs>
        <component-definition> 
          <jndi><![CDATA[dw_wba_fi]]></jndi>  
          <catalog>Operacoes de Credito</catalog> 
          <query><![CDATA[{strQuery}]]></query> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>JavascriptRule</component-name>
        <action-type>JavaScript</action-type>
        <action-inputs> 
          <query_result type="result-set"/>  
          <callback type="string"/> 
        </action-inputs>
        <action-outputs> 
          <json type="string"/>  
          <rowCount type="integer"/> 
        </action-outputs>
        <component-definition> 
          <script><![CDATA[
QL = ''; 
DEBUG=false;

function formataJSON(v) {
        var s = null;
        if (v == null) {
            s = 'null';
        } else if (v instanceof java.lang.String) {
            s = '"' + v + '"';
        } else if (v instanceof java.util.Date) {
            s = /*"new Date(" +*/ v.getTime() /*+ ")"*/;
        } else if (v instanceof Array) {
            s = new java.lang.StringBuilder("[ ");
            for (var i=0; i<v.length; i++) {
                if (i>0) {
                    s.append(',');
                }
                s.append(formataJSON(v[i]));
            }
            s.append(" ]");
        } else {
            s = v.toString();
        }
        if (DEBUG) {
             s = s.toString() + " /* " + v.getClass().getName() + " */";
        }
        return s.toString();
}

var rowCount=query_result.getRowCount();
var colCount=query_result.getColumnCount();
var json=new java.lang.StringBuilder('{ "result" : {');

var columnHeaders = new Array();
columnHeaders[0] = '"metrica"';
for (var col=0; col<colCount; col++) {
	columnHeaders[col+1] = query_result.getMetaData().getColumnHeaders()[0][col];
}

json.append( 
    '"metadata": { ' +
        '"columns": ' + formataJSON(columnHeaders) + ', ' + QL +
        '"rows": ' + rowCount + ', ' + QL +
        '"cols": ' + (colCount+1) + QL +
    ' },' + QL);


json.append('"data" : [ ');
var rowData = null;
while (rowData = query_result.nextFlattened()) {
	json.append(QL).append(formataJSON(rowData));
	json.append(',');
}
json.deleteCharAt(json.length()-1); 

json.append(QL + '] ' + QL);

json.append('}' + QL + '}');

if (callback !== '' || callback === null) {
    json = callback + '(' + json.toString() + ')'
} else {
    json = json.toString();
}]]></script> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>TemplateComponent</component-name>
        <action-type>Message Template</action-type>
        <action-inputs> 
          <json type="string"/> 
        </action-inputs>
        <action-outputs> 
          <output-message type="string" mapping="out"/> 
        </action-outputs>
        <component-definition> 
          <template><![CDATA[{json}]]></template> 
        </component-definition> 
      </action-definition>
 
    </actions>
	
	<!-- ***************************  EVOLUCAO DE OPERACAO*******Factoring******** -->  
    <actions> 
      <condition><![CDATA[getData == "EvolucaoFactoring"]]></condition>  
      <action-definition> 
        <component-name>JavascriptRule</component-name>
        <action-type>JavaScript</action-type>
        <action-inputs> 
          <Ano type="string"/>  
          <Mes type="string"/> 
		  <Cedente type="string"/>
  	      <query_result_Empresa type="result-set"/>
        </action-inputs>
        <action-outputs> 
          <strQuery type="string"/> 
        </action-outputs>
        <component-definition> 
          <script><![CDATA[
		
var hoje_ = new Date();
var ano_  = hoje_.getFullYear();
var Mes_  = hoje_.getMonth();
Mes_ =  Mes_+1;
ano_ = ano_- 1;


		   
var empresaFACTORING = query_result_Empresa.getValueAt(0,1).toString();
var grupo_economicoFACTORING = query_result_Empresa.getValueAt(0,2).toString();	
			
var empresaFIDC = query_result_Empresa.getValueAt(1,1).toString();
var grupo_economicoFIDC = query_result_Empresa.getValueAt(1,2).toString();		



var Mes_2="";
if (Mes_.toString().length == 1) {
	Mes_2 = "0"+Mes_.toString();
}else
{
    Mes_2 = Mes_;
}
		
var data    = "01/";     	
    data   += Mes_2.toString()+"/";
	data   += ano_.toString();


var dataFim    = "01/";     	
    dataFim   += Mes_2.toString()+"/";
	dataFim   += (ano_+1).toString();



strQuery   =   "   select NON EMPTY {[Measures].[Valor do Titulo]} ON COLUMNS,";
strQuery  +=   "     NON EMPTY {([Data Inc Contabil.AnoMesDia].["+ano_+"].[{Mes}].["+data+"]  : [Data Inc Contabil.AnoMesDia].["+Ano+"].[{Mes}].["+dataFim+"])} ON ROWS";
strQuery  +=   "   from [Operacoes de Credito]";
strQuery  +=   "   where Crossjoin(Crossjoin(Crossjoin({[Cedente].[All Cedente]}, {[Empresa].[CONSOLIDADO].["+empresaFACTORING+"]}), {[Operacoes.Operacoes : Codigo].[Titulos].[046], [Operacoes.Operacoes : Codigo].[Titulos].[041], [Operacoes.Operacoes : Codigo].[Titulos].[040], [Operacoes.Operacoes : Codigo].[Titulos].[042], [Operacoes.Operacoes : Codigo].[Titulos].[053]}), {[Produto].[Propria]})";



;]]> </script> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>MDXLookupRule</component-name>
        <action-type>OLAP</action-type>
        <action-inputs> 
          <Cedente type="string"/>  
          <Ano type="string"/>  
          <Mes type="string"/>  
		  <Cedente type="string"/>
          <strQuery type="string"/> 
        </action-inputs>
        <action-resources> 
          <catalog mapping="catalog"/> 
        </action-resources>
        <action-outputs> 
          <query-results type="result-set" mapping="query_result"/> 
        </action-outputs>
        <component-definition> 
          <jndi><![CDATA[dw_wba_fi]]></jndi>  
          <catalog>Operacoes de Credito</catalog> 
          <query><![CDATA[{strQuery}]]></query> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>JavascriptRule</component-name>
        <action-type>JavaScript</action-type>
        <action-inputs> 
          <query_result type="result-set"/>  
          <callback type="string"/> 
        </action-inputs>
        <action-outputs> 
          <json type="string"/>  
          <rowCount type="integer"/> 
        </action-outputs>
        <component-definition> 
          <script><![CDATA[
QL = ''; 
DEBUG=false;

function formataJSON(v) {
        var s = null;
        if (v == null) {
            s = 'null';
        } else if (v instanceof java.lang.String) {
            s = '"' + v + '"';
        } else if (v instanceof java.util.Date) {
            s = /*"new Date(" +*/ v.getTime() /*+ ")"*/;
        } else if (v instanceof Array) {
            s = new java.lang.StringBuilder("[ ");
            for (var i=0; i<v.length; i++) {
                if (i>0) {
                    s.append(',');
                }
                s.append(formataJSON(v[i]));
            }
            s.append(" ]");
        } else {
            s = v.toString();
        }
        if (DEBUG) {
             s = s.toString() + " /* " + v.getClass().getName() + " */";
        }
        return s.toString();
}

var rowCount=query_result.getRowCount();
var colCount=query_result.getColumnCount();
var json=new java.lang.StringBuilder('{ "result" : {');

var columnHeaders = new Array();
columnHeaders[0] = '"metrica"';
for (var col=0; col<colCount; col++) {
	columnHeaders[col+1] = query_result.getMetaData().getColumnHeaders()[0][col];
}

json.append( 
    '"metadata": { ' +
        '"columns": ' + formataJSON(columnHeaders) + ', ' + QL +
        '"rows": ' + rowCount + ', ' + QL +
        '"cols": ' + (colCount+1) + QL +
    ' },' + QL);


json.append('"data" : [ ');
var rowData = null;
while (rowData = query_result.nextFlattened()) {
	json.append(QL).append(formataJSON(rowData));
	json.append(',');
}
json.deleteCharAt(json.length()-1); 

json.append(QL + '] ' + QL);

json.append('}' + QL + '}');

if (callback !== '' || callback === null) {
    json = callback + '(' + json.toString() + ')'
} else {
    json = json.toString();
}]]></script> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>TemplateComponent</component-name>
        <action-type>Message Template</action-type>
        <action-inputs> 
          <json type="string"/> 
        </action-inputs>
        <action-outputs> 
          <output-message type="string" mapping="out"/> 
        </action-outputs>
        <component-definition> 
          <template><![CDATA[{json}]]></template> 
        </component-definition> 
      </action-definition>
 
    </actions>
	
	<!-- ***************************  EVOLUCAO DE OPERACAO*******Fidc******** -->  
    <actions> 
      <condition><![CDATA[getData == "EvolucaoFidc"]]></condition>  
      <action-definition> 
        <component-name>JavascriptRule</component-name>
        <action-type>JavaScript</action-type>
        <action-inputs> 
          <Ano type="string"/>  
          <Mes type="string"/> 
		   <Cedente type="string"/>
  	      <query_result_Empresa type="result-set"/>
        </action-inputs>
        <action-outputs> 
          <strQuery type="string"/> 
        </action-outputs>
        <component-definition> 
          <script><![CDATA[
		
var hoje_ = new Date();
var ano_  = hoje_.getFullYear();
var Mes_  = hoje_.getMonth();
Mes_ =  Mes_+1;
ano_ = ano_- 1;


		   
var empresaFACTORING = query_result_Empresa.getValueAt(0,1).toString();
var grupo_economicoFACTORING = query_result_Empresa.getValueAt(0,2).toString();	
			
var empresaFIDC = query_result_Empresa.getValueAt(1,1).toString();
var grupo_economicoFIDC = query_result_Empresa.getValueAt(1,2).toString();		



var Mes_2="";
if (Mes_.toString().length == 1) {
	Mes_2 = "0"+Mes_.toString();
}else
{
    Mes_2 = Mes_;
}
		
var data    = "01/";     	
    data   += Mes_2.toString()+"/";
	data   += ano_.toString();


var dataFim    = "01/";     	
    dataFim   += Mes_2.toString()+"/";
	dataFim   += (ano_+1).toString();

	
	
strQuery   =   "   select NON EMPTY {[Measures].[Valor do Titulo]} ON COLUMNS,";
strQuery  +=   "     NON EMPTY {([Data Inc Contabil.AnoMesDia].["+ano_+"].[{Mes}].["+data+"]  : [Data Inc Contabil.AnoMesDia].["+Ano+"].[{Mes}].["+dataFim+"])} ON ROWS";
strQuery  +=   "   from [Operacoes de Credito]";
strQuery  +=   "   where Crossjoin(Crossjoin(Crossjoin({[Cedente].[All Cedente]}, {[Empresa].[CONSOLIDADO].["+empresaFIDC+"]}), {[Operacoes.Operacoes : Codigo].[Titulos].[046], [Operacoes.Operacoes : Codigo].[Titulos].[041], [Operacoes.Operacoes : Codigo].[Titulos].[040], [Operacoes.Operacoes : Codigo].[Titulos].[042], [Operacoes.Operacoes : Codigo].[Titulos].[053]}), {[Produto].[Propria]})";


;]]> </script> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>MDXLookupRule</component-name>
        <action-type>OLAP</action-type>
        <action-inputs> 
          <Cedente type="string"/>  
          <Ano type="string"/>  
          <Mes type="string"/>  
		   <Cedente type="string"/>
          <strQuery type="string"/> 
        </action-inputs>
        <action-resources> 
          <catalog mapping="catalog"/> 
        </action-resources>
        <action-outputs> 
          <query-results type="result-set" mapping="query_result"/> 
        </action-outputs>
        <component-definition> 
          <jndi><![CDATA[dw_wba_fi]]></jndi>  
          <catalog>Operacoes de Credito</catalog> 
          <query><![CDATA[{strQuery}]]></query> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>JavascriptRule</component-name>
        <action-type>JavaScript</action-type>
        <action-inputs> 
          <query_result type="result-set"/>  
          <callback type="string"/> 
        </action-inputs>
        <action-outputs> 
          <json type="string"/>  
          <rowCount type="integer"/> 
        </action-outputs>
        <component-definition> 
          <script><![CDATA[
QL = ''; 
DEBUG=false;

function formataJSON(v) {
        var s = null;
        if (v == null) {
            s = 'null';
        } else if (v instanceof java.lang.String) {
            s = '"' + v + '"';
        } else if (v instanceof java.util.Date) {
            s = /*"new Date(" +*/ v.getTime() /*+ ")"*/;
        } else if (v instanceof Array) {
            s = new java.lang.StringBuilder("[ ");
            for (var i=0; i<v.length; i++) {
                if (i>0) {
                    s.append(',');
                }
                s.append(formataJSON(v[i]));
            }
            s.append(" ]");
        } else {
            s = v.toString();
        }
        if (DEBUG) {
             s = s.toString() + " /* " + v.getClass().getName() + " */";
        }
        return s.toString();
}

var rowCount=query_result.getRowCount();
var colCount=query_result.getColumnCount();
var json=new java.lang.StringBuilder('{ "result" : {');

var columnHeaders = new Array();
columnHeaders[0] = '"metrica"';
for (var col=0; col<colCount; col++) {
	columnHeaders[col+1] = query_result.getMetaData().getColumnHeaders()[0][col];
}

json.append( 
    '"metadata": { ' +
        '"columns": ' + formataJSON(columnHeaders) + ', ' + QL +
        '"rows": ' + rowCount + ', ' + QL +
        '"cols": ' + (colCount+1) + QL +
    ' },' + QL);


json.append('"data" : [ ');
var rowData = null;
while (rowData = query_result.nextFlattened()) {
	json.append(QL).append(formataJSON(rowData));
	json.append(',');
}
json.deleteCharAt(json.length()-1); 

json.append(QL + '] ' + QL);

json.append('}' + QL + '}');

if (callback !== '' || callback === null) {
    json = callback + '(' + json.toString() + ')'
} else {
    json = json.toString();
}]]></script> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>TemplateComponent</component-name>
        <action-type>Message Template</action-type>
        <action-inputs> 
          <json type="string"/> 
        </action-inputs>
        <action-outputs> 
          <output-message type="string" mapping="out"/> 
        </action-outputs>
        <component-definition> 
          <template><![CDATA[{json}]]></template> 
        </component-definition> 
      </action-definition>
 
    </actions>
	
	<!-- **********************************CONSOLIDADO - em aberto/ vencido >90 / vencido <90******** -->  
    <actions> 
      <condition><![CDATA[getData == "EmAbertoVencido"]]></condition>  
      <action-definition> 
        <component-name>JavascriptRule</component-name>
        <action-type>JavaScript</action-type>
        <action-inputs> 
          <Ano type="string"/>  
          <Mes type="string"/> 
  	      <query_result_Empresa type="result-set"/>
        </action-inputs>
        <action-outputs> 
          <strQuery type="string"/> 
        </action-outputs>
        <component-definition> 
          <script><![CDATA[
		
var hoje_ = new Date();
var ano_  = hoje_.getFullYear();
var Mes_  = hoje_.getMonth();
Mes_ =  Mes_+1;
ano_ = ano_- 1;


		   
var empresaFACTORING = query_result_Empresa.getValueAt(0,1).toString();
var grupo_economicoFACTORING = query_result_Empresa.getValueAt(0,2).toString();	
			
var empresaFIDC = query_result_Empresa.getValueAt(1,1).toString();
var grupo_economicoFIDC = query_result_Empresa.getValueAt(1,2).toString();		



var Mes_2="";
if (Mes_.toString().length == 1) {
	Mes_2 = "0"+Mes_.toString();
}else
{
    Mes_2 = Mes_;
}
		
var data    = "01/";     	
    data   += Mes_2.toString()+"/";
	data   += ano_.toString();


var dataFim    = "01/";     	
    dataFim   += Mes_2.toString()+"/";
	dataFim   += (ano_+1).toString();

	
	
strQuery   =   " select SUM(isnull(C.[A vencer],0)) as [A vencer] ,
SUM(isnull(C.[Vencido > 90],0)) as [Vencido > 90] ,
SUM(isnull(C.[Vencido < 90],0)) as [Vencido < 90] 
from (select  case when  F.dm062_000 = 1 then  SUM(F.opft001_110) end as [A vencer] ,
case when  F.dm062_000 = 2 and DATEDIFF(DAY,T.dm028_010, GETDATE()) > 90  then  SUM(F.opft001_110) end as [Vencido > 90] ,
case when  F.dm062_000 = 2 and DATEDIFF(DAY,T.dm028_010, GETDATE()) < 90  then  SUM(F.opft001_110) end as [Vencido < 90] ,
case when  F.dm062_000 = 2 and DATEDIFF(DAY,T.dm028_010, GETDATE()) = 90  then  SUM(F.opft001_110) end as [Vencido = 90] ,
case when  F.dm062_000 = 2 then  SUM(F.opft001_110) end as [Vencido] 
from optbft001 as F 
inner join tctbdm028 as T on T.dm028_000 = F.sk_data_vcto     
inner join optbdm060 as L on L.dm060_000 = F.dm099_000
inner join TCTBDM023 as emp on f.DM023_000 = emp.DM023_000 
where F.dm062_000 in  (1,2) and   emp.DM023_001 in  (1,2) 
 and   F.dm012_000 in  (1,3) and   L.dm060_001 in ('040','041','042','046') 
 and   F.dm003_000 <> (6) group by F.dm062_000, T.dm028_010 ) as C";


;]]> </script> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>SQLLookupRule</component-name>
        <action-type>OLAP</action-type>
        <action-inputs> 
          <Cedente type="string"/>  
          <Ano type="string"/>  
          <Mes type="string"/>  
          <strQuery type="string"/> 
        </action-inputs>
        <action-resources> 
          <catalog mapping="catalog"/> 
        </action-resources>
        <action-outputs> 
          <query-results type="result-set" mapping="query_result"/> 
        </action-outputs>
        <component-definition> 
          <jndi><![CDATA[dw_wba_fi]]></jndi>  
          <catalog>Operacoes de Credito</catalog> 
          <query><![CDATA[{strQuery}]]></query> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>JavascriptRule</component-name>
        <action-type>JavaScript</action-type>
        <action-inputs> 
          <query_result type="result-set"/>  
          <callback type="string"/> 
        </action-inputs>
        <action-outputs> 
          <json type="string"/>  
          <rowCount type="integer"/> 
        </action-outputs>
        <component-definition> 
          <script><![CDATA[
QL = ''; 
DEBUG=false;

function formataJSON(v) {
        var s = null;
        if (v == null) {
            s = 'null';
        } else if (v instanceof java.lang.String) {
            s = '"' + v + '"';
        } else if (v instanceof java.util.Date) {
            s = /*"new Date(" +*/ v.getTime() /*+ ")"*/;
        } else if (v instanceof Array) {
            s = new java.lang.StringBuilder("[ ");
            for (var i=0; i<v.length; i++) {
                if (i>0) {
                    s.append(',');
                }
                s.append(formataJSON(v[i]));
            }
            s.append(" ]");
        } else {
            s = v.toString();
        }
        if (DEBUG) {
             s = s.toString() + " /* " + v.getClass().getName() + " */";
        }
        return s.toString();
}

var rowCount=query_result.getRowCount();
var colCount=query_result.getColumnCount();
var json=new java.lang.StringBuilder('{ "result" : {');

var columnHeaders = new Array();
columnHeaders[0] = '"metrica"';
for (var col=0; col<colCount; col++) {
	columnHeaders[col+1] = query_result.getMetaData().getColumnHeaders()[0][col];
}

json.append( 
    '"metadata": { ' +
        '"columns": ' + formataJSON(columnHeaders) + ', ' + QL +
        '"rows": ' + rowCount + ', ' + QL +
        '"cols": ' + (colCount+1) + QL +
    ' },' + QL);


json.append('"data" : [ ');
var rowData = null;
while (rowData = query_result.nextFlattened()) {
	json.append(QL).append(formataJSON(rowData));
	json.append(',');
}
json.deleteCharAt(json.length()-1); 

json.append(QL + '] ' + QL);

json.append('}' + QL + '}');

if (callback !== '' || callback === null) {
    json = callback + '(' + json.toString() + ')'
} else {
    json = json.toString();
}]]></script> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>TemplateComponent</component-name>
        <action-type>Message Template</action-type>
        <action-inputs> 
          <json type="string"/> 
        </action-inputs>
        <action-outputs> 
          <output-message type="string" mapping="out"/> 
        </action-outputs>
        <component-definition> 
          <template><![CDATA[{json}]]></template> 
        </component-definition> 
      </action-definition>
 
    </actions>
		
	<!-- **********************************FACTORING - em aberto/ vencido >90 / vencido <90******** -->  
    <actions> 
      <condition><![CDATA[getData == "EmAbertoVencidoFactoring"]]></condition>  
      <action-definition> 
        <component-name>JavascriptRule</component-name>
        <action-type>JavaScript</action-type>
        <action-inputs> 
          <Ano type="string"/>  
          <Mes type="string"/> 
  	      <query_result_Empresa type="result-set"/>
        </action-inputs>
        <action-outputs> 
          <strQuery type="string"/> 
        </action-outputs>
        <component-definition> 
          <script><![CDATA[
		
var hoje_ = new Date();
var ano_  = hoje_.getFullYear();
var Mes_  = hoje_.getMonth();
Mes_ =  Mes_+1;
ano_ = ano_- 1;


		   
var empresaFACTORING = query_result_Empresa.getValueAt(0,1).toString();
var grupo_economicoFACTORING = query_result_Empresa.getValueAt(0,2).toString();	
			
var empresaFIDC = query_result_Empresa.getValueAt(1,1).toString();
var grupo_economicoFIDC = query_result_Empresa.getValueAt(1,2).toString();		



var Mes_2="";
if (Mes_.toString().length == 1) {
	Mes_2 = "0"+Mes_.toString();
}else
{
    Mes_2 = Mes_;
}
		
var data    = "01/";     	
    data   += Mes_2.toString()+"/";
	data   += ano_.toString();


var dataFim    = "01/";     	
    dataFim   += Mes_2.toString()+"/";
	dataFim   += (ano_+1).toString();

	
	
strQuery   =   "select SUM(isnull(C.[A vencer],0)) as [A vencer] ,SUM(isnull(C.[Vencido > 90],0)) as [Vencido > 90] ,SUM(isnull(C.[Vencido < 90],0)) as [Vencido < 90] from (select  case when  F.dm062_000 = 1 then  SUM(F.opft001_110) end as [A vencer] ,case when  F.dm062_000 = 2 and DATEDIFF(DAY,T.dm028_010, GETDATE()) > 90  then  SUM(F.opft001_110) end as [Vencido > 90] ,case when  F.dm062_000 = 2 and DATEDIFF(DAY,T.dm028_010, GETDATE()) < 90  then  SUM(F.opft001_110) end as [Vencido < 90] ,case when  F.dm062_000 = 2 and DATEDIFF(DAY,T.dm028_010, GETDATE()) = 90  then  SUM(F.opft001_110) end as [Vencido = 90] ,case when  F.dm062_000 = 2 then  SUM(F.opft001_110) end as [Vencido] from optbft001 as F inner join tctbdm028 as T on T.dm028_000 = F.sk_data_vcto     inner join optbdm060 as L on L.dm060_000 = F.dm099_000 inner join TCTBDM023 as emp on f.DM023_000=emp.DM023_000 where F.dm062_000 in  (1,2) and   emp.DM023_001 in  (1)  and   F.dm012_000 in  (1,3) and   L.dm060_001 in ('040','041','042','046') and   F.dm003_000 <> (6) group by F.dm062_000, T.dm028_010 ) as C";


;]]> </script> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>SQLLookupRule</component-name>
        <action-type>OLAP</action-type>
        <action-inputs> 
          <Cedente type="string"/>  
          <Ano type="string"/>  
          <Mes type="string"/>  
          <strQuery type="string"/> 
        </action-inputs>
        <action-resources> 
          <catalog mapping="catalog"/> 
        </action-resources>
        <action-outputs> 
          <query-results type="result-set" mapping="query_result"/> 
        </action-outputs>
        <component-definition> 
          <jndi><![CDATA[dw_wba_fi]]></jndi>  
          <catalog>Operacoes de Credito</catalog> 
          <query><![CDATA[{strQuery}]]></query> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>JavascriptRule</component-name>
        <action-type>JavaScript</action-type>
        <action-inputs> 
          <query_result type="result-set"/>  
          <callback type="string"/> 
        </action-inputs>
        <action-outputs> 
          <json type="string"/>  
          <rowCount type="integer"/> 
        </action-outputs>
        <component-definition> 
          <script><![CDATA[
QL = ''; 
DEBUG=false;

function formataJSON(v) {
        var s = null;
        if (v == null) {
            s = 'null';
        } else if (v instanceof java.lang.String) {
            s = '"' + v + '"';
        } else if (v instanceof java.util.Date) {
            s = /*"new Date(" +*/ v.getTime() /*+ ")"*/;
        } else if (v instanceof Array) {
            s = new java.lang.StringBuilder("[ ");
            for (var i=0; i<v.length; i++) {
                if (i>0) {
                    s.append(',');
                }
                s.append(formataJSON(v[i]));
            }
            s.append(" ]");
        } else {
            s = v.toString();
        }
        if (DEBUG) {
             s = s.toString() + " /* " + v.getClass().getName() + " */";
        }
        return s.toString();
}

var rowCount=query_result.getRowCount();
var colCount=query_result.getColumnCount();
var json=new java.lang.StringBuilder('{ "result" : {');

var columnHeaders = new Array();
columnHeaders[0] = '"metrica"';
for (var col=0; col<colCount; col++) {
	columnHeaders[col+1] = query_result.getMetaData().getColumnHeaders()[0][col];
}

json.append( 
    '"metadata": { ' +
        '"columns": ' + formataJSON(columnHeaders) + ', ' + QL +
        '"rows": ' + rowCount + ', ' + QL +
        '"cols": ' + (colCount+1) + QL +
    ' },' + QL);


json.append('"data" : [ ');
var rowData = null;
while (rowData = query_result.nextFlattened()) {
	json.append(QL).append(formataJSON(rowData));
	json.append(',');
}
json.deleteCharAt(json.length()-1); 

json.append(QL + '] ' + QL);

json.append('}' + QL + '}');

if (callback !== '' || callback === null) {
    json = callback + '(' + json.toString() + ')'
} else {
    json = json.toString();
}]]></script> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>TemplateComponent</component-name>
        <action-type>Message Template</action-type>
        <action-inputs> 
          <json type="string"/> 
        </action-inputs>
        <action-outputs> 
          <output-message type="string" mapping="out"/> 
        </action-outputs>
        <component-definition> 
          <template><![CDATA[{json}]]></template> 
        </component-definition> 
      </action-definition>
 
    </actions>
	
	<!-- **********************************FIDC - em aberto/ vencido >90 / vencido <90******** -->  
    <actions> 
      <condition><![CDATA[getData == "EmAbertoVencidoFidc"]]></condition>  
      <action-definition> 
        <component-name>JavascriptRule</component-name>
        <action-type>JavaScript</action-type>
        <action-inputs> 
          <Ano type="string"/>  
          <Mes type="string"/> 
  	      <query_result_Empresa type="result-set"/>
        </action-inputs>
        <action-outputs> 
          <strQuery type="string"/> 
        </action-outputs>
        <component-definition> 
          <script><![CDATA[
		
var hoje_ = new Date();
var ano_  = hoje_.getFullYear();
var Mes_  = hoje_.getMonth();
Mes_ =  Mes_+1;
ano_ = ano_- 1;


		   
var empresaFACTORING = query_result_Empresa.getValueAt(0,1).toString();
var grupo_economicoFACTORING = query_result_Empresa.getValueAt(0,2).toString();	
			
var empresaFIDC = query_result_Empresa.getValueAt(1,1).toString();
var grupo_economicoFIDC = query_result_Empresa.getValueAt(1,2).toString();		



var Mes_2="";
if (Mes_.toString().length == 1) {
	Mes_2 = "0"+Mes_.toString();
}else
{
    Mes_2 = Mes_;
}
		
var data    = "01/";     	
    data   += Mes_2.toString()+"/";
	data   += ano_.toString();


var dataFim    = "01/";     	
    dataFim   += Mes_2.toString()+"/";
	dataFim   += (ano_+1).toString();

	
	
strQuery   =   "select SUM(isnull(C.[A vencer],0)) as [A vencer] ,
SUM(isnull(C.[Vencido > 90],0)) as [Vencido > 90] ,
SUM(isnull(C.[Vencido < 90],0)) as [Vencido < 90] 
from (
select  
case when  F.dm062_000 = 1 then  SUM(F.opft001_110) end as [A vencer] ,
case when  F.dm062_000 = 2 and DATEDIFF(DAY,T.dm028_010, GETDATE()) > 90  then  SUM(F.opft001_110) end as [Vencido > 90] ,
case when  F.dm062_000 = 2 and DATEDIFF(DAY,T.dm028_010, GETDATE()) < 90  then  SUM(F.opft001_110) end as [Vencido < 90] ,
case when  F.dm062_000 = 2 and DATEDIFF(DAY,T.dm028_010, GETDATE()) = 90  then  SUM(F.opft001_110) end as [Vencido = 90] ,
case when  F.dm062_000 = 2 then  SUM(F.opft001_110) end as [Vencido] 
from optbft001 as F inner join tctbdm028 as T on T.dm028_000 = F.sk_data_vcto     
inner join optbdm060 as L on L.dm060_000 = F.dm099_000
inner join TCTBDM023 as emp on f.DM023_000 = emp.DM023_000 
where F.dm062_000 in  (1,2) and  emp.dm023_001 in  (2)  and   F.dm012_000 in  (1,3) and   L.dm060_001 in ('040','041','042','046') and   F.dm003_000 <> (6) 
group by F.dm062_000, T.dm028_010 ) as C";


;]]> </script> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>SQLLookupRule</component-name>
        <action-type>OLAP</action-type>
        <action-inputs> 
          <Cedente type="string"/>  
          <Ano type="string"/>  
          <Mes type="string"/>  
          <strQuery type="string"/> 
        </action-inputs>
        <action-resources> 
          <catalog mapping="catalog"/> 
        </action-resources>
        <action-outputs> 
          <query-results type="result-set" mapping="query_result"/> 
        </action-outputs>
        <component-definition> 
          <jndi><![CDATA[dw_wba_fi]]></jndi>  
          <catalog>Operacoes de Credito</catalog> 
          <query><![CDATA[{strQuery}]]></query> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>JavascriptRule</component-name>
        <action-type>JavaScript</action-type>
        <action-inputs> 
          <query_result type="result-set"/>  
          <callback type="string"/> 
        </action-inputs>
        <action-outputs> 
          <json type="string"/>  
          <rowCount type="integer"/> 
        </action-outputs>
        <component-definition> 
          <script><![CDATA[
QL = ''; 
DEBUG=false;

function formataJSON(v) {
        var s = null;
        if (v == null) {
            s = 'null';
        } else if (v instanceof java.lang.String) {
            s = '"' + v + '"';
        } else if (v instanceof java.util.Date) {
            s = /*"new Date(" +*/ v.getTime() /*+ ")"*/;
        } else if (v instanceof Array) {
            s = new java.lang.StringBuilder("[ ");
            for (var i=0; i<v.length; i++) {
                if (i>0) {
                    s.append(',');
                }
                s.append(formataJSON(v[i]));
            }
            s.append(" ]");
        } else {
            s = v.toString();
        }
        if (DEBUG) {
             s = s.toString() + " /* " + v.getClass().getName() + " */";
        }
        return s.toString();
}

var rowCount=query_result.getRowCount();
var colCount=query_result.getColumnCount();
var json=new java.lang.StringBuilder('{ "result" : {');

var columnHeaders = new Array();
columnHeaders[0] = '"metrica"';
for (var col=0; col<colCount; col++) {
	columnHeaders[col+1] = query_result.getMetaData().getColumnHeaders()[0][col];
}

json.append( 
    '"metadata": { ' +
        '"columns": ' + formataJSON(columnHeaders) + ', ' + QL +
        '"rows": ' + rowCount + ', ' + QL +
        '"cols": ' + (colCount+1) + QL +
    ' },' + QL);


json.append('"data" : [ ');
var rowData = null;
while (rowData = query_result.nextFlattened()) {
	json.append(QL).append(formataJSON(rowData));
	json.append(',');
}
json.deleteCharAt(json.length()-1); 

json.append(QL + '] ' + QL);

json.append('}' + QL + '}');

if (callback !== '' || callback === null) {
    json = callback + '(' + json.toString() + ')'
} else {
    json = json.toString();
}]]></script> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>TemplateComponent</component-name>
        <action-type>Message Template</action-type>
        <action-inputs> 
          <json type="string"/> 
        </action-inputs>
        <action-outputs> 
          <output-message type="string" mapping="out"/> 
        </action-outputs>
        <component-definition> 
          <template><![CDATA[{json}]]></template> 
        </component-definition> 
      </action-definition>
 
    </actions>
	
	<!-- **********************************Totulos por cedente pelo Sacado******** -->  
    <actions> 
      <condition><![CDATA[getData == "TitulosCedente"]]></condition>  
      <action-definition> 
        <component-name>JavascriptRule</component-name>
        <action-type>JavaScript</action-type>
        <action-inputs> 
          <Ano type="string"/>  
          <Mes type="string"/> 
  	      <query_result_Empresa type="result-set"/>
		   <Cedente type="string"/>  
        </action-inputs>
        <action-outputs> 
          <strQuery type="string"/> 
        </action-outputs>
        <component-definition> 
          <script><![CDATA[
		
var hoje_ = new Date();
var ano_  = hoje_.getFullYear();
var Mes_  = hoje_.getMonth();
Mes_ =  Mes_+1;
ano_ = ano_- 1;


		   
var empresaFACTORING = query_result_Empresa.getValueAt(0,1).toString();
var grupo_economicoFACTORING = query_result_Empresa.getValueAt(0,2).toString();	
			
var empresaFIDC = query_result_Empresa.getValueAt(1,1).toString();
var grupo_economicoFIDC = query_result_Empresa.getValueAt(1,2).toString();		



var Mes_2="";
if (Mes_.toString().length == 1) {
	Mes_2 = "0"+Mes_.toString();
}else
{
    Mes_2 = Mes_;
}
		
var data    = "01/";     	
    data   += Mes_2.toString()+"/";
	data   += ano_.toString();


var dataFim    = "01/";     	
    dataFim   += Mes_2.toString()+"/";
	dataFim   += (ano_+1).toString();

	
	
strQuery   =   " select  S.dm022_010    as SACADO , convert(varchar(10),(select T.dm028_010 from tctbdm028 as T where T.dm028_000 = F.sk_data_vcto),103)as VCTO, 
 convert(varchar(10),
 (select T.dm028_010 from tctbdm028 as T where T.dm028_000 = F.dm070_000),103)as EMISSAO,    F.dm039_000    as N_DOCUMENTO, Tipo.dm067_010    as TIPO,
      F.opft001_110  as VALOR 
      from titbft001 as F  
      inner join optbdm060 as L on L.dm060_000 = F.dm099_000 
      inner join tctbdm022 as S on S.dm022_000 = F.dm022_000      
      inner join tctbdm001 as C on C.dm001_000 = F.dm001_000  
      inner join optbdm067 as Tipo  on Tipo.dm067_000 = F.dm067_000 
      inner join TCTBDM023 as emp on f.DM023_000 = emp.DM023_000
      where F.dm062_000 in  (1,2) and   emp.DM023_001 in  (1,2) and   
      F.dm012_000 in  (1,3) and   L.dm060_001 in ('040','041','042','046') and   
      F.dm003_000 <> (6) and   C.dm001_010 = '"+Cedente+"'  order by 1,4,5,2";


;]]> </script> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>SQLLookupRule</component-name>
        <action-type>OLAP</action-type>
        <action-inputs> 
          <Ano type="string"/>  
          <Mes type="string"/>  
          <strQuery type="string"/> 
        </action-inputs>
        <action-resources> 
          <catalog mapping="catalog"/> 
        </action-resources>
        <action-outputs> 
          <query-results type="result-set" mapping="query_result"/> 
        </action-outputs>
        <component-definition> 
          <jndi><![CDATA[dw_wba_fi]]></jndi>  
          <catalog>Operacoes de Credito</catalog> 
          <query><![CDATA[{strQuery}]]></query> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>JavascriptRule</component-name>
        <action-type>JavaScript</action-type>
        <action-inputs> 
          <query_result type="result-set"/>  
          <callback type="string"/> 
        </action-inputs>
        <action-outputs> 
          <json type="string"/>  
          <rowCount type="integer"/> 
        </action-outputs>
        <component-definition> 
          <script><![CDATA[
QL = ''; 
DEBUG=false;

function formataJSON(v) {
        var s = null;
        if (v == null) {
            s = 'null';
        } else if (v instanceof java.lang.String) {
            s = '"' + v + '"';
        } else if (v instanceof java.util.Date) {
            s = /*"new Date(" +*/ v.getTime() /*+ ")"*/;
        } else if (v instanceof Array) {
            s = new java.lang.StringBuilder("[ ");
            for (var i=0; i<v.length; i++) {
                if (i>0) {
                    s.append(',');
                }
                s.append(formataJSON(v[i]));
            }
            s.append(" ]");
        } else {
            s = v.toString();
        }
        if (DEBUG) {
             s = s.toString() + " /* " + v.getClass().getName() + " */";
        }
        return s.toString();
}

var rowCount=query_result.getRowCount();
var colCount=query_result.getColumnCount();
var json=new java.lang.StringBuilder('{ "result" : {');

var columnHeaders = new Array();
columnHeaders[0] = '"metrica"';
for (var col=0; col<colCount; col++) {
	columnHeaders[col+1] = query_result.getMetaData().getColumnHeaders()[0][col];
}

json.append( 
    '"metadata": { ' +
        '"columns": ' + formataJSON(columnHeaders) + ', ' + QL +
        '"rows": ' + rowCount + ', ' + QL +
        '"cols": ' + (colCount+1) + QL +
    ' },' + QL);


json.append('"data" : [ ');
var rowData = null;
while (rowData = query_result.nextFlattened()) {
	json.append(QL).append(formataJSON(rowData));
	json.append(',');
}
json.deleteCharAt(json.length()-1); 

json.append(QL + '] ' + QL);

json.append('}' + QL + '}');

if (callback !== '' || callback === null) {
    json = callback + '(' + json.toString() + ')'
} else {
    json = json.toString();
}]]></script> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>TemplateComponent</component-name>
        <action-type>Message Template</action-type>
        <action-inputs> 
          <json type="string"/> 
        </action-inputs>
        <action-outputs> 
          <output-message type="string" mapping="out"/> 
        </action-outputs>
        <component-definition> 
          <template><![CDATA[{json}]]></template> 
        </component-definition> 
      </action-definition>
 
    </actions>
	
	<!-- **********************************Tipo de Produto - Consolidado******** -->  
    <actions> 
      <condition><![CDATA[getData == "TipoProduto"]]></condition>  
      <action-definition> 
        <component-name>JavascriptRule</component-name>
        <action-type>JavaScript</action-type>
        <action-inputs> 
          <Ano type="string"/>  
          <Mes type="string"/> 
  	      <query_result_Empresa type="result-set"/>
		   <Cedente type="string"/>  
        </action-inputs>
        <action-outputs> 
          <strQuery type="string"/> 
        </action-outputs>
        <component-definition> 
          <script><![CDATA[
		
	
strQuery   =   "select case when Tp.dm060_001 = '040' then 'Duplicata' 
	when Tp.dm060_001 = '041' then 'Cheque'  
	when Tp.dm060_001 = '042' then 'Acordo'      
	when Tp.dm060_001 = '046' then 'Comissaria'    
	when Tp.dm060_001 = '053' then 'Fomento' end as Tipo_Produto ,
	SUM(opft001_110) as Valor_Titulo 
	from optbft001 as F     
	inner join optbdm060 as Tp on Tp.dm060_000 = F.dm099_000 
	inner join TCTBDM023 as emp on f.DM023_000 = emp.DM023_000
	where Tp.dm060_001 in ('042','053','046','041','040') and   emp.DM023_001 in  (1,2)  
	AND F.dm003_000 <> 6 and   F.dm062_000 in  (1,2) and   F.dm012_000 in  (1,3) 
	group by Tp.dm060_001, Tp.dm060_010";

;]]> </script> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>SQLLookupRule</component-name>
        <action-type>OLAP</action-type>
        <action-inputs> 
          <Ano type="string"/>  
          <Mes type="string"/>  
          <strQuery type="string"/> 
        </action-inputs>
        <action-resources> 
          <catalog mapping="catalog"/> 
        </action-resources>
        <action-outputs> 
          <query-results type="result-set" mapping="query_result"/> 
        </action-outputs>
        <component-definition> 
          <jndi><![CDATA[dw_wba_fi]]></jndi>  
          <catalog>Operacoes de Credito</catalog> 
          <query><![CDATA[{strQuery}]]></query> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>JavascriptRule</component-name>
        <action-type>JavaScript</action-type>
        <action-inputs> 
          <query_result type="result-set"/>  
          <callback type="string"/> 
        </action-inputs>
        <action-outputs> 
          <json type="string"/>  
          <rowCount type="integer"/> 
        </action-outputs>
        <component-definition> 
          <script><![CDATA[
QL = ''; 
DEBUG=false;

function formataJSON(v) {
        var s = null;
        if (v == null) {
            s = 'null';
        } else if (v instanceof java.lang.String) {
            s = '"' + v + '"';
        } else if (v instanceof java.util.Date) {
            s = /*"new Date(" +*/ v.getTime() /*+ ")"*/;
        } else if (v instanceof Array) {
            s = new java.lang.StringBuilder("[ ");
            for (var i=0; i<v.length; i++) {
                if (i>0) {
                    s.append(',');
                }
                s.append(formataJSON(v[i]));
            }
            s.append(" ]");
        } else {
            s = v.toString();
        }
        if (DEBUG) {
             s = s.toString() + " /* " + v.getClass().getName() + " */";
        }
        return s.toString();
}

var rowCount=query_result.getRowCount();
var colCount=query_result.getColumnCount();
var json=new java.lang.StringBuilder('{ "result" : {');

var columnHeaders = new Array();
columnHeaders[0] = '"metrica"';
for (var col=0; col<colCount; col++) {
	columnHeaders[col+1] = query_result.getMetaData().getColumnHeaders()[0][col];
}

json.append( 
    '"metadata": { ' +
        '"columns": ' + formataJSON(columnHeaders) + ', ' + QL +
        '"rows": ' + rowCount + ', ' + QL +
        '"cols": ' + (colCount+1) + QL +
    ' },' + QL);


json.append('"data" : [ ');
var rowData = null;
while (rowData = query_result.nextFlattened()) {
	json.append(QL).append(formataJSON(rowData));
	json.append(',');
}
json.deleteCharAt(json.length()-1); 

json.append(QL + '] ' + QL);

json.append('}' + QL + '}');

if (callback !== '' || callback === null) {
    json = callback + '(' + json.toString() + ')'
} else {
    json = json.toString();
}]]></script> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>TemplateComponent</component-name>
        <action-type>Message Template</action-type>
        <action-inputs> 
          <json type="string"/> 
        </action-inputs>
        <action-outputs> 
          <output-message type="string" mapping="out"/> 
        </action-outputs>
        <component-definition> 
          <template><![CDATA[{json}]]></template> 
        </component-definition> 
      </action-definition>
 
    </actions>
		
	<!-- **********************************Tipo de Produto - FIDC******** -->  
    <actions> 
      <condition><![CDATA[getData == "TipoProdutoFidc"]]></condition>  
      <action-definition> 
        <component-name>JavascriptRule</component-name>
        <action-type>JavaScript</action-type>
        <action-inputs> 
          <Ano type="string"/>  
          <Mes type="string"/> 
  	      <query_result_Empresa type="result-set"/>
		   <Cedente type="string"/>  
        </action-inputs>
        <action-outputs> 
          <strQuery type="string"/> 
        </action-outputs>
        <component-definition> 
          <script><![CDATA[
		
var hoje_ = new Date();
var ano_  = hoje_.getFullYear();
var Mes_  = hoje_.getMonth();
Mes_ =  Mes_+1;
ano_ = ano_- 1;


		   
var empresaFACTORING = query_result_Empresa.getValueAt(0,1).toString();
var grupo_economicoFACTORING = query_result_Empresa.getValueAt(0,2).toString();	
			
var empresaFIDC = query_result_Empresa.getValueAt(1,1).toString();
var grupo_economicoFIDC = query_result_Empresa.getValueAt(1,2).toString();		



var Mes_2="";
if (Mes_.toString().length == 1) {
	Mes_2 = "0"+Mes_.toString();
}else
{
    Mes_2 = Mes_;
}
		
var data    = "01/";     	
    data   += Mes_2.toString()+"/";
	data   += ano_.toString();


var dataFim    = "01/";     	
    dataFim   += Mes_2.toString()+"/";
	dataFim   += (ano_+1).toString();

	
	
strQuery   =   " select case when Tp.dm060_001 = '040' then 'Duplicata' when Tp.dm060_001 = '041' then 'Cheque'  when Tp.dm060_001 = '042' then 'Acordo'      when Tp.dm060_001 = '046' then 'Comissaria'    when Tp.dm060_001 = '053' then 'Fomento' end as Tipo_Produto ,SUM(opft001_110) as Valor_Titulo from optbft001 as F     inner join optbdm060 as Tp on Tp.dm060_000 = F.dm099_000 inner join tctbdm023 as emp on f.dm023_000=emp.dm023_000 where Tp.dm060_001 in ('042','053','046','041','040') and   emp.dm023_001 in  (2) and   F.dm062_000 in  (1,2) AND F.dm003_000 <> 6 and   F.dm012_000 in  (1,3) group by Tp.dm060_001, Tp.dm060_010";

;]]> </script> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>SQLLookupRule</component-name>
        <action-type>OLAP</action-type>
        <action-inputs> 
          <Ano type="string"/>  
          <Mes type="string"/>  
          <strQuery type="string"/> 
        </action-inputs>
        <action-resources> 
          <catalog mapping="catalog"/> 
        </action-resources>
        <action-outputs> 
          <query-results type="result-set" mapping="query_result"/> 
        </action-outputs>
        <component-definition> 
          <jndi><![CDATA[dw_wba_fi]]></jndi>  
          <catalog>Operacoes de Credito</catalog> 
          <query><![CDATA[{strQuery}]]></query> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>JavascriptRule</component-name>
        <action-type>JavaScript</action-type>
        <action-inputs> 
          <query_result type="result-set"/>  
          <callback type="string"/> 
        </action-inputs>
        <action-outputs> 
          <json type="string"/>  
          <rowCount type="integer"/> 
        </action-outputs>
        <component-definition> 
          <script><![CDATA[
QL = ''; 
DEBUG=false;

function formataJSON(v) {
        var s = null;
        if (v == null) {
            s = 'null';
        } else if (v instanceof java.lang.String) {
            s = '"' + v + '"';
        } else if (v instanceof java.util.Date) {
            s = /*"new Date(" +*/ v.getTime() /*+ ")"*/;
        } else if (v instanceof Array) {
            s = new java.lang.StringBuilder("[ ");
            for (var i=0; i<v.length; i++) {
                if (i>0) {
                    s.append(',');
                }
                s.append(formataJSON(v[i]));
            }
            s.append(" ]");
        } else {
            s = v.toString();
        }
        if (DEBUG) {
             s = s.toString() + " /* " + v.getClass().getName() + " */";
        }
        return s.toString();
}

var rowCount=query_result.getRowCount();
var colCount=query_result.getColumnCount();
var json=new java.lang.StringBuilder('{ "result" : {');

var columnHeaders = new Array();
columnHeaders[0] = '"metrica"';
for (var col=0; col<colCount; col++) {
	columnHeaders[col+1] = query_result.getMetaData().getColumnHeaders()[0][col];
}

json.append( 
    '"metadata": { ' +
        '"columns": ' + formataJSON(columnHeaders) + ', ' + QL +
        '"rows": ' + rowCount + ', ' + QL +
        '"cols": ' + (colCount+1) + QL +
    ' },' + QL);


json.append('"data" : [ ');
var rowData = null;
while (rowData = query_result.nextFlattened()) {
	json.append(QL).append(formataJSON(rowData));
	json.append(',');
}
json.deleteCharAt(json.length()-1); 

json.append(QL + '] ' + QL);

json.append('}' + QL + '}');

if (callback !== '' || callback === null) {
    json = callback + '(' + json.toString() + ')'
} else {
    json = json.toString();
}]]></script> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>TemplateComponent</component-name>
        <action-type>Message Template</action-type>
        <action-inputs> 
          <json type="string"/> 
        </action-inputs>
        <action-outputs> 
          <output-message type="string" mapping="out"/> 
        </action-outputs>
        <component-definition> 
          <template><![CDATA[{json}]]></template> 
        </component-definition> 
      </action-definition>
 
    </actions>
	
	<!-- **********************************Tipo de Produto - Factoring******** -->  
    <actions> 
      <condition><![CDATA[getData == "TipoProdutoFactoring"]]></condition>  
      <action-definition> 
        <component-name>JavascriptRule</component-name>
        <action-type>JavaScript</action-type>
        <action-inputs> 
          <Ano type="string"/>  
          <Mes type="string"/> 
  	      <query_result_Empresa type="result-set"/>
		   <Cedente type="string"/>  
        </action-inputs>
        <action-outputs> 
          <strQuery type="string"/> 
        </action-outputs>
        <component-definition> 
          <script><![CDATA[
		
var hoje_ = new Date();
var ano_  = hoje_.getFullYear();
var Mes_  = hoje_.getMonth();
Mes_ =  Mes_+1;
ano_ = ano_- 1;


		   
var empresaFACTORING = query_result_Empresa.getValueAt(0,1).toString();
var grupo_economicoFACTORING = query_result_Empresa.getValueAt(0,2).toString();	
			
var empresaFIDC = query_result_Empresa.getValueAt(1,1).toString();
var grupo_economicoFIDC = query_result_Empresa.getValueAt(1,2).toString();		



var Mes_2="";
if (Mes_.toString().length == 1) {
	Mes_2 = "0"+Mes_.toString();
}else
{
    Mes_2 = Mes_;
}
		
var data    = "01/";     	
    data   += Mes_2.toString()+"/";
	data   += ano_.toString();


var dataFim    = "01/";     	
    dataFim   += Mes_2.toString()+"/";
	dataFim   += (ano_+1).toString();

	
	
strQuery   =   " select case when Tp.dm060_001 = '040' then 'Duplicata' when Tp.dm060_001 = '041' then 'Cheque'  when Tp.dm060_001 = '042' then 'Acordo'      when Tp.dm060_001 = '046' then 'Comissaria'    when Tp.dm060_001 = '053' then 'Fomento' end as Tipo_Produto ,SUM(opft001_110) as Valor_Titulo from optbft001 as F     inner join optbdm060 as Tp on Tp.dm060_000 = F.dm099_000 inner join tctbdm023 as emp on f.dm023_000 = emp.dm023_000 where Tp.dm060_001 in ('042','053','046','041','040') and   emp.dm023_001 in  (1) and   F.dm062_000 in  (1,2) and   F.dm012_000 in  (1,3) AND F.dm003_000 <> 6 group by Tp.dm060_001, Tp.dm060_010";

;]]> </script> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>SQLLookupRule</component-name>
        <action-type>OLAP</action-type>
        <action-inputs> 
          <Ano type="string"/>  
          <Mes type="string"/>  
          <strQuery type="string"/> 
        </action-inputs>
        <action-resources> 
          <catalog mapping="catalog"/> 
        </action-resources>
        <action-outputs> 
          <query-results type="result-set" mapping="query_result"/> 
        </action-outputs>
        <component-definition> 
          <jndi><![CDATA[dw_wba_fi]]></jndi>  
          <catalog>Operacoes de Credito</catalog> 
          <query><![CDATA[{strQuery}]]></query> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>JavascriptRule</component-name>
        <action-type>JavaScript</action-type>
        <action-inputs> 
          <query_result type="result-set"/>  
          <callback type="string"/> 
        </action-inputs>
        <action-outputs> 
          <json type="string"/>  
          <rowCount type="integer"/> 
        </action-outputs>
        <component-definition> 
          <script><![CDATA[
QL = ''; 
DEBUG=false;

function formataJSON(v) {
        var s = null;
        if (v == null) {
            s = 'null';
        } else if (v instanceof java.lang.String) {
            s = '"' + v + '"';
        } else if (v instanceof java.util.Date) {
            s = /*"new Date(" +*/ v.getTime() /*+ ")"*/;
        } else if (v instanceof Array) {
            s = new java.lang.StringBuilder("[ ");
            for (var i=0; i<v.length; i++) {
                if (i>0) {
                    s.append(',');
                }
                s.append(formataJSON(v[i]));
            }
            s.append(" ]");
        } else {
            s = v.toString();
        }
        if (DEBUG) {
             s = s.toString() + " /* " + v.getClass().getName() + " */";
        }
        return s.toString();
}

var rowCount=query_result.getRowCount();
var colCount=query_result.getColumnCount();
var json=new java.lang.StringBuilder('{ "result" : {');

var columnHeaders = new Array();
columnHeaders[0] = '"metrica"';
for (var col=0; col<colCount; col++) {
	columnHeaders[col+1] = query_result.getMetaData().getColumnHeaders()[0][col];
}

json.append( 
    '"metadata": { ' +
        '"columns": ' + formataJSON(columnHeaders) + ', ' + QL +
        '"rows": ' + rowCount + ', ' + QL +
        '"cols": ' + (colCount+1) + QL +
    ' },' + QL);


json.append('"data" : [ ');
var rowData = null;
while (rowData = query_result.nextFlattened()) {
	json.append(QL).append(formataJSON(rowData));
	json.append(',');
}
json.deleteCharAt(json.length()-1); 

json.append(QL + '] ' + QL);

json.append('}' + QL + '}');

if (callback !== '' || callback === null) {
    json = callback + '(' + json.toString() + ')'
} else {
    json = json.toString();
}]]></script> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>TemplateComponent</component-name>
        <action-type>Message Template</action-type>
        <action-inputs> 
          <json type="string"/> 
        </action-inputs>
        <action-outputs> 
          <output-message type="string" mapping="out"/> 
        </action-outputs>
        <component-definition> 
          <template><![CDATA[{json}]]></template> 
        </component-definition> 
      </action-definition>
 
    </actions>
	
	<!-- **********************************Tipo de Risco - Conslolidado******** -->  
    <actions> 
      <condition><![CDATA[getData == "TipoRisco"]]></condition>  
      <action-definition> 
        <component-name>JavascriptRule</component-name>
        <action-type>JavaScript</action-type>
        <action-inputs> 
         
        </action-inputs>
        <action-outputs> 
          <strQuery type="string"/> 
        </action-outputs>
        <component-definition> 
          <script><![CDATA[
		
	
strQuery   =   " select ( select SUM(opft001_110) as Valor_Titulo from optbft001 as F inner join optbdm060 as Tp on Tp.dm060_000 = F.dm099_000 inner join tctbdm023 as emp on f.dm023_000 = emp.dm023_000 where Tp.dm060_001 in ('042','053','046') and   emp.dm023_001 in  (1,2) and   F.dm062_000 in  (1,2) AND F.dm003_000 <> 6   and   F.dm012_000 in  (1,3) )as [Risco Cedente],(select SUM(opft001_110) as Valor_Titulo from optbft001 as F inner join optbdm060 as Tp on Tp.dm060_000 = F.dm099_000 inner join TCTBDM023 as emp on f.DM023_000 =emp.DM023_000 where Tp.dm060_001 in ('040','041') and  emp.dm023_001 in  (1,2) and   F.dm062_000 in  (1,2)   AND F.dm003_000 <> 6  and   F.dm012_000 in  (1,3) ) [Risco Sacado]";

;]]> </script> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>SQLLookupRule</component-name>
        <action-type>OLAP</action-type>
        <action-inputs> 
          <Ano type="string"/>  
          <Mes type="string"/>  
          <strQuery type="string"/> 
        </action-inputs>
        <action-resources> 
          <catalog mapping="catalog"/> 
        </action-resources>
        <action-outputs> 
          <query-results type="result-set" mapping="query_result"/> 
        </action-outputs>
        <component-definition> 
          <jndi><![CDATA[dw_wba_fi]]></jndi>  
          <catalog>Operacoes de Credito</catalog> 
          <query><![CDATA[{strQuery}]]></query> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>JavascriptRule</component-name>
        <action-type>JavaScript</action-type>
        <action-inputs> 
          <query_result type="result-set"/>  
          <callback type="string"/> 
        </action-inputs>
        <action-outputs> 
          <json type="string"/>  
          <rowCount type="integer"/> 
        </action-outputs>
        <component-definition> 
          <script><![CDATA[
QL = ''; 
DEBUG=false;

function formataJSON(v) {
        var s = null;
        if (v == null) {
            s = 'null';
        } else if (v instanceof java.lang.String) {
            s = '"' + v + '"';
        } else if (v instanceof java.util.Date) {
            s = /*"new Date(" +*/ v.getTime() /*+ ")"*/;
        } else if (v instanceof Array) {
            s = new java.lang.StringBuilder("[ ");
            for (var i=0; i<v.length; i++) {
                if (i>0) {
                    s.append(',');
                }
                s.append(formataJSON(v[i]));
            }
            s.append(" ]");
        } else {
            s = v.toString();
        }
        if (DEBUG) {
             s = s.toString() + " /* " + v.getClass().getName() + " */";
        }
        return s.toString();
}

var rowCount=query_result.getRowCount();
var colCount=query_result.getColumnCount();
var json=new java.lang.StringBuilder('{ "result" : {');

var columnHeaders = new Array();
columnHeaders[0] = '"metrica"';
for (var col=0; col<colCount; col++) {
	columnHeaders[col+1] = query_result.getMetaData().getColumnHeaders()[0][col];
}

json.append( 
    '"metadata": { ' +
        '"columns": ' + formataJSON(columnHeaders) + ', ' + QL +
        '"rows": ' + rowCount + ', ' + QL +
        '"cols": ' + (colCount+1) + QL +
    ' },' + QL);


json.append('"data" : [ ');
var rowData = null;
while (rowData = query_result.nextFlattened()) {
	json.append(QL).append(formataJSON(rowData));
	json.append(',');
}
json.deleteCharAt(json.length()-1); 

json.append(QL + '] ' + QL);

json.append('}' + QL + '}');

if (callback !== '' || callback === null) {
    json = callback + '(' + json.toString() + ')'
} else {
    json = json.toString();
}]]></script> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>TemplateComponent</component-name>
        <action-type>Message Template</action-type>
        <action-inputs> 
          <json type="string"/> 
        </action-inputs>
        <action-outputs> 
          <output-message type="string" mapping="out"/> 
        </action-outputs>
        <component-definition> 
          <template><![CDATA[{json}]]></template> 
        </component-definition> 
      </action-definition>
 
    </actions>
	
	<!-- **********************************Tipo de Risco - Factoring******** -->  
    <actions> 
      <condition><![CDATA[getData == "TipoRiscoFactoring"]]></condition>  
      <action-definition> 
        <component-name>JavascriptRule</component-name>
        <action-type>JavaScript</action-type>
        <action-inputs> 
         
        </action-inputs>
        <action-outputs> 
          <strQuery type="string"/> 
        </action-outputs>
        <component-definition> 
          <script><![CDATA[
		
	
strQuery   =   " select ( select SUM(opft001_110) as Valor_Titulo from optbft001 as F inner join optbdm060 as Tp on Tp.dm060_000 = F.dm099_000 inner join tctbdm023 as emp on f.dm023_000=emp.dm023_000 where Tp.dm060_001 in ('042','053','046') and   emp.dm023_001 in  (1) and   F.dm062_000 in  (1,2) and   F.dm012_000 in  (1,3) AND F.dm003_000 <> 6  )as [Risco Cedente],(select SUM(opft001_110) as Valor_Titulo from optbft001 as F inner join optbdm060 as Tp on Tp.dm060_000 = F.dm099_000 inner join tctbdm023 as emp on f.dm023_000=emp.dm023_000 where Tp.dm060_001 in ('040','041') and   emp.dm023_001 in  (1) and   F.dm062_000 in  (1,2) AND F.dm003_000 <> 6  and   F.dm012_000 in  (1,3) ) [Risco Sacado]";

;]]> </script> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>SQLLookupRule</component-name>
        <action-type>OLAP</action-type>
        <action-inputs> 
          <Ano type="string"/>  
          <Mes type="string"/>  
          <strQuery type="string"/> 
        </action-inputs>
        <action-resources> 
          <catalog mapping="catalog"/> 
        </action-resources>
        <action-outputs> 
          <query-results type="result-set" mapping="query_result"/> 
        </action-outputs>
        <component-definition> 
          <jndi><![CDATA[dw_wba_fi]]></jndi>  
          <catalog>Operacoes de Credito</catalog> 
          <query><![CDATA[{strQuery}]]></query> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>JavascriptRule</component-name>
        <action-type>JavaScript</action-type>
        <action-inputs> 
          <query_result type="result-set"/>  
          <callback type="string"/> 
        </action-inputs>
        <action-outputs> 
          <json type="string"/>  
          <rowCount type="integer"/> 
        </action-outputs>
        <component-definition> 
          <script><![CDATA[
QL = ''; 
DEBUG=false;

function formataJSON(v) {
        var s = null;
        if (v == null) {
            s = 'null';
        } else if (v instanceof java.lang.String) {
            s = '"' + v + '"';
        } else if (v instanceof java.util.Date) {
            s = /*"new Date(" +*/ v.getTime() /*+ ")"*/;
        } else if (v instanceof Array) {
            s = new java.lang.StringBuilder("[ ");
            for (var i=0; i<v.length; i++) {
                if (i>0) {
                    s.append(',');
                }
                s.append(formataJSON(v[i]));
            }
            s.append(" ]");
        } else {
            s = v.toString();
        }
        if (DEBUG) {
             s = s.toString() + " /* " + v.getClass().getName() + " */";
        }
        return s.toString();
}

var rowCount=query_result.getRowCount();
var colCount=query_result.getColumnCount();
var json=new java.lang.StringBuilder('{ "result" : {');

var columnHeaders = new Array();
columnHeaders[0] = '"metrica"';
for (var col=0; col<colCount; col++) {
	columnHeaders[col+1] = query_result.getMetaData().getColumnHeaders()[0][col];
}

json.append( 
    '"metadata": { ' +
        '"columns": ' + formataJSON(columnHeaders) + ', ' + QL +
        '"rows": ' + rowCount + ', ' + QL +
        '"cols": ' + (colCount+1) + QL +
    ' },' + QL);


json.append('"data" : [ ');
var rowData = null;
while (rowData = query_result.nextFlattened()) {
	json.append(QL).append(formataJSON(rowData));
	json.append(',');
}
json.deleteCharAt(json.length()-1); 

json.append(QL + '] ' + QL);

json.append('}' + QL + '}');

if (callback !== '' || callback === null) {
    json = callback + '(' + json.toString() + ')'
} else {
    json = json.toString();
}]]></script> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>TemplateComponent</component-name>
        <action-type>Message Template</action-type>
        <action-inputs> 
          <json type="string"/> 
        </action-inputs>
        <action-outputs> 
          <output-message type="string" mapping="out"/> 
        </action-outputs>
        <component-definition> 
          <template><![CDATA[{json}]]></template> 
        </component-definition> 
      </action-definition>
 
    </actions>
	
	<!-- **********************************Tipo de Risco - FIDC******** -->  
    <actions> 
      <condition><![CDATA[getData == "TipoRiscoFidc"]]></condition>  
      <action-definition> 
        <component-name>JavascriptRule</component-name>
        <action-type>JavaScript</action-type>
        <action-inputs> 
         
        </action-inputs>
        <action-outputs> 
          <strQuery type="string"/> 
        </action-outputs>
        <component-definition> 
          <script><![CDATA[
		
	
strQuery   =   " select ( select SUM(opft001_110) as Valor_Titulo from optbft001 as F inner join optbdm060 as Tp on Tp.dm060_000 = F.dm099_000 inner join tctbdm023 as emp on f.dm023_000 = emp.dm023_000 where Tp.dm060_001 in ('042','053','046') and   emp.dm023_001 in  (2) and   F.dm062_000 in  (1,2) and   F.dm012_000 in  (1,3) AND F.dm003_000 <> 6  )as [Risco Cedente],(select SUM(opft001_110) as Valor_Titulo from optbft001 as F inner join optbdm060 as Tp on Tp.dm060_000 = F.dm099_000 inner join tctbdm023 as emp on f.dm023_000 = emp.dm023_000 where Tp.dm060_001 in ('040','041') and   emp.dm023_001 in  (2) and   F.dm062_000 in  (1,2) AND F.dm003_000 <> 6  and   F.dm012_000 in  (1,3) ) [Risco Sacado]";

;]]> </script> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>SQLLookupRule</component-name>
        <action-type>OLAP</action-type>
        <action-inputs> 
          <Ano type="string"/>  
          <Mes type="string"/>  
          <strQuery type="string"/> 
        </action-inputs>
        <action-resources> 
          <catalog mapping="catalog"/> 
        </action-resources>
        <action-outputs> 
          <query-results type="result-set" mapping="query_result"/> 
        </action-outputs>
        <component-definition> 
          <jndi><![CDATA[dw_wba_fi]]></jndi>  
          <catalog>Operacoes de Credito</catalog> 
          <query><![CDATA[{strQuery}]]></query> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>JavascriptRule</component-name>
        <action-type>JavaScript</action-type>
        <action-inputs> 
          <query_result type="result-set"/>  
          <callback type="string"/> 
        </action-inputs>
        <action-outputs> 
          <json type="string"/>  
          <rowCount type="integer"/> 
        </action-outputs>
        <component-definition> 
          <script><![CDATA[
QL = ''; 
DEBUG=false;

function formataJSON(v) {
        var s = null;
        if (v == null) {
            s = 'null';
        } else if (v instanceof java.lang.String) {
            s = '"' + v + '"';
        } else if (v instanceof java.util.Date) {
            s = /*"new Date(" +*/ v.getTime() /*+ ")"*/;
        } else if (v instanceof Array) {
            s = new java.lang.StringBuilder("[ ");
            for (var i=0; i<v.length; i++) {
                if (i>0) {
                    s.append(',');
                }
                s.append(formataJSON(v[i]));
            }
            s.append(" ]");
        } else {
            s = v.toString();
        }
        if (DEBUG) {
             s = s.toString() + " /* " + v.getClass().getName() + " */";
        }
        return s.toString();
}

var rowCount=query_result.getRowCount();
var colCount=query_result.getColumnCount();
var json=new java.lang.StringBuilder('{ "result" : {');

var columnHeaders = new Array();
columnHeaders[0] = '"metrica"';
for (var col=0; col<colCount; col++) {
	columnHeaders[col+1] = query_result.getMetaData().getColumnHeaders()[0][col];
}

json.append( 
    '"metadata": { ' +
        '"columns": ' + formataJSON(columnHeaders) + ', ' + QL +
        '"rows": ' + rowCount + ', ' + QL +
        '"cols": ' + (colCount+1) + QL +
    ' },' + QL);


json.append('"data" : [ ');
var rowData = null;
while (rowData = query_result.nextFlattened()) {
	json.append(QL).append(formataJSON(rowData));
	json.append(',');
}
json.deleteCharAt(json.length()-1); 

json.append(QL + '] ' + QL);

json.append('}' + QL + '}');

if (callback !== '' || callback === null) {
    json = callback + '(' + json.toString() + ')'
} else {
    json = json.toString();
}]]></script> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>TemplateComponent</component-name>
        <action-type>Message Template</action-type>
        <action-inputs> 
          <json type="string"/> 
        </action-inputs>
        <action-outputs> 
          <output-message type="string" mapping="out"/> 
        </action-outputs>
        <component-definition> 
          <template><![CDATA[{json}]]></template> 
        </component-definition> 
      </action-definition>
 
    </actions>
	
	<!-- **********************************10 Maiores Cedentes******** -->  
    <actions> 
      <condition><![CDATA[getData == "10Maiores"]]></condition>  
      <action-definition> 
        <component-name>JavascriptRule</component-name>
        <action-type>JavaScript</action-type>
        <action-inputs> 
         
        </action-inputs>
        <action-outputs> 
          <strQuery type="string"/> 
        </action-outputs>
        <component-definition> 
          <script><![CDATA[
		
	
strQuery   =   " select Top 10 C.dm001_010 as Cedente,SUM(opft001_110) as Valor ,convert(numeric(18,2),( SUM(opft001_110) /(select  SUM(C.Valor) as Valor from(select  C.dm001_010 as Cedente,SUM(opft001_110) as Valor from optbft001 as F inner join optbdm060 as Tp on Tp.dm060_000 = F.dm099_000 inner join tctbdm001 as C  on C.dm001_000  = F.dm001_000 inner join tctbdm023 as emp on f.dm023_000 = emp.dm023_000 where Tp.dm060_001 in  ('053','046','041','040') and   emp.dm023_001 in  (1,2) and   F.dm062_000 in  (1,2) and   F.dm012_000 in  (1,3) and   F.dm003_000 <> 6 group by C.dm001_010 ) as C )*100 )) as PERCENTUAL from optbft001 as F inner join optbdm060 as Tp on Tp.dm060_000 = F.dm099_000 inner join tctbdm001 as C  on C.dm001_000  = F.dm001_000 inner join tctbdm023 as emp on f.dm023_000 = emp.dm023_000 where Tp.dm060_001 in  ('053','046','041','040') and   emp.dm023_001 in  (1,2) and   F.dm062_000 in  (1,2) and   F.dm012_000 in  (1,3) and   F.dm003_000 <> 6 group by C.dm001_010 order by 2 desc";

;]]> </script> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>SQLLookupRule</component-name>
        <action-type>OLAP</action-type>
        <action-inputs> 
          <Ano type="string"/>  
          <Mes type="string"/>  
          <strQuery type="string"/> 
        </action-inputs>
        <action-resources> 
          <catalog mapping="catalog"/> 
        </action-resources>
        <action-outputs> 
          <query-results type="result-set" mapping="query_result"/> 
        </action-outputs>
        <component-definition> 
          <jndi><![CDATA[dw_wba_fi]]></jndi>  
          <catalog>Operacoes de Credito</catalog> 
          <query><![CDATA[{strQuery}]]></query> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>JavascriptRule</component-name>
        <action-type>JavaScript</action-type>
        <action-inputs> 
          <query_result type="result-set"/>  
          <callback type="string"/> 
        </action-inputs>
        <action-outputs> 
          <json type="string"/>  
          <rowCount type="integer"/> 
        </action-outputs>
        <component-definition> 
          <script><![CDATA[
QL = ''; 
DEBUG=false;

function formataJSON(v) {
        var s = null;
        if (v == null) {
            s = 'null';
        } else if (v instanceof java.lang.String) {
            s = '"' + v + '"';
        } else if (v instanceof java.util.Date) {
            s = /*"new Date(" +*/ v.getTime() /*+ ")"*/;
        } else if (v instanceof Array) {
            s = new java.lang.StringBuilder("[ ");
            for (var i=0; i<v.length; i++) {
                if (i>0) {
                    s.append(',');
                }
                s.append(formataJSON(v[i]));
            }
            s.append(" ]");
        } else {
            s = v.toString();
        }
        if (DEBUG) {
             s = s.toString() + " /* " + v.getClass().getName() + " */";
        }
        return s.toString();
}

var rowCount=query_result.getRowCount();
var colCount=query_result.getColumnCount();
var json=new java.lang.StringBuilder('{ "result" : {');

var columnHeaders = new Array();
columnHeaders[0] = '"metrica"';
for (var col=0; col<colCount; col++) {
	columnHeaders[col+1] = query_result.getMetaData().getColumnHeaders()[0][col];
}

json.append( 
    '"metadata": { ' +
        '"columns": ' + formataJSON(columnHeaders) + ', ' + QL +
        '"rows": ' + rowCount + ', ' + QL +
        '"cols": ' + (colCount+1) + QL +
    ' },' + QL);


json.append('"data" : [ ');
var rowData = null;
while (rowData = query_result.nextFlattened()) {
	json.append(QL).append(formataJSON(rowData));
	json.append(',');
}
json.deleteCharAt(json.length()-1); 

json.append(QL + '] ' + QL);

json.append('}' + QL + '}');

if (callback !== '' || callback === null) {
    json = callback + '(' + json.toString() + ')'
} else {
    json = json.toString();
}]]></script> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>TemplateComponent</component-name>
        <action-type>Message Template</action-type>
        <action-inputs> 
          <json type="string"/> 
        </action-inputs>
        <action-outputs> 
          <output-message type="string" mapping="out"/> 
        </action-outputs>
        <component-definition> 
          <template><![CDATA[{json}]]></template> 
        </component-definition> 
      </action-definition>
 
    </actions>
	
	
	
	<!-- **********************************10 Maiores Cedentes factoring******** -->  
    <actions> 
      <condition><![CDATA[getData == "10MaioresFactoring"]]></condition>  
      <action-definition> 
        <component-name>JavascriptRule</component-name>
        <action-type>JavaScript</action-type>
        <action-inputs> 
         
        </action-inputs>
        <action-outputs> 
          <strQuery type="string"/> 
        </action-outputs>
        <component-definition> 
          <script><![CDATA[
		
	
strQuery   =   " select Top 10 C.dm001_010 as Cedente,SUM(opft001_110) as Valor ,convert(numeric(18,2),( SUM(opft001_110) /(select  SUM(C.Valor) as Valor from(select  C.dm001_010 as Cedente,SUM(opft001_110) as Valor from optbft001 as F inner join optbdm060 as Tp on Tp.dm060_000 = F.dm099_000 inner join tctbdm001 as C  on C.dm001_000  = F.dm001_000 inner join tctbdm023 as emp on f.dm023_000 = emp.dm023_000 where Tp.dm060_001 in  ('053','046','041','040') and   emp.dm023_001 in  (1) and   F.dm062_000 in  (1,2) and   F.dm012_000 in  (1,3) and   F.dm003_000 <> 6 group by C.dm001_010 ) as C )*100 )) as PERCENTUAL from optbft001 as F inner join optbdm060 as Tp on Tp.dm060_000 = F.dm099_000 inner join tctbdm001 as C  on C.dm001_000  = F.dm001_000 inner join tctbdm023 as emp on f.dm023_000 = emp.dm023_000 where Tp.dm060_001 in  ('053','046','041','040') and   emp.dm023_001 in  (1) and   F.dm062_000 in  (1,2) and   F.dm012_000 in  (1,3) and   F.dm003_000 <> 6  group by C.dm001_010 order by 2 desc";

;]]> </script> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>SQLLookupRule</component-name>
        <action-type>OLAP</action-type>
        <action-inputs> 
          <Ano type="string"/>  
          <Mes type="string"/>  
          <strQuery type="string"/> 
        </action-inputs>
        <action-resources> 
          <catalog mapping="catalog"/> 
        </action-resources>
        <action-outputs> 
          <query-results type="result-set" mapping="query_result"/> 
        </action-outputs>
        <component-definition> 
          <jndi><![CDATA[dw_wba_fi]]></jndi>  
          <catalog>Operacoes de Credito</catalog> 
          <query><![CDATA[{strQuery}]]></query> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>JavascriptRule</component-name>
        <action-type>JavaScript</action-type>
        <action-inputs> 
          <query_result type="result-set"/>  
          <callback type="string"/> 
        </action-inputs>
        <action-outputs> 
          <json type="string"/>  
          <rowCount type="integer"/> 
        </action-outputs>
        <component-definition> 
          <script><![CDATA[
QL = ''; 
DEBUG=false;

function formataJSON(v) {
        var s = null;
        if (v == null) {
            s = 'null';
        } else if (v instanceof java.lang.String) {
            s = '"' + v + '"';
        } else if (v instanceof java.util.Date) {
            s = /*"new Date(" +*/ v.getTime() /*+ ")"*/;
        } else if (v instanceof Array) {
            s = new java.lang.StringBuilder("[ ");
            for (var i=0; i<v.length; i++) {
                if (i>0) {
                    s.append(',');
                }
                s.append(formataJSON(v[i]));
            }
            s.append(" ]");
        } else {
            s = v.toString();
        }
        if (DEBUG) {
             s = s.toString() + " /* " + v.getClass().getName() + " */";
        }
        return s.toString();
}

var rowCount=query_result.getRowCount();
var colCount=query_result.getColumnCount();
var json=new java.lang.StringBuilder('{ "result" : {');

var columnHeaders = new Array();
columnHeaders[0] = '"metrica"';
for (var col=0; col<colCount; col++) {
	columnHeaders[col+1] = query_result.getMetaData().getColumnHeaders()[0][col];
}

json.append( 
    '"metadata": { ' +
        '"columns": ' + formataJSON(columnHeaders) + ', ' + QL +
        '"rows": ' + rowCount + ', ' + QL +
        '"cols": ' + (colCount+1) + QL +
    ' },' + QL);


json.append('"data" : [ ');
var rowData = null;
while (rowData = query_result.nextFlattened()) {
	json.append(QL).append(formataJSON(rowData));
	json.append(',');
}
json.deleteCharAt(json.length()-1); 

json.append(QL + '] ' + QL);

json.append('}' + QL + '}');

if (callback !== '' || callback === null) {
    json = callback + '(' + json.toString() + ')'
} else {
    json = json.toString();
}]]></script> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>TemplateComponent</component-name>
        <action-type>Message Template</action-type>
        <action-inputs> 
          <json type="string"/> 
        </action-inputs>
        <action-outputs> 
          <output-message type="string" mapping="out"/> 
        </action-outputs>
        <component-definition> 
          <template><![CDATA[{json}]]></template> 
        </component-definition> 
      </action-definition>
 
    </actions>
	
	
	<!-- **********************************10 Maiores Cedentes - FIDC******** -->  
    <actions> 
      <condition><![CDATA[getData == "10MaioresFidc"]]></condition>  
      <action-definition> 
        <component-name>JavascriptRule</component-name>
        <action-type>JavaScript</action-type>
        <action-inputs> 
         
        </action-inputs>
        <action-outputs> 
          <strQuery type="string"/> 
        </action-outputs>
        <component-definition> 
          <script><![CDATA[
		
	
strQuery   =   " select Top 10 C.dm001_010 as Cedente,SUM(opft001_110) as Valor ,convert(numeric(18,2),( SUM(opft001_110) /(select  SUM(C.Valor) as Valor from(select  C.dm001_010 as Cedente,SUM(opft001_110) as Valor from optbft001 as F inner join optbdm060 as Tp on Tp.dm060_000 = F.dm099_000 inner join tctbdm001 as C  on C.dm001_000  = F.dm001_000 inner join tctbdm023 as emp on f.dm023_000 = emp.dm023_000 where Tp.dm060_001 in  ('053','046','041','040') and  emp.dm023_001 in  (2) and   F.dm062_000 in  (1,2) and   F.dm012_000 in  (1,3) and   F.dm003_000 <> 6 group by C.dm001_010 ) as C )*100 )) as PERCENTUAL from optbft001 as F inner join optbdm060 as Tp on Tp.dm060_000 = F.dm099_000 inner join tctbdm001 as C  on C.dm001_000  = F.dm001_000 inner join tctbdm023 as emp on f.dm023_000 = emp.dm023_000 where Tp.dm060_001 in  ('053','046','041','040') and   emp.dm023_001 in  (2) and   F.dm062_000 in  (1,2) and   F.dm012_000 in  (1,3) and   F.dm003_000 <> 6 group by C.dm001_010 order by 2 desc";

;]]> </script> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>SQLLookupRule</component-name>
        <action-type>OLAP</action-type>
        <action-inputs> 
          <Ano type="string"/>  
          <Mes type="string"/>  
          <strQuery type="string"/> 
        </action-inputs>
        <action-resources> 
          <catalog mapping="catalog"/> 
        </action-resources>
        <action-outputs> 
          <query-results type="result-set" mapping="query_result"/> 
        </action-outputs>
        <component-definition> 
          <jndi><![CDATA[dw_wba_fi]]></jndi>  
          <catalog>Operacoes de Credito</catalog> 
          <query><![CDATA[{strQuery}]]></query> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>JavascriptRule</component-name>
        <action-type>JavaScript</action-type>
        <action-inputs> 
          <query_result type="result-set"/>  
          <callback type="string"/> 
        </action-inputs>
        <action-outputs> 
          <json type="string"/>  
          <rowCount type="integer"/> 
        </action-outputs>
        <component-definition> 
          <script><![CDATA[
QL = ''; 
DEBUG=false;

function formataJSON(v) {
        var s = null;
        if (v == null) {
            s = 'null';
        } else if (v instanceof java.lang.String) {
            s = '"' + v + '"';
        } else if (v instanceof java.util.Date) {
            s = /*"new Date(" +*/ v.getTime() /*+ ")"*/;
        } else if (v instanceof Array) {
            s = new java.lang.StringBuilder("[ ");
            for (var i=0; i<v.length; i++) {
                if (i>0) {
                    s.append(',');
                }
                s.append(formataJSON(v[i]));
            }
            s.append(" ]");
        } else {
            s = v.toString();
        }
        if (DEBUG) {
             s = s.toString() + " /* " + v.getClass().getName() + " */";
        }
        return s.toString();
}

var rowCount=query_result.getRowCount();
var colCount=query_result.getColumnCount();
var json=new java.lang.StringBuilder('{ "result" : {');

var columnHeaders = new Array();
columnHeaders[0] = '"metrica"';
for (var col=0; col<colCount; col++) {
	columnHeaders[col+1] = query_result.getMetaData().getColumnHeaders()[0][col];
}

json.append( 
    '"metadata": { ' +
        '"columns": ' + formataJSON(columnHeaders) + ', ' + QL +
        '"rows": ' + rowCount + ', ' + QL +
        '"cols": ' + (colCount+1) + QL +
    ' },' + QL);


json.append('"data" : [ ');
var rowData = null;
while (rowData = query_result.nextFlattened()) {
	json.append(QL).append(formataJSON(rowData));
	json.append(',');
}
json.deleteCharAt(json.length()-1); 

json.append(QL + '] ' + QL);

json.append('}' + QL + '}');

if (callback !== '' || callback === null) {
    json = callback + '(' + json.toString() + ')'
} else {
    json = json.toString();
}]]></script> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>TemplateComponent</component-name>
        <action-type>Message Template</action-type>
        <action-inputs> 
          <json type="string"/> 
        </action-inputs>
        <action-outputs> 
          <output-message type="string" mapping="out"/> 
        </action-outputs>
        <component-definition> 
          <template><![CDATA[{json}]]></template> 
        </component-definition> 
      </action-definition>
 
    </actions>
	
	<!-- *******************************lista de Empresa******* -->  
    <actions> 
      <condition><![CDATA[getData == "empresas"]]></condition>  
      <action-definition> 
        <component-name>JavascriptRule</component-name>
        <action-type>JavaScript</action-type>
        <action-inputs> 
         
        </action-inputs>
        <action-outputs> 
          <strQuery type="string"/> 
        </action-outputs>
        <component-definition> 
          <script><![CDATA[
		
		strQuery   =   "select C.dm023_001 , C.dm023_010 from tctbdm023 as C";

;]]> </script> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>SQLLookupRule</component-name>
        <action-type>OLAP</action-type>
        <action-inputs> 
          <Ano type="string"/>  
          <Mes type="string"/>  
          <strQuery type="string"/> 
        </action-inputs>
        <action-resources> 
          <catalog mapping="catalogoComercial"/> 
        </action-resources>
        <action-outputs> 
          <query-results type="result-set" mapping="query_result"/> 
        </action-outputs>
        <component-definition> 
          <jndi>dw_wba_fi_comercial</jndi>  
          <catalog>WBA-FI Comercial</catalog>
          <query><![CDATA[{strQuery}]]></query>
		  <location>mondrian</location>	
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>JavascriptRule</component-name>
        <action-type>JavaScript</action-type>
        <action-inputs> 
          <query_result type="result-set"/>  
          <callback type="string"/> 
        </action-inputs>
        <action-outputs> 
          <json type="string"/>  
          <rowCount type="integer"/> 
        </action-outputs>
        <component-definition> 
          <script><![CDATA[
QL = ''; 
DEBUG=false;

function formataJSON(v) {
        var s = null;
        if (v == null) {
            s = 'null';
        } else if (v instanceof java.lang.String) {
            s = '"' + v + '"';
        } else if (v instanceof java.util.Date) {
            s = /*"new Date(" +*/ v.getTime() /*+ ")"*/;
        } else if (v instanceof Array) {
            s = new java.lang.StringBuilder("[ ");
            for (var i=0; i<v.length; i++) {
                if (i>0) {
                    s.append(',');
                }
                s.append(formataJSON(v[i]));
            }
            s.append(" ]");
        } else {
            s = v.toString();
        }
        if (DEBUG) {
             s = s.toString() + " /* " + v.getClass().getName() + " */";
        }
        return s.toString();
}

var rowCount=query_result.getRowCount();
var colCount=query_result.getColumnCount();
var json=new java.lang.StringBuilder('{ "result" : {');

var columnHeaders = new Array();
columnHeaders[0] = '"metrica"';
for (var col=0; col<colCount; col++) {
	columnHeaders[col+1] = query_result.getMetaData().getColumnHeaders()[0][col];
}

json.append( 
    '"metadata": { ' +
        '"columns": ' + formataJSON(columnHeaders) + ', ' + QL +
        '"rows": ' + rowCount + ', ' + QL +
        '"cols": ' + (colCount+1) + QL +
    ' },' + QL);


json.append('"data" : [ ');
var rowData = null;
while (rowData = query_result.nextFlattened()) {
	json.append(QL).append(formataJSON(rowData));
	json.append(',');
}
json.deleteCharAt(json.length()-1); 

json.append(QL + '] ' + QL);

json.append('}' + QL + '}');

if (callback !== '' || callback === null) {
    json = callback + '(' + json.toString() + ')'
} else {
    json = json.toString();
}]]></script> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>TemplateComponent</component-name>
        <action-type>Message Template</action-type>
        <action-inputs> 
          <json type="string"/> 
        </action-inputs>
        <action-outputs> 
          <output-message type="string" mapping="out"/> 
        </action-outputs>
        <component-definition> 
          <template><![CDATA[{json}]]></template> 
        </component-definition> 
     </action-definition>
    </actions>
	

	
	
 	<!-- *******************************Cedentes por Empresa******* -->  
    
    <actions> 
      <condition><![CDATA[getData == "empresasCedente"]]></condition>  
      <action-definition> 
        <component-name>JavascriptRule</component-name>
        <action-type>JavaScript</action-type>
        <action-inputs> 
         <Empresa type="string"/> 
        </action-inputs>
        <action-outputs> 
          <strQuery type="string"/> 
        </action-outputs>
        <component-definition> 
          <script><![CDATA[
		
		strQuery   =   "select  Cedente.dm001_001 , Cedente.dm001_010 from optbft001 as F inner join tctbdm023 as empresa on empresa.dm023_000 = F.dm023_000 inner join tctbdm001 as Cedente on Cedente.dm001_000 = F.dm001_000 where empresa.dm023_001 in ({Empresa}) and Cedente.dm001_001 not in (-1,-2)  group by Cedente.dm001_001 , Cedente.dm001_010 order by 2";

;]]> </script> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>SQLLookupRule</component-name>
        <action-type>OLAP</action-type>
        <action-inputs> 
           <Empresa type="string"/> 
          <strQuery type="string"/> 
        </action-inputs>
        <action-resources> 
          <catalog mapping="catalogoComercial"/> 
        </action-resources>
        <action-outputs> 
          <query-results type="result-set" mapping="query_result"/> 
        </action-outputs>
        <component-definition> 
          <jndi><![CDATA[dw_wba_fi]]></jndi>  
          <catalog>Operacoes de Credito</catalog> 
          <query><![CDATA[{strQuery}]]></query> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>JavascriptRule</component-name>
        <action-type>JavaScript</action-type>
        <action-inputs> 
          <query_result type="result-set"/>  
          <callback type="string"/> 
		  <Empresa type="string"/> 
        </action-inputs>
        <action-outputs> 
          <json type="string"/>  
          <rowCount type="integer"/> 
        </action-outputs>
        <component-definition> 
          <script><![CDATA[
QL = ''; 
DEBUG=false;

function formataJSON(v) {
        var s = null;
        if (v == null) {
            s = 'null';
        } else if (v instanceof java.lang.String) {
            s = '"' + v + '"';
        } else if (v instanceof java.util.Date) {
            s = /*"new Date(" +*/ v.getTime() /*+ ")"*/;
        } else if (v instanceof Array) {
            s = new java.lang.StringBuilder("[ ");
            for (var i=0; i<v.length; i++) {
                if (i>0) {
                    s.append(',');
                }
                s.append(formataJSON(v[i]));
            }
            s.append(" ]");
        } else {
            s = v.toString();
        }
        if (DEBUG) {
             s = s.toString() + " /* " + v.getClass().getName() + " */";
        }
        return s.toString();
}

var rowCount=query_result.getRowCount();
var colCount=query_result.getColumnCount();
var json=new java.lang.StringBuilder('{ "result" : {');

var columnHeaders = new Array();
columnHeaders[0] = '"metrica"';
for (var col=0; col<colCount; col++) {
	columnHeaders[col+1] = query_result.getMetaData().getColumnHeaders()[0][col];
}

json.append( 
    '"metadata": { ' +
        '"columns": ' + formataJSON(columnHeaders) + ', ' + QL +
        '"rows": ' + rowCount + ', ' + QL +
        '"cols": ' + (colCount+1) + QL +
    ' },' + QL);


json.append('"data" : [ ');
var rowData = null;
while (rowData = query_result.nextFlattened()) {
	json.append(QL).append(formataJSON(rowData));
	json.append(',');
}
json.deleteCharAt(json.length()-1); 

json.append(QL + '] ' + QL);

json.append('}' + QL + '}');

if (callback !== '' || callback === null) {
    json = callback + '(' + json.toString() + ')'
} else {
    json = json.toString();
}]]></script> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>TemplateComponent</component-name>
        <action-type>Message Template</action-type>
        <action-inputs> 
          <json type="string"/> 
        </action-inputs>
        <action-outputs> 
          <output-message type="string" mapping="out"/> 
        </action-outputs>
        <component-definition> 
          <template><![CDATA[{json}]]></template> 
        </component-definition> 
     </action-definition>
    </actions>
	
	
	
	
	<!-- **********************************Tipo de Produto - Consolidado******** -->  
    <actions> 
      <condition><![CDATA[getData == "TipoProdutoCedenteEmpresa"]]></condition>  
      <action-definition> 
        <component-name>JavascriptRule</component-name>
        <action-type>JavaScript</action-type>
        <action-inputs> 
          <Empresa type="string"/>  
          <Cedente type="string"/> 
  	      <query_result_Empresa type="result-set"/>
        </action-inputs>
        <action-outputs> 
          <strQuery type="string"/> 
        </action-outputs>
        <component-definition> 
          <script><![CDATA[
		
var hoje_ = new Date();
var ano_  = hoje_.getFullYear();
var Mes_  = hoje_.getMonth();
Mes_ =  Mes_+1;
ano_ = ano_- 1;



var Mes_2="";
if (Mes_.toString().length == 1) {
	Mes_2 = "0"+Mes_.toString();
}else
{
    Mes_2 = Mes_;
}
		
var data    = "01/";     	
    data   += Mes_2.toString()+"/";
	data   += ano_.toString();


var dataFim    = "01/";     	
    dataFim   += Mes_2.toString()+"/";
	dataFim   += (ano_+1).toString();


	
strQuery   =   "select case when Tp.dm060_001 = '040' then 'Duplicata' when Tp.dm060_001 = '041' then 'Cheque'  when Tp.dm060_001 = '042' then 'Acordo'     when Tp.dm060_001 = '046' then 'Comissaria'   when Tp.dm060_001 = '053' then 'Fomento' end as Tipo_Produto ,SUM(opft001_110) as Valor_Titulo  from optbft001 as F      inner join optbdm060 as Tp on Tp.dm060_000 = F.dm099_000 inner join tctbdm001 as C  on C.dm001_000  = F.dm001_000 inner join tctbdm028 as T on T.dm028_000 = F.sk_data_dgto inner join tctbdm023 as emp on f.dm023_000 = emp.dm023_000 where Tp.dm060_001 in ('042','053','046','041','040')  and   emp.dm023_001 in  ({Empresa}) and   T.dm028_090 = Year(Getdate()) and   C.dm001_001 = {Cedente} and   F.dm012_000 in  (1,3) group by Tp.dm060_001, Tp.dm060_010";



if ({Cedente} == "0"){	

strQuery   =   "select case when Tp.dm060_001 = '040' then 'Duplicata' when Tp.dm060_001 = '041' then 'Cheque'  when Tp.dm060_001 = '042' then 'Acordo'     when Tp.dm060_001 = '046' then 'Comissaria'   when Tp.dm060_001 = '053' then 'Fomento' end as Tipo_Produto ,SUM(opft001_110) as Valor_Titulo  from optbft001 as F      inner join optbdm060 as Tp on Tp.dm060_000 = F.dm099_000 inner join tctbdm001 as C  on C.dm001_000  = F.dm001_000 inner join tctbdm028 as T on T.dm028_000 = F.sk_data_dgto inner join tctbdm023 as emp on f.dm023_000 = emp.dm023_000 where Tp.dm060_001 in ('042','053','046','041','040')  and   emp.dm023_001 in  ({Empresa}) and   T.dm028_090 = Year(Getdate()) and      F.dm012_000 in  (1,3) group by Tp.dm060_001, Tp.dm060_010";

}

;]]> </script> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>SQLLookupRule</component-name>
        <action-type>OLAP</action-type>
        <action-inputs> 
		  <Empresa type="string"/>  
		  <Cedente type="string"/>         
		  <strQuery type="string"/> 
		</action-inputs>
        <action-resources> 
          <catalog mapping="catalog"/> 
        </action-resources>
        <action-outputs> 
          <query-results type="result-set" mapping="query_result"/> 
        </action-outputs>
        <component-definition> 
          <jndi><![CDATA[dw_wba_fi]]></jndi>  
          <catalog>Operacoes de Credito</catalog> 
          <query><![CDATA[{strQuery}]]></query> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>JavascriptRule</component-name>
        <action-type>JavaScript</action-type>
        <action-inputs> 
          <query_result type="result-set"/>  
          <callback type="string"/> 
        </action-inputs>
        <action-outputs> 
          <json type="string"/>  
          <rowCount type="integer"/> 
        </action-outputs>
        <component-definition> 
          <script><![CDATA[
QL = ''; 
DEBUG=false;

function formataJSON(v) {
        var s = null;
        if (v == null) {
            s = 'null';
        } else if (v instanceof java.lang.String) {
            s = '"' + v + '"';
        } else if (v instanceof java.util.Date) {
            s = /*"new Date(" +*/ v.getTime() /*+ ")"*/;
        } else if (v instanceof Array) {
            s = new java.lang.StringBuilder("[ ");
            for (var i=0; i<v.length; i++) {
                if (i>0) {
                    s.append(',');
                }
                s.append(formataJSON(v[i]));
            }
            s.append(" ]");
        } else {
            s = v.toString();
        }
        if (DEBUG) {
             s = s.toString() + " /* " + v.getClass().getName() + " */";
        }
        return s.toString();
}

var rowCount=query_result.getRowCount();
var colCount=query_result.getColumnCount();
var json=new java.lang.StringBuilder('{ "result" : {');

var columnHeaders = new Array();
columnHeaders[0] = '"metrica"';
for (var col=0; col<colCount; col++) {
	columnHeaders[col+1] = query_result.getMetaData().getColumnHeaders()[0][col];
}

json.append( 
    '"metadata": { ' +
        '"columns": ' + formataJSON(columnHeaders) + ', ' + QL +
        '"rows": ' + rowCount + ', ' + QL +
        '"cols": ' + (colCount+1) + QL +
    ' },' + QL);


json.append('"data" : [ ');
var rowData = null;
while (rowData = query_result.nextFlattened()) {
	json.append(QL).append(formataJSON(rowData));
	json.append(',');
}
json.deleteCharAt(json.length()-1); 

json.append(QL + '] ' + QL);

json.append('}' + QL + '}');

if (callback !== '' || callback === null) {
    json = callback + '(' + json.toString() + ')'
} else {
    json = json.toString();
}]]></script> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>TemplateComponent</component-name>
        <action-type>Message Template</action-type>
        <action-inputs> 
          <json type="string"/> 
        </action-inputs>
        <action-outputs> 
          <output-message type="string" mapping="out"/> 
        </action-outputs>
        <component-definition> 
          <template><![CDATA[{json}]]></template> 
        </component-definition> 
      </action-definition>
 
    </actions>
	
	
	
	<!-- **********************************VOP - cedente/empresa******** -->  
    <actions> 
      <condition><![CDATA[getData == "VopCedenteEmpresa"]]></condition>  
      <action-definition> 
        <component-name>JavascriptRule</component-name>
        <action-type>JavaScript</action-type>
        <action-inputs> 
          <Empresa type="string"/>  
          <Cedente type="string"/> 
  	      <query_result_Empresa type="result-set"/>
        </action-inputs>
        <action-outputs> 
          <strQuery type="string"/> 
        </action-outputs>
        <component-definition> 
          <script><![CDATA[
		
	
strQuery   =   "select convert(varchar(max),tempo.dm100_001,103) as Data      ,SUM(F.cmft001_011)   as ValorOperacao      ,AVG(F.cmft001_027)			   as Fator      ,AVG(F.cmft001_032) 			   as val      ,SUM(F.cmft001_023)   as tarifa from cmtbft001 as F inner join tctbdm100 as tempo  on tempo.dm100_000   = F.dm100_000 inner join tctbdm001 as Cedente on Cedente.dm001_000 = F.dm001_000 inner join tctbdm023 as Empresa on Empresa.dm023_000 = F.dm023_000 where Cedente.dm001_001 = {Cedente} and   Empresa.dm023_001 in ({Empresa}) and F.dm012_000 in (1,-1) and  YEAR(tempo.dm100_001) = YEAR(getDate()) group by tempo.dm100_001 order by tempo.dm100_001";



if ({Cedente} == "0"){	

strQuery   =   "select convert(varchar(max),tempo.dm100_001,103) as Data      ,SUM(F.cmft001_011)   as ValorOperacao      ,AVG(F.cmft001_027)			   as Fator      ,AVG(F.cmft001_032) 			   as val      ,SUM(F.cmft001_023)   as tarifa from cmtbft001 as F inner join tctbdm100 as tempo  on tempo.dm100_000   = F.dm100_000 inner join tctbdm001 as Cedente on Cedente.dm001_000 = F.dm001_000 inner join tctbdm023 as Empresa on Empresa.dm023_000 = F.dm023_000 where Empresa.dm023_001 in ({Empresa}) and F.dm012_000 in (1,-1) and  YEAR(tempo.dm100_001) = YEAR(getDate()) group by tempo.dm100_001 order by tempo.dm100_001";

}



;]]> </script> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>SQLLookupRule</component-name>
        <action-type>OLAP</action-type>
        <action-inputs> 
		  <Empresa type="string"/>  
		  <Cedente type="string"/>         
		  <strQuery type="string"/> 
		</action-inputs>
        <action-resources> 
          <catalog mapping="catalogoComercial"/> 
        </action-resources>
        <action-outputs> 
          <query-results type="result-set" mapping="query_result"/> 
        </action-outputs>
        <component-definition> 
          <jndi>dw_wba_fi_comercial</jndi>  
          <catalog>WBA-FI Comercial</catalog>
          <query><![CDATA[{strQuery}]]></query>
		  <location>mondrian</location>
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>JavascriptRule</component-name>
        <action-type>JavaScript</action-type>
        <action-inputs> 
          <query_result type="result-set"/>  
          <callback type="string"/> 
        </action-inputs>
        <action-outputs> 
          <json type="string"/>  
          <rowCount type="integer"/> 
        </action-outputs>
        <component-definition> 
          <script><![CDATA[
QL = ''; 
DEBUG=false;

function formataJSON(v) {
        var s = null;
        if (v == null) {
            s = 'null';
        } else if (v instanceof java.lang.String) {
            s = '"' + v + '"';
        } else if (v instanceof java.util.Date) {
            s = /*"new Date(" +*/ v.getTime() /*+ ")"*/;
        } else if (v instanceof Array) {
            s = new java.lang.StringBuilder("[ ");
            for (var i=0; i<v.length; i++) {
                if (i>0) {
                    s.append(',');
                }
                s.append(formataJSON(v[i]));
            }
            s.append(" ]");
        } else {
            s = v.toString();
        }
        if (DEBUG) {
             s = s.toString() + " /* " + v.getClass().getName() + " */";
        }
        return s.toString();
}

var rowCount=query_result.getRowCount();
var colCount=query_result.getColumnCount();
var json=new java.lang.StringBuilder('{ "result" : {');

var columnHeaders = new Array();
columnHeaders[0] = '"metrica"';
for (var col=0; col<colCount; col++) {
	columnHeaders[col+1] = query_result.getMetaData().getColumnHeaders()[0][col];
}

json.append( 
    '"metadata": { ' +
        '"columns": ' + formataJSON(columnHeaders) + ', ' + QL +
        '"rows": ' + rowCount + ', ' + QL +
        '"cols": ' + (colCount+1) + QL +
    ' },' + QL);


json.append('"data" : [ ');
var rowData = null;
while (rowData = query_result.nextFlattened()) {
	json.append(QL).append(formataJSON(rowData));
	json.append(',');
}
json.deleteCharAt(json.length()-1); 

json.append(QL + '] ' + QL);

json.append('}' + QL + '}');

if (callback !== '' || callback === null) {
    json = callback + '(' + json.toString() + ')'
} else {
    json = json.toString();
}]]></script> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>TemplateComponent</component-name>
        <action-type>Message Template</action-type>
        <action-inputs> 
          <json type="string"/> 
        </action-inputs>
        <action-outputs> 
          <output-message type="string" mapping="out"/> 
        </action-outputs>
        <component-definition> 
          <template><![CDATA[{json}]]></template> 
        </component-definition> 
      </action-definition>
 
    </actions>
	
	
	
	<!-- **********************************VOP - cedente/empresa******** -->  
    <actions> 
      <condition><![CDATA[getData == "VopCedenteEmpresaDESC"]]></condition>  
      <action-definition> 
        <component-name>JavascriptRule</component-name>
        <action-type>JavaScript</action-type>
        <action-inputs> 
          <Empresa type="string"/>  
          <Cedente type="string"/> 
  	      <query_result_Empresa type="result-set"/>
        </action-inputs>
        <action-outputs> 
          <strQuery type="string"/> 
        </action-outputs>
        <component-definition> 
          <script><![CDATA[
		
	
strQuery   =   "SELECT convert(varchar(MAX),tempo.dm100_001,103) AS DATA ,        SUM(F.cmft001_011) AS ValorOperacao ,        SUM(F.cmft001_027) AS Fator ,        Sum(F.cmft001_032) AS val ,        SUM((isnull(F.cmft001_023,0) + isnull(F.cmft001_047,0) + isnull(F.cmft001_048,0))) AS tarifa FROM cmtbft001 AS F INNER JOIN tctbdm100 AS tempo ON tempo.dm100_000 = F.dm100_000 INNER JOIN tctbdm001 AS Cedente ON Cedente.dm001_000 = F.dm001_000 INNER JOIN tctbdm023 AS Empresa ON Empresa.dm023_000 = F.dm023_000 WHERE Empresa.dm023_001 IN ({Empresa})   AND F.dm012_000 IN (1,-1)   AND Cedente.dm001_001 = {Cedente}   AND YEAR(tempo.dm100_001) = YEAR(getDate()) GROUP BY tempo.dm100_001 ORDER BY tempo.dm100_001 DESC ";


if ({Cedente} == "0")
{

strQuery   =   " SELECT convert(varchar(MAX),tempo.dm100_001,103) AS DATA ,        SUM(F.cmft001_011) AS ValorOperacao ,        SUM(F.cmft001_027) AS Fator ,        Sum(F.cmft001_032) AS val ,        SUM((isnull(F.cmft001_023,0) + isnull(F.cmft001_047,0) + isnull(F.cmft001_048,0))) AS tarifa FROM cmtbft001 AS F INNER JOIN tctbdm100 AS tempo ON tempo.dm100_000 = F.dm100_000 INNER JOIN tctbdm001 AS Cedente ON Cedente.dm001_000 = F.dm001_000 INNER JOIN tctbdm023 AS Empresa ON Empresa.dm023_000 = F.dm023_000 WHERE Empresa.dm023_001 IN ({Empresa})   AND F.dm012_000 IN (1,                       -1)   AND YEAR(tempo.dm100_001) = YEAR(getDate()) GROUP BY tempo.dm100_001 ORDER BY tempo.dm100_001 DESC ";


}


;]]> </script> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>SQLLookupRule</component-name>
        <action-type>OLAP</action-type>
        <action-inputs> 
		  <Empresa type="string"/>  
		  <Cedente type="string"/>         
		  <strQuery type="string"/> 
		</action-inputs>
        <action-resources> 
          <catalog mapping="catalogoComercial"/> 
        </action-resources>
        <action-outputs> 
          <query-results type="result-set" mapping="query_result"/> 
        </action-outputs>
        <component-definition> 
          <jndi>dw_wba_fi_comercial</jndi>  
          <catalog>WBA-FI Comercial</catalog>
          <query><![CDATA[{strQuery}]]></query>
		  <location>mondrian</location> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>JavascriptRule</component-name>
        <action-type>JavaScript</action-type>
        <action-inputs> 
          <query_result type="result-set"/>  
          <callback type="string"/> 
        </action-inputs>
        <action-outputs> 
          <json type="string"/>  
          <rowCount type="integer"/> 
        </action-outputs>
        <component-definition> 
          <script><![CDATA[
QL = ''; 
DEBUG=false;

function formataJSON(v) {
        var s = null;
        if (v == null) {
            s = 'null';
        } else if (v instanceof java.lang.String) {
            s = '"' + v + '"';
        } else if (v instanceof java.util.Date) {
            s = /*"new Date(" +*/ v.getTime() /*+ ")"*/;
        } else if (v instanceof Array) {
            s = new java.lang.StringBuilder("[ ");
            for (var i=0; i<v.length; i++) {
                if (i>0) {
                    s.append(',');
                }
                s.append(formataJSON(v[i]));
            }
            s.append(" ]");
        } else {
            s = v.toString();
        }
        if (DEBUG) {
             s = s.toString() + " /* " + v.getClass().getName() + " */";
        }
        return s.toString();
}

var rowCount=query_result.getRowCount();
var colCount=query_result.getColumnCount();
var json=new java.lang.StringBuilder('{ "result" : {');

var columnHeaders = new Array();
columnHeaders[0] = '"metrica"';
for (var col=0; col<colCount; col++) {
	columnHeaders[col+1] = query_result.getMetaData().getColumnHeaders()[0][col];
}

json.append( 
    '"metadata": { ' +
        '"columns": ' + formataJSON(columnHeaders) + ', ' + QL +
        '"rows": ' + rowCount + ', ' + QL +
        '"cols": ' + (colCount+1) + QL +
    ' },' + QL);


json.append('"data" : [ ');
var rowData = null;
while (rowData = query_result.nextFlattened()) {
	json.append(QL).append(formataJSON(rowData));
	json.append(',');
}
json.deleteCharAt(json.length()-1); 

json.append(QL + '] ' + QL);

json.append('}' + QL + '}');

if (callback !== '' || callback === null) {
    json = callback + '(' + json.toString() + ')'
} else {
    json = json.toString();
}]]></script> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>TemplateComponent</component-name>
        <action-type>Message Template</action-type>
        <action-inputs> 
          <json type="string"/> 
        </action-inputs>
        <action-outputs> 
          <output-message type="string" mapping="out"/> 
        </action-outputs>
        <component-definition> 
          <template><![CDATA[{json}]]></template> 
        </component-definition> 
      </action-definition>
 
    </actions>
	
	
	
	
	
		<!-- **********************************Tipo de Cobranca******** -->  
    <actions> 
      <condition><![CDATA[getData == "TipoDeCobranca"]]></condition>  
      <action-definition> 
        <component-name>JavascriptRule</component-name>
        <action-type>JavaScript</action-type>
        <action-inputs> 
          <Empresa type="string"/>  
          <Cedente type="string"/> 
  	      <query_result_Empresa type="result-set"/>
        </action-inputs>
        <action-outputs> 
          <strQuery type="string"/> 
        </action-outputs>
        <component-definition> 
          <script><![CDATA[
		

		
strQuery   =   "select case when Tp.dm060_001 = '040' then 'Duplicata' when Tp.dm060_001 = '041' then 'Cheque'  when Tp.dm060_001 = '042' then 'Acordo'     when Tp.dm060_001 = '046' then 'Comissaria'   when Tp.dm060_001 = '053' then 'Fomento' end as Tipo_Produto ,SUM(opft001_110) as Valor_Titulo  from optbft001 as F      inner join optbdm060 as Tp on Tp.dm060_000 = F.dm099_000 inner join tctbdm001 as C  on C.dm001_000  = F.dm001_000 inner join tctbdm023 as emp on f.dm023_000 = emp.dm023_000 where Tp.dm060_001 in ('042','053','046','041','040')  and   emp.dm023_001 in  ({Empresa}) and   F.dm062_000 in  (1,2) and   C.dm001_001 = {Cedente} and   F.dm012_000 in  (1,3) group by Tp.dm060_001, Tp.dm060_010";

;]]> </script> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>SQLLookupRule</component-name>
        <action-type>OLAP</action-type>
        <action-inputs> 
		  <Empresa type="string"/>  
		  <Cedente type="string"/>         
		  <strQuery type="string"/> 
		</action-inputs>
        <action-resources> 
          <catalog mapping="catalog"/> 
        </action-resources>
        <action-outputs> 
          <query-results type="result-set" mapping="query_result"/> 
        </action-outputs>
        <component-definition> 
          <jndi><![CDATA[dw_wba_fi]]></jndi>  
          <catalog>Operacoes de Credito</catalog> 
          <query><![CDATA[{strQuery}]]></query> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>JavascriptRule</component-name>
        <action-type>JavaScript</action-type>
        <action-inputs> 
          <query_result type="result-set"/>  
          <callback type="string"/> 
        </action-inputs>
        <action-outputs> 
          <json type="string"/>  
          <rowCount type="integer"/> 
        </action-outputs>
        <component-definition> 
          <script><![CDATA[
QL = ''; 
DEBUG=false;

function formataJSON(v) {
        var s = null;
        if (v == null) {
            s = 'null';
        } else if (v instanceof java.lang.String) {
            s = '"' + v + '"';
        } else if (v instanceof java.util.Date) {
            s = /*"new Date(" +*/ v.getTime() /*+ ")"*/;
        } else if (v instanceof Array) {
            s = new java.lang.StringBuilder("[ ");
            for (var i=0; i<v.length; i++) {
                if (i>0) {
                    s.append(',');
                }
                s.append(formataJSON(v[i]));
            }
            s.append(" ]");
        } else {
            s = v.toString();
        }
        if (DEBUG) {
             s = s.toString() + " /* " + v.getClass().getName() + " */";
        }
        return s.toString();
}

var rowCount=query_result.getRowCount();
var colCount=query_result.getColumnCount();
var json=new java.lang.StringBuilder('{ "result" : {');

var columnHeaders = new Array();
columnHeaders[0] = '"metrica"';
for (var col=0; col<colCount; col++) {
	columnHeaders[col+1] = query_result.getMetaData().getColumnHeaders()[0][col];
}

json.append( 
    '"metadata": { ' +
        '"columns": ' + formataJSON(columnHeaders) + ', ' + QL +
        '"rows": ' + rowCount + ', ' + QL +
        '"cols": ' + (colCount+1) + QL +
    ' },' + QL);


json.append('"data" : [ ');
var rowData = null;
while (rowData = query_result.nextFlattened()) {
	json.append(QL).append(formataJSON(rowData));
	json.append(',');
}
json.deleteCharAt(json.length()-1); 

json.append(QL + '] ' + QL);

json.append('}' + QL + '}');

if (callback !== '' || callback === null) {
    json = callback + '(' + json.toString() + ')'
} else {
    json = json.toString();
}]]></script> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>TemplateComponent</component-name>
        <action-type>Message Template</action-type>
        <action-inputs> 
          <json type="string"/> 
        </action-inputs>
        <action-outputs> 
          <output-message type="string" mapping="out"/> 
        </action-outputs>
        <component-definition> 
          <template><![CDATA[{json}]]></template> 
        </component-definition> 
      </action-definition>
 
    </actions>
	
	
	
	<!-- **********************************CHECAGEM******** -->  
    <actions> 
      <condition><![CDATA[getData == "Checagem"]]></condition>  
      <action-definition> 
        <component-name>JavascriptRule</component-name>
        <action-type>JavaScript</action-type>
        <action-inputs> 
          <Empresa type="string"/>  
          <Cedente type="string"/> 
  	      <query_result_Empresa type="result-set"/>
        </action-inputs>
        <action-outputs> 
          <strQuery type="string"/> 
        </action-outputs>
        <component-definition> 
          <script><![CDATA[
		
			strQuery   =   "select T.dm031_010 as categoria ,  SUM(opft001_110) as Valor from  optbft001  as F inner join tctbdm031 as T on F.dm031_000 = T.dm031_000 inner join tctbdm001 as C on C.dm001_000 = F.dm001_000 inner join tctbdm023 as emp on f.dm023_000 = emp.dm023_000 where emp.dm023_001 in ({Empresa}) and F.dm062_000 in (1,2) and T.dm031_010 not in ('Verificado por Telefone','Pagamento') and   C.dm001_001  = {Cedente}  group by T.dm031_010";

			
		if ({Cedente} == "0")
		{
			strQuery   =   "select T.dm031_010 as categoria ,  SUM(opft001_110) as Valor from  optbft001  as F inner join tctbdm031 as T on F.dm031_000 = T.dm031_000 inner join tctbdm001 as C on C.dm001_000 = F.dm001_000 inner join tctbdm023 as emp on f.dm023_000 = emp.dm023_000 where emp.dm023_001 in ({Empresa}) and F.dm062_000 in (1,2) and T.dm031_010 not in ('Verificado por Telefone','Pagamento') group by T.dm031_010";
		}

		
		

;]]> </script> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>SQLLookupRule</component-name>
        <action-type>OLAP</action-type>
        <action-inputs> 
		  <Empresa type="string"/>  
		  <Cedente type="string"/>         
		  <strQuery type="string"/> 
		</action-inputs>
        <action-resources> 
          <catalog mapping="catalog"/> 
        </action-resources>
        <action-outputs> 
          <query-results type="result-set" mapping="query_result"/> 
        </action-outputs>
        <component-definition> 
          <jndi><![CDATA[dw_wba_fi]]></jndi>  
          <catalog>Operacoes de Credito</catalog> 
          <query><![CDATA[{strQuery}]]></query> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>JavascriptRule</component-name>
        <action-type>JavaScript</action-type>
        <action-inputs> 
          <query_result type="result-set"/>  
          <callback type="string"/> 
        </action-inputs>
        <action-outputs> 
          <json type="string"/>  
          <rowCount type="integer"/> 
        </action-outputs>
        <component-definition> 
          <script><![CDATA[
QL = ''; 
DEBUG=false;

function formataJSON(v) {
        var s = null;
        if (v == null) {
            s = 'null';
        } else if (v instanceof java.lang.String) {
            s = '"' + v + '"';
        } else if (v instanceof java.util.Date) {
            s = /*"new Date(" +*/ v.getTime() /*+ ")"*/;
        } else if (v instanceof Array) {
            s = new java.lang.StringBuilder("[ ");
            for (var i=0; i<v.length; i++) {
                if (i>0) {
                    s.append(',');
                }
                s.append(formataJSON(v[i]));
            }
            s.append(" ]");
        } else {
            s = v.toString();
        }
        if (DEBUG) {
             s = s.toString() + " /* " + v.getClass().getName() + " */";
        }
        return s.toString();
}

var rowCount=query_result.getRowCount();
var colCount=query_result.getColumnCount();
var json=new java.lang.StringBuilder('{ "result" : {');

var columnHeaders = new Array();
columnHeaders[0] = '"metrica"';
for (var col=0; col<colCount; col++) {
	columnHeaders[col+1] = query_result.getMetaData().getColumnHeaders()[0][col];
}

json.append( 
    '"metadata": { ' +
        '"columns": ' + formataJSON(columnHeaders) + ', ' + QL +
        '"rows": ' + rowCount + ', ' + QL +
        '"cols": ' + (colCount+1) + QL +
    ' },' + QL);


json.append('"data" : [ ');
var rowData = null;
while (rowData = query_result.nextFlattened()) {
	json.append(QL).append(formataJSON(rowData));
	json.append(',');
}
json.deleteCharAt(json.length()-1); 

json.append(QL + '] ' + QL);

json.append('}' + QL + '}');

if (callback !== '' || callback === null) {
    json = callback + '(' + json.toString() + ')'
} else {
    json = json.toString();
}]]></script> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>TemplateComponent</component-name>
        <action-type>Message Template</action-type>
        <action-inputs> 
          <json type="string"/> 
        </action-inputs>
        <action-outputs> 
          <output-message type="string" mapping="out"/> 
        </action-outputs>
        <component-definition> 
          <template><![CDATA[{json}]]></template> 
        </component-definition> 
      </action-definition>
 
    </actions>
	
	
	
	
	<!-- **********************************Liquidez******** -->  
    <actions> 
      <condition><![CDATA[getData == "LiquidezHistorica"]]></condition>  
      <action-definition> 
        <component-name>JavascriptRule</component-name>
        <action-type>JavaScript</action-type>
        <action-inputs> 
          <Empresa type="string"/>  
          <Cedente type="string"/> 
  	      <query_result_Empresa type="result-set"/>
        </action-inputs>
        <action-outputs> 
          <strQuery type="string"/> 
        </action-outputs>
        <component-definition> 
          <script><![CDATA[
		
if (Cedente == "0"){

strQuery   =   "SELECT A.MES       AS MES  ,  A.MESNUMERICO  AS MESNUMERICO  ,  SUM(A.VLRTotal)  AS VLRTotal  ,  Cast(CONVERT(NUMERIC(16, 2), ((Sum(A.pontual)+Sum(A.vcd_5_dias))/Sum(A.vlrTotal)*100 )) AS     VARCHAR(10))   + ' %'          AS PONTUAL,  CAST(CONVERT(NUMERIC(16,2),(SUM(A.VCD_5_DIAS)/SUM(A.VLRTotal)*100 )) AS VARCHAR(10)) + ' %'         AS VCD_5_DIAS  ,  CAST(CONVERT(NUMERIC(16,2),(SUM(A.VCD_6_15_DIAS)/SUM(A.VLRTotal)*100)) AS VARCHAR(10)) + ' %'       AS VCD_6_15_DIAS    ,  CAST(CONVERT(NUMERIC(16,2),(SUM(A.VCD_16_30_DIAS)/SUM(A.VLRTotal)*100)) AS VARCHAR(10)) +  ' %'     AS VCD_16_30_DIAS     ,  CAST(CONVERT(NUMERIC(16,2),(SUM(A.VCD_31_60_DIAS)/SUM(A.VLRTotal)*100 )) AS VARCHAR(10)) + ' %'     AS VCD_31_60_DIAS     ,  CAST(CONVERT(NUMERIC(16,2),(SUM(A.VCD_MAIS_60_DIAS)/SUM(A.VLRTotal)*100 )) AS VARCHAR(10)) + ' %'   AS VCD_MAIS_60_DIAS     ,  CAST(CONVERT(NUMERIC(16,2),(SUM(A.REGRESSO)/SUM(A.VLRTotal)*100 )) AS VARCHAR(10)) + ' %'     AS REGRESSO     ,  CAST(CONVERT(NUMERIC(16,2),(SUM(A.VENCIDO)/SUM(A.VLRTotal)*100 )) AS VARCHAR(10)) + ' %'      AS VENCIDO FROM (SELECT DM28.dm028_070 AS MES, DM28.dm028_060 AS MESNUMERICO,   SUM(CASE WHEN DM62.dm062_000 NOT IN (1) THEN ISNULL(FATO.opft001_110,0) ELSE 0 END) AS VLRTotal,   SUM(CASE WHEN DM62.dm062_000 NOT IN (2) AND FATO.dm003_000 = 3 THEN ISNULL(FATO.opft001_110,0) ELSE 0 END) AS REGRESSO,   SUM(CASE WHEN DM62.dm062_000 IN (2) AND FATO.dm003_000 NOT IN (3) THEN ISNULL(FATO.opft001_110,0) ELSE 0 END) AS VENCIDO,   SUM(CASE WHEN (DM62.dm062_000 IN (3) AND FATO.dm003_000 NOT IN (3) AND FX.sk_fx_pgto = 1)   THEN ISNULL(FATO.opft001_110,0) ELSE 0 END) AS PONTUAL,   SUM(CASE WHEN (DM62.dm062_000 IN (3) AND FATO.dm003_000 NOT IN (3) AND FX.sk_fx_pgto = 2)   THEN ISNULL(FATO.opft001_110,0) ELSE 0 END) AS VCD_5_DIAS,    SUM(CASE WHEN (DM62.dm062_000 IN (3) AND FATO.dm003_000 NOT IN (3) AND FX.sk_fx_pgto = 3)   THEN ISNULL(FATO.opft001_110,0) ELSE 0 END) AS VCD_6_15_DIAS,    SUM(CASE WHEN (DM62.dm062_000 IN (3) AND FATO.dm003_000 NOT IN (3) AND FX.sk_fx_pgto = 4)   THEN ISNULL(FATO.opft001_110,0) ELSE 0 END) AS VCD_16_30_DIAS,   SUM(CASE WHEN (DM62.dm062_000 IN (3) AND FATO.dm003_000 NOT IN (3) AND FX.sk_fx_pgto = 5)   THEN ISNULL(FATO.opft001_110,0) ELSE 0 END) AS VCD_31_60_DIAS,   SUM(CASE WHEN (DM62.dm062_000 IN (3) AND FATO.dm003_000 NOT IN (3) AND FX.sk_fx_pgto = 6)   THEN ISNULL(FATO.opft001_110,0) ELSE 0 END) AS VCD_MAIS_60_DIAS  FROM optbft001 FATO   INNER JOIN tctbdm001 dm01  ON dm01.dm001_000 = FATO.dm001_000   INNER JOIN optbdm060 DM60  ON DM60.dm060_000 = FATO.dm099_000   INNER JOIN tctbdm062 DM62  ON DM62.dm062_000 = FATO.dm062_000   INNER JOIN tctbdm023 DM23  ON DM23.dm023_000 = FATO.dm023_000   INNER JOIN fntbdm_faixa_pgto FX ON FX.sk_fx_pgto  = FATO.sk_faixa_pgto   INNER JOIN tctbdm028 DM28  ON DM28.dm028_000 = FATO.sk_data_vcto WHERE DM60.dm060_001 IN('040','041')    AND DM23.dm023_001 IN({Empresa})      AND FATO.dm012_000 IN(1,3)      AND DM28.dm028_090 = YEAR(GETDATE()) GROUP BY DM28.dm028_060,    DM28.dm028_070 HAVING SUM(CASE WHEN DM62.dm062_000 NOT IN (1) THEN ISNULL(FATO.opft001_110,0) ELSE 0 END) <> 0 )A GROUP BY A.MES, A.MESNUMERICO ORDER BY A.MESNUMERICO ASC";


}
else{
		
		
strQuery   =   "SELECT A.MES       AS MES  ,  A.MESNUMERICO  AS MESNUMERICO  ,  SUM(A.VLRTotal)  AS VLRTotal  ,  Cast(CONVERT(NUMERIC(16, 2), ((Sum(A.pontual)+Sum(A.vcd_5_dias))/Sum(A.vlrTotal)*100 )) AS     VARCHAR(10))   + ' %'          AS PONTUAL,  CAST(CONVERT(NUMERIC(16,2),(SUM(A.VCD_5_DIAS)/SUM(A.VLRTotal)*100 )) AS VARCHAR(10)) + ' %'         AS VCD_5_DIAS  ,  CAST(CONVERT(NUMERIC(16,2),(SUM(A.VCD_6_15_DIAS)/SUM(A.VLRTotal)*100)) AS VARCHAR(10)) + ' %'       AS VCD_6_15_DIAS    ,  CAST(CONVERT(NUMERIC(16,2),(SUM(A.VCD_16_30_DIAS)/SUM(A.VLRTotal)*100)) AS VARCHAR(10)) +  ' %'     AS VCD_16_30_DIAS     ,  CAST(CONVERT(NUMERIC(16,2),(SUM(A.VCD_31_60_DIAS)/SUM(A.VLRTotal)*100 )) AS VARCHAR(10)) + ' %'     AS VCD_31_60_DIAS     ,  CAST(CONVERT(NUMERIC(16,2),(SUM(A.VCD_MAIS_60_DIAS)/SUM(A.VLRTotal)*100 )) AS VARCHAR(10)) + ' %'   AS VCD_MAIS_60_DIAS     ,  CAST(CONVERT(NUMERIC(16,2),(SUM(A.REGRESSO)/SUM(A.VLRTotal)*100 )) AS VARCHAR(10)) + ' %'     AS REGRESSO     ,  CAST(CONVERT(NUMERIC(16,2),(SUM(A.VENCIDO)/SUM(A.VLRTotal)*100 )) AS VARCHAR(10)) + ' %'      AS VENCIDO FROM (SELECT DM28.dm028_070 AS MES, DM28.dm028_060 AS MESNUMERICO,   SUM(CASE WHEN DM62.dm062_000 NOT IN (1) THEN ISNULL(FATO.opft001_110,0) ELSE 0 END) AS VLRTotal,   SUM(CASE WHEN DM62.dm062_000 NOT IN (2) AND FATO.dm003_000 = 3 THEN ISNULL(FATO.opft001_110,0) ELSE 0 END) AS REGRESSO,   SUM(CASE WHEN DM62.dm062_000 IN (2) AND FATO.dm003_000 NOT IN (3) THEN ISNULL(FATO.opft001_110,0) ELSE 0 END) AS VENCIDO,   SUM(CASE WHEN (DM62.dm062_000 IN (3) AND FATO.dm003_000 NOT IN (3) AND FX.sk_fx_pgto = 1)   THEN ISNULL(FATO.opft001_110,0) ELSE 0 END) AS PONTUAL,   SUM(CASE WHEN (DM62.dm062_000 IN (3) AND FATO.dm003_000 NOT IN (3) AND FX.sk_fx_pgto = 2)   THEN ISNULL(FATO.opft001_110,0) ELSE 0 END) AS VCD_5_DIAS,    SUM(CASE WHEN (DM62.dm062_000 IN (3) AND FATO.dm003_000 NOT IN (3) AND FX.sk_fx_pgto = 3)   THEN ISNULL(FATO.opft001_110,0) ELSE 0 END) AS VCD_6_15_DIAS,    SUM(CASE WHEN (DM62.dm062_000 IN (3) AND FATO.dm003_000 NOT IN (3) AND FX.sk_fx_pgto = 4)   THEN ISNULL(FATO.opft001_110,0) ELSE 0 END) AS VCD_16_30_DIAS,   SUM(CASE WHEN (DM62.dm062_000 IN (3) AND FATO.dm003_000 NOT IN (3) AND FX.sk_fx_pgto = 5)   THEN ISNULL(FATO.opft001_110,0) ELSE 0 END) AS VCD_31_60_DIAS,   SUM(CASE WHEN (DM62.dm062_000 IN (3) AND FATO.dm003_000 NOT IN (3) AND FX.sk_fx_pgto = 6)   THEN ISNULL(FATO.opft001_110,0) ELSE 0 END) AS VCD_MAIS_60_DIAS  FROM optbft001 FATO   INNER JOIN tctbdm001 dm01  ON dm01.dm001_000 = FATO.dm001_000   INNER JOIN optbdm060 DM60  ON DM60.dm060_000 = FATO.dm099_000   INNER JOIN tctbdm062 DM62  ON DM62.dm062_000 = FATO.dm062_000   INNER JOIN tctbdm023 DM23  ON DM23.dm023_000 = FATO.dm023_000   INNER JOIN fntbdm_faixa_pgto FX ON FX.sk_fx_pgto  = FATO.sk_faixa_pgto   INNER JOIN tctbdm028 DM28  ON DM28.dm028_000 = FATO.sk_data_vcto WHERE dm01.dm001_001 = {Cedente}    AND DM60.dm060_001 IN('040','041')    AND DM23.dm023_001 IN({Empresa})      AND FATO.dm012_000 IN(1,3)      AND DM28.dm028_090 = YEAR(GETDATE()) GROUP BY DM28.dm028_060,    DM28.dm028_070 HAVING SUM(CASE WHEN DM62.dm062_000 NOT IN (1) THEN ISNULL(FATO.opft001_110,0) ELSE 0 END) <> 0 )A GROUP BY A.MES, A.MESNUMERICO ORDER BY A.MESNUMERICO ASC";

}
;]]> </script> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>SQLLookupRule</component-name>
        <action-type>OLAP</action-type>
        <action-inputs> 
		  <Empresa type="string"/>  
		  <Cedente type="string"/>         
		  <strQuery type="string"/> 
		</action-inputs>
        <action-resources> 
          <catalog mapping="catalog"/> 
        </action-resources>
        <action-outputs> 
          <query-results type="result-set" mapping="query_result"/> 
        </action-outputs>
        <component-definition> 
          <jndi><![CDATA[dw_wba_fi]]></jndi>  
          <catalog>Operacoes de Credito</catalog> 
          <query><![CDATA[{strQuery}]]></query> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>JavascriptRule</component-name>
        <action-type>JavaScript</action-type>
        <action-inputs> 
          <query_result type="result-set"/>  
          <callback type="string"/> 
        </action-inputs>
        <action-outputs> 
          <json type="string"/>  
          <rowCount type="integer"/> 
        </action-outputs>
        <component-definition> 
          <script><![CDATA[
QL = ''; 
DEBUG=false;

function formataJSON(v) {
        var s = null;
        if (v == null) {
            s = 'null';
        } else if (v instanceof java.lang.String) {
            s = '"' + v + '"';
        } else if (v instanceof java.util.Date) {
            s = /*"new Date(" +*/ v.getTime() /*+ ")"*/;
        } else if (v instanceof Array) {
            s = new java.lang.StringBuilder("[ ");
            for (var i=0; i<v.length; i++) {
                if (i>0) {
                    s.append(',');
                }
                s.append(formataJSON(v[i]));
            }
            s.append(" ]");
        } else {
            s = v.toString();
        }
        if (DEBUG) {
             s = s.toString() + " /* " + v.getClass().getName() + " */";
        }
        return s.toString();
}

var rowCount=query_result.getRowCount();
var colCount=query_result.getColumnCount();
var json=new java.lang.StringBuilder('{ "result" : {');

var columnHeaders = new Array();
columnHeaders[0] = '"metrica"';
for (var col=0; col<colCount; col++) {
	columnHeaders[col+1] = query_result.getMetaData().getColumnHeaders()[0][col];
}

json.append( 
    '"metadata": { ' +
        '"columns": ' + formataJSON(columnHeaders) + ', ' + QL +
        '"rows": ' + rowCount + ', ' + QL +
        '"cols": ' + (colCount+1) + QL +
    ' },' + QL);


json.append('"data" : [ ');
var rowData = null;
while (rowData = query_result.nextFlattened()) {
	json.append(QL).append(formataJSON(rowData));
	json.append(',');
}
json.deleteCharAt(json.length()-1); 

json.append(QL + '] ' + QL);

json.append('}' + QL + '}');

if (callback !== '' || callback === null) {
    json = callback + '(' + json.toString() + ')'
} else {
    json = json.toString();
}]]></script> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>TemplateComponent</component-name>
        <action-type>Message Template</action-type>
        <action-inputs> 
          <json type="string"/> 
        </action-inputs>
        <action-outputs> 
          <output-message type="string" mapping="out"/> 
        </action-outputs>
        <component-definition> 
          <template><![CDATA[{json}]]></template> 
        </component-definition> 
      </action-definition>
 
    </actions>
	
	
	
	<!-- **********************************Sacados por Cedente/Empresa (Nome) ******** -->  
    <actions> 
      <condition><![CDATA[getData == "SacadosNome"]]></condition>  
      <action-definition> 
        <component-name>JavascriptRule</component-name>
        <action-type>JavaScript</action-type>
        <action-inputs> 
          <Empresa type="string"/>  
          <Cedente type="string"/> 
  	      <query_result_Empresa type="result-set"/>
        </action-inputs>
        <action-outputs> 
          <strQuery type="string"/> 
        </action-outputs>
        <component-definition> 
          <script><![CDATA[
		

strQuery   =   "select distinct top 300 S.dm022_010 as NomeSacado from optbft001 as F inner join tctbdm022 as S  on F.dm022_000 = S.dm022_000 inner join tctbdm023 as emp on f.dm023_000 = emp.dm023_000 where emp.dm023_001 in ({Empresa})   AND S.dm022_010  like '%"+{Cedente}+"%' order by 1";


;]]> </script> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>SQLLookupRule</component-name>
        <action-type>OLAP</action-type>
        <action-inputs> 
		  <Empresa type="string"/>  
		  <Cedente type="string"/>         
		  <strQuery type="string"/> 
		</action-inputs>
        <action-resources> 
          <catalog mapping="catalog"/> 
        </action-resources>
        <action-outputs> 
          <query-results type="result-set" mapping="query_result"/> 
        </action-outputs>
        <component-definition> 
          <jndi><![CDATA[dw_wba_fi]]></jndi>  
          <catalog>Operacoes de Credito</catalog> 
          <query><![CDATA[{strQuery}]]></query> 
        </component-definition> 
      </action-definition>
      <action-definition> 
        <component-name>JavascriptRule</component-name>
        <action-type>JavaScript</action-type>
        <action-inputs> 
          <query_result type="result-set"/>  
          <callback type="string"/> 
        </action-inputs>
        <action-outputs> 
          <json type="string"/>  
          <rowCount type="integer"/> 
        </action-outputs>
        <component-definition> 
          <script><![CDATA[
QL = ''; 
DEBUG=false;

function formataJSON(v) {
        var s = null;
        if (v == null) {
            s = 'null';
        } else if (v instanceof java.lang.String) {
            s = '"' + v + '"';
        } else if (v instanceof java.util.Date) {
            s = /*"new Date(" +*/ v.getTime() /*+ ")"*/;
        } else if (v instanceof Array) {
            s = new java.lang.StringBuilder("[ ");
            for (var i=0; i<v.length; i++) {
                if (i>0) {
                    s.append(',');
                }
                s.append(formataJSON(v[i]));
            }
            s.append(" ]");
        } else {
            s = v.toString();
        }
        if (DEBUG) {
             s = s.toString() + " /* " + v.getClass().getName() + " */";
        }
        return s.toString();
}

var rowCount=query_result.getRowCount();
var colCount=query_result.getColumnCount();
var json=new java.lang.StringBuilder('{ "result" : {');

var columnHeaders = new Array();
columnHeaders[0] = '"metrica"';
for (var col=0; col<colCount; col++) {
	columnHeaders[col+1] = query_result.getMetaData().getColumnHeaders()[0][col];
}

json.append( 
    '"metadata": { ' +
        '"columns": ' + formataJSON(columnHeaders) + ', ' + QL +
        '"rows": ' + rowCount + ', ' + QL +
        '"cols": ' + (colCount+1) + QL +
    ' },' + QL);


json.append('"data" : [ ');
var rowData = null;
while (rowData = query_result.nextFlattened()) {
	json.append(QL).append(formataJSON(rowData));
	json.append(',');
}
json.deleteCharAt(json.length()-1); 

json.append(QL + '] ' + QL);

json.append('}' + QL + '}');

if (callback !== '' || callback === null) {
    json = callback + '(' + json.toString() + ')'
} else {
    json = json.toString();
}]]></script> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>TemplateComponent</component-name>
        <action-type>Message Template</action-type>
        <action-inputs> 
          <json type="string"/> 
        </action-inputs>
        <action-outputs> 
          <output-message type="string" mapping="out"/> 
        </action-outputs>
        <component-definition> 
          <template><![CDATA[{json}]]></template> 
        </component-definition> 
      </action-definition>
 
    </actions>
	
	
	
	<!-- **********************************Sacados por Cedente/Empresa (CNPJ) ******** -->  
    <actions> 
      <condition><![CDATA[getData == "SacadosCGC"]]></condition>  
      <action-definition> 
        <component-name>JavascriptRule</component-name>
        <action-type>JavaScript</action-type>
        <action-inputs> 
          <Empresa type="string"/>  
          <Cedente type="string"/> 
		  <Sacado  type="string"/> 
  	    </action-inputs>
        <action-outputs> 
          <strQuery type="string"/> 
        </action-outputs>
        <component-definition> 
          <script><![CDATA[
		
strQuery   =   "select distinct S.dm022_020 as CGC  from optbft001 as F inner join tctbdm022 as S  on F.dm022_000 = S.dm022_000 inner join tctbdm001 as C  on F.dm001_000 = C.dm001_000 inner join tctbdm023 as emp on f.dm023_000 = emp.dm023_000 where emp.dm023_001 in ({Empresa})  and S.dm022_010 = {Sacado}";

;]]> </script> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>SQLLookupRule</component-name>
        <action-type>OLAP</action-type>
        <action-inputs> 
		  <Empresa type="string"/>  
		  <Cedente type="string"/>      
		  <Sacado  type="string"/>		  
		  <strQuery type="string"/> 
		</action-inputs>
        <action-resources> 
          <catalog mapping="catalog"/> 
        </action-resources>
        <action-outputs> 
          <query-results type="result-set" mapping="query_result"/> 
        </action-outputs>
        <component-definition> 
          <jndi><![CDATA[dw_wba_fi]]></jndi>  
          <catalog>Operacoes de Credito</catalog> 
          <query><![CDATA[{strQuery}]]></query> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>JavascriptRule</component-name>
        <action-type>JavaScript</action-type>
        <action-inputs> 
          <query_result type="result-set"/>  
          <callback type="string"/> 
        </action-inputs>
        <action-outputs> 
          <json type="string"/>  
          <rowCount type="integer"/> 
        </action-outputs>
        <component-definition> 
          <script><![CDATA[
QL = ''; 
DEBUG=false;

function formataJSON(v) {
        var s = null;
        if (v == null) {
            s = 'null';
        } else if (v instanceof java.lang.String) {
            s = '"' + v + '"';
        } else if (v instanceof java.util.Date) {
            s = /*"new Date(" +*/ v.getTime() /*+ ")"*/;
        } else if (v instanceof Array) {
            s = new java.lang.StringBuilder("[ ");
            for (var i=0; i<v.length; i++) {
                if (i>0) {
                    s.append(',');
                }
                s.append(formataJSON(v[i]));
            }
            s.append(" ]");
        } else {
            s = v.toString();
        }
        if (DEBUG) {
             s = s.toString() + " /* " + v.getClass().getName() + " */";
        }
        return s.toString();
}

var rowCount=query_result.getRowCount();
var colCount=query_result.getColumnCount();
var json=new java.lang.StringBuilder('{ "result" : {');

var columnHeaders = new Array();
columnHeaders[0] = '"metrica"';
for (var col=0; col<colCount; col++) {
	columnHeaders[col+1] = query_result.getMetaData().getColumnHeaders()[0][col];
}

json.append( 
    '"metadata": { ' +
        '"columns": ' + formataJSON(columnHeaders) + ', ' + QL +
        '"rows": ' + rowCount + ', ' + QL +
        '"cols": ' + (colCount+1) + QL +
    ' },' + QL);


json.append('"data" : [ ');
var rowData = null;
while (rowData = query_result.nextFlattened()) {
	json.append(QL).append(formataJSON(rowData));
	json.append(',');
}
json.deleteCharAt(json.length()-1); 

json.append(QL + '] ' + QL);

json.append('}' + QL + '}');

if (callback !== '' || callback === null) {
    json = callback + '(' + json.toString() + ')'
} else {
    json = json.toString();
}]]></script> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>TemplateComponent</component-name>
        <action-type>Message Template</action-type>
        <action-inputs> 
          <json type="string"/> 
        </action-inputs>
        <action-outputs> 
          <output-message type="string" mapping="out"/> 
        </action-outputs>
        <component-definition> 
          <template><![CDATA[{json}]]></template> 
        </component-definition> 
      </action-definition>
 
    </actions>
	
	
	
		
	<!-- **********************************Indice de Liquidez ******** -->  
    <actions> 
      <condition><![CDATA[getData == "LiquidezCGC"]]></condition>  
      <action-definition> 
        <component-name>JavascriptRule</component-name>
        <action-type>JavaScript</action-type>
        <action-inputs> 
          <Empresa type="string"/>  
          <Cedente type="string"/> 
		  <CNPJ    type="string"/> 
  	    </action-inputs>
        <action-outputs> 
          <strQuery type="string"/> 
        </action-outputs>
        <component-definition> 
          <script><![CDATA[
		
strQuery   =   "SELECT A.MES       AS MES  ,  A.MESNUMERICO  AS MESNUMERICO  ,  Cast(CONVERT(NUMERIC(16, 2), ((Sum(A.pontual)+Sum(A.vcd_5_dias))/Sum(A.vlrTotal)*100 )) AS     VARCHAR(10))   + ' %'          AS PONTUAL,  CAST(CONVERT(NUMERIC(16,2),(SUM(A.REGRESSO)/SUM(A.VLRTotal)*100 )) AS VARCHAR(10)) + ' %'     AS REGRESSO FROM (SELECT DM28.dm028_070 AS MES, DM28.dm028_060 AS MESNUMERICO,   SUM(CASE WHEN DM62.dm062_000 NOT IN (1) THEN ISNULL(FATO.opft001_110,0) ELSE 0 END) AS VLRTotal,   SUM(CASE WHEN DM62.dm062_000 NOT IN (2) AND FATO.dm003_000 = 3 THEN ISNULL(FATO.opft001_110,0) ELSE 0 END) AS REGRESSO,   SUM(CASE WHEN DM62.dm062_000 IN (2) AND FATO.dm003_000 NOT IN (3) THEN ISNULL(FATO.opft001_110,0) ELSE 0 END) AS VENCIDO,         SUM(CASE WHEN (DM62.dm062_000 IN (3) AND FATO.dm003_000 NOT IN (3) AND FX.sk_fx_pgto = 1)   THEN ISNULL(FATO.opft001_110,0) ELSE 0 END) AS PONTUAL,          SUM(CASE WHEN (DM62.dm062_000 IN (3) AND FATO.dm003_000 NOT IN (3) AND FX.sk_fx_pgto = 2)   THEN ISNULL(FATO.opft001_110,0) ELSE 0 END) AS VCD_5_DIAS,       SUM(CASE WHEN (DM62.dm062_000 IN (3) AND FATO.dm003_000 NOT IN (3) AND FX.sk_fx_pgto = 3)   THEN ISNULL(FATO.opft001_110,0) ELSE 0 END) AS VCD_6_15_DIAS,    SUM(CASE WHEN (DM62.dm062_000 IN (3) AND FATO.dm003_000 NOT IN (3) AND FX.sk_fx_pgto = 4)   THEN ISNULL(FATO.opft001_110,0) ELSE 0 END) AS VCD_16_30_DIAS,   SUM(CASE WHEN (DM62.dm062_000 IN (3) AND FATO.dm003_000 NOT IN (3) AND FX.sk_fx_pgto = 5)   THEN ISNULL(FATO.opft001_110,0) ELSE 0 END) AS VCD_31_60_DIAS,   SUM(CASE WHEN (DM62.dm062_000 IN (3) AND FATO.dm003_000 NOT IN (3) AND FX.sk_fx_pgto = 6)   THEN ISNULL(FATO.opft001_110,0) ELSE 0 END) AS VCD_MAIS_60_DIAS  FROM optbft001 FATO   INNER JOIN tctbdm001 dm01  ON dm01.dm001_000 = FATO.dm001_000   INNER JOIN optbdm060 DM60  ON DM60.dm060_000 = FATO.dm099_000   INNER JOIN tctbdm062 DM62  ON DM62.dm062_000 = FATO.dm062_000   INNER JOIN tctbdm023 DM23  ON DM23.dm023_000 = FATO.dm023_000   INNER JOIN fntbdm_faixa_pgto FX ON FX.sk_fx_pgto  = FATO.sk_faixa_pgto   INNER JOIN tctbdm028 DM28  ON DM28.dm028_000  = FATO.sk_data_vcto   INNER JOIN tctbdm022 dm022 ON dm022.dm022_000 = FATO.dm022_000 WHERE DM60.dm060_001 IN('040','041')    AND dm23.dm023_001 IN ({Empresa})      AND FATO.dm012_000 IN(1,3)      AND dm022.dm022_020 = {CNPJ}    AND DM28.dm028_090 = YEAR(GETDATE()) GROUP BY DM28.dm028_060,    DM28.dm028_070 HAVING SUM(CASE WHEN DM62.dm062_000 NOT IN (1) THEN ISNULL(FATO.opft001_110,0) ELSE 0 END) <> 0 )A GROUP BY A.MES, A.MESNUMERICO ORDER BY A.MESNUMERICO ASC";

;]]> </script> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>SQLLookupRule</component-name>
        <action-type>OLAP</action-type>
        <action-inputs> 
		  <Empresa type="string"/>  
		  <Cedente type="string"/>      
		  <CNPJ    type="string"/> 		  
		  <strQuery type="string"/> 
		</action-inputs>
        <action-resources> 
          <catalog mapping="catalog"/> 
        </action-resources>
        <action-outputs> 
          <query-results type="result-set" mapping="query_result"/> 
        </action-outputs>
        <component-definition> 
          <jndi><![CDATA[dw_wba_fi]]></jndi>  
          <catalog>Operacoes de Credito</catalog> 
          <query><![CDATA[{strQuery}]]></query> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>JavascriptRule</component-name>
        <action-type>JavaScript</action-type>
        <action-inputs> 
          <query_result type="result-set"/>  
          <callback type="string"/> 
        </action-inputs>
        <action-outputs> 
          <json type="string"/>  
          <rowCount type="integer"/> 
        </action-outputs>
        <component-definition> 
          <script><![CDATA[
QL = ''; 
DEBUG=false;

function formataJSON(v) {
        var s = null;
        if (v == null) {
            s = 'null';
        } else if (v instanceof java.lang.String) {
            s = '"' + v + '"';
        } else if (v instanceof java.util.Date) {
            s = /*"new Date(" +*/ v.getTime() /*+ ")"*/;
        } else if (v instanceof Array) {
            s = new java.lang.StringBuilder("[ ");
            for (var i=0; i<v.length; i++) {
                if (i>0) {
                    s.append(',');
                }
                s.append(formataJSON(v[i]));
            }
            s.append(" ]");
        } else {
            s = v.toString();
        }
        if (DEBUG) {
             s = s.toString() + " /* " + v.getClass().getName() + " */";
        }
        return s.toString();
}

var rowCount=query_result.getRowCount();
var colCount=query_result.getColumnCount();
var json=new java.lang.StringBuilder('{ "result" : {');

var columnHeaders = new Array();
columnHeaders[0] = '"metrica"';
for (var col=0; col<colCount; col++) {
	columnHeaders[col+1] = query_result.getMetaData().getColumnHeaders()[0][col];
}

json.append( 
    '"metadata": { ' +
        '"columns": ' + formataJSON(columnHeaders) + ', ' + QL +
        '"rows": ' + rowCount + ', ' + QL +
        '"cols": ' + (colCount+1) + QL +
    ' },' + QL);


json.append('"data" : [ ');
var rowData = null;
while (rowData = query_result.nextFlattened()) {
	json.append(QL).append(formataJSON(rowData));
	json.append(',');
}
json.deleteCharAt(json.length()-1); 

json.append(QL + '] ' + QL);

json.append('}' + QL + '}');

if (callback !== '' || callback === null) {
    json = callback + '(' + json.toString() + ')'
} else {
    json = json.toString();
}]]></script> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>TemplateComponent</component-name>
        <action-type>Message Template</action-type>
        <action-inputs> 
          <json type="string"/> 
        </action-inputs>
        <action-outputs> 
          <output-message type="string" mapping="out"/> 
        </action-outputs>
        <component-definition> 
          <template><![CDATA[{json}]]></template> 
        </component-definition> 
      </action-definition>
 
    </actions>
	
	
	
	<!-- **********************************AVENCER/VENCIDO\ABERTO etc ******** -->  
    <actions> 
      <condition><![CDATA[getData == "LiquidezGeral"]]></condition>  
      <action-definition> 
        <component-name>JavascriptRule</component-name>
        <action-type>JavaScript</action-type>
        <action-inputs> 
          <Empresa type="string"/>  
          <Cedente type="string"/> 
  	      <CNPJ    type="string"/> 
  	    </action-inputs>
        <action-outputs> 
          <strQuery type="string"/> 
        </action-outputs>
        <component-definition> 
          <script><![CDATA[
		
strQuery   =   "SELECT A.mes         AS MES,        A.mesnumerico AS MESNUMERICO,        Cast(CONVERT(NUMERIC(16, 2), (Sum(A.aberto)/Sum(A.vlrTotal)*100 )) AS        VARCHAR(10        ))        + ' %'        AS ABERTO,        Cast(CONVERT(NUMERIC(16, 2), (Sum(A.vencido)/Sum(A.vlrTotal)*100 )) AS        VARCHAR(        10))        + ' %'        AS VENCIDO,        Cast(CONVERT(NUMERIC(16, 2), (Sum(A.avencer)/Sum(A.vlrTotal)*100 )) AS        VARCHAR(        10))        + ' %'        AS AVENCER,        Cast(CONVERT(NUMERIC(16, 2), (Sum(A.confirmado)/Sum(A.vlrTotal)*100 )) AS        VARCHAR(10))        + ' %'        AS CONFIRMADO,        Cast(CONVERT(NUMERIC(16, 2), (Sum(A.liquidado)/Sum(A.vlrTotal)*100 )) AS        VARCHAR        (10))        + ' %'        AS Total_LIQUIDADO,        Cast(CONVERT(NUMERIC(16, 2), (Sum(A.pontual)/Sum(A.vlrTotal)*100 )) AS        VARCHAR(        10))        + ' %'        AS PONTUAL,        Cast(CONVERT(NUMERIC(16, 2), (Sum(A.em_atrazo)/Sum(A.vlrTotal)*100 )) AS        VARCHAR        (10))        + ' %'        AS EM_ATRAZO,        Cast(CONVERT(NUMERIC(16, 2), (Sum(A.regresso)/Sum(A.vlrTotal)*100 )) AS        VARCHAR(        10))        + ' %'        AS REGRESSO,        Cast(CONVERT(NUMERIC(16, 2), (Sum(A.pdd )/Sum(A.vlrTotal)*100 )) AS        VARCHAR( 10)        )        + ' %'        AS PDD FROM   (SELECT DM28.dm028_070 AS MES,                DM28.dm028_060 AS MESNUMERICO,                Sum(Isnull(FATO.opft001_110, 0)) AS VLRTotal,                Sum(CASE                      WHEN DM62.dm062_000 NOT IN ( 2 )                           AND FATO.dm003_000 = 3 THEN                      Isnull(FATO.opft001_110, 0)                      ELSE 0                    END)       AS REGRESSO,                Sum(CASE                      WHEN DM62.dm062_000 IN ( 2 )                           AND FATO.dm003_000 NOT IN ( 3 ) THEN                      Isnull(FATO.opft001_110, 0)                      ELSE 0                    END)       AS VENCIDO,                Sum(CASE                      WHEN ( DM62.dm062_000 IN ( 3 )                             AND FATO.dm003_000 NOT IN ( 3 )                             AND FX.sk_fx_pgto IN ( 1, 2 ) ) THEN                      Isnull(FATO.opft001_110, 0)                      ELSE 0                    END)       AS PONTUAL,                Sum(CASE                      WHEN DM62.dm062_000 IN ( 1, 2 )                           AND FATO.dm003_000 NOT IN ( 3 ) THEN                      Isnull(FATO.opft001_110, 0)                      ELSE 0                    END)       AS ABERTO,                Sum(CASE                      WHEN DM62.dm062_000 IN ( 1 )                           AND FATO.dm003_000 NOT IN ( 3 ) THEN                      Isnull(FATO.opft001_110, 0)                      ELSE 0                    END)       AS AVENCER,                Sum(CASE                      WHEN ( DM62.dm062_000 IN ( 3 ) ) THEN                      Isnull(FATO.opft001_110, 0)                      ELSE 0                    END)       AS LIQUIDADO,                Sum(CASE                      WHEN DM62.dm062_000 IN ( 1, 2 )                           AND FATO.dm031_000 IN ( 1 ) THEN                      Isnull(FATO.opft001_110, 0)                      ELSE 0                    END)       AS CONFIRMADO,                Sum(CASE                      WHEN FX.sk_fx_pgto IN ( 3, 4, 5, 6 )                           AND FATO.dm003_000 NOT IN ( 3 ) THEN                      Isnull(FATO.opft001_110, 0)                      ELSE 0                    END)       AS EM_ATRAZO,                Sum(CASE                      WHEN DM62.dm062_000 = 3                           AND Estado.dm061_001 = 16 THEN                      Isnull(FATO.opft001_110, 0)                      ELSE 0                    END)       AS PDD         FROM   optbft001 FATO                INNER JOIN tctbdm001 dm01                        ON dm01.dm001_000 = FATO.dm001_000                INNER JOIN optbdm060 DM60                        ON DM60.dm060_000 = FATO.dm099_000                INNER JOIN tctbdm062 DM62                        ON DM62.dm062_000 = FATO.dm062_000                INNER JOIN tctbdm023 DM23                        ON DM23.dm023_000 = FATO.dm023_000                INNER JOIN fntbdm_faixa_pgto FX                        ON FX.sk_fx_pgto = FATO.sk_faixa_pgto                INNER JOIN tctbdm028 DM28                        ON DM28.dm028_000 = FATO.sk_data_vcto                INNER JOIN tctbdm022 dm022                        ON dm022.dm022_000 = FATO.dm022_000                INNER JOIN optbdm061 AS Estado                        ON Estado.dm061_000 = FATO.dm061_000         WHERE  dm022.dm022_020 = {CNPJ}                AND DM60.dm060_001 IN( '040', '041' )                AND dm23.dm023_001 IN( {Empresa} )                AND FATO.dm012_000 IN( 1, 3 )                AND DM28.dm028_090 = Year(Getdate())         GROUP  BY DM28.dm028_060,                   DM28.dm028_070         HAVING Sum(Isnull(FATO.opft001_110, 0)) <> 0)A GROUP  BY A.mes,           A.mesnumerico ORDER  BY A.mesnumerico ASC";
;]]> </script> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>SQLLookupRule</component-name>
        <action-type>OLAP</action-type>
        <action-inputs> 
		  <Empresa type="string"/>  
		  <Cedente type="string"/>      
		  <CNPJ    type="string"/> 		  
		  <strQuery type="string"/> 
		</action-inputs>
        <action-resources> 
          <catalog mapping="catalog"/> 
        </action-resources>
        <action-outputs> 
          <query-results type="result-set" mapping="query_result"/> 
        </action-outputs>
        <component-definition> 
          <jndi><![CDATA[dw_wba_fi]]></jndi>  
          <catalog>Operacoes de Credito</catalog> 
          <query><![CDATA[{strQuery}]]></query> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>JavascriptRule</component-name>
        <action-type>JavaScript</action-type>
        <action-inputs> 
          <query_result type="result-set"/>  
          <callback type="string"/> 
        </action-inputs>
        <action-outputs> 
          <json type="string"/>  
          <rowCount type="integer"/> 
        </action-outputs>
        <component-definition> 
          <script><![CDATA[
QL = ''; 
DEBUG=false;

function formataJSON(v) {
        var s = null;
        if (v == null) {
            s = 'null';
        } else if (v instanceof java.lang.String) {
            s = '"' + v + '"';
        } else if (v instanceof java.util.Date) {
            s = /*"new Date(" +*/ v.getTime() /*+ ")"*/;
        } else if (v instanceof Array) {
            s = new java.lang.StringBuilder("[ ");
            for (var i=0; i<v.length; i++) {
                if (i>0) {
                    s.append(',');
                }
                s.append(formataJSON(v[i]));
            }
            s.append(" ]");
        } else {
            s = v.toString();
        }
        if (DEBUG) {
             s = s.toString() + " /* " + v.getClass().getName() + " */";
        }
        return s.toString();
}

var rowCount=query_result.getRowCount();
var colCount=query_result.getColumnCount();
var json=new java.lang.StringBuilder('{ "result" : {');

var columnHeaders = new Array();
columnHeaders[0] = '"metrica"';
for (var col=0; col<colCount; col++) {
	columnHeaders[col+1] = query_result.getMetaData().getColumnHeaders()[0][col];
}

json.append( 
    '"metadata": { ' +
        '"columns": ' + formataJSON(columnHeaders) + ', ' + QL +
        '"rows": ' + rowCount + ', ' + QL +
        '"cols": ' + (colCount+1) + QL +
    ' },' + QL);


json.append('"data" : [ ');
var rowData = null;
while (rowData = query_result.nextFlattened()) {
	json.append(QL).append(formataJSON(rowData));
	json.append(',');
}
json.deleteCharAt(json.length()-1); 

json.append(QL + '] ' + QL);

json.append('}' + QL + '}');

if (callback !== '' || callback === null) {
    json = callback + '(' + json.toString() + ')'
} else {
    json = json.toString();
}]]></script> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>TemplateComponent</component-name>
        <action-type>Message Template</action-type>
        <action-inputs> 
          <json type="string"/> 
        </action-inputs>
        <action-outputs> 
          <output-message type="string" mapping="out"/> 
        </action-outputs>
        <component-definition> 
          <template><![CDATA[{json}]]></template> 
        </component-definition> 
      </action-definition>
 
    </actions>
	
	
	
		<!-- **********************************Tipo de Cobranca******** -->  
    <actions> 
      <condition><![CDATA[getData == "TipoCobranca"]]></condition>  
      <action-definition> 
        <component-name>JavascriptRule</component-name>
        <action-type>JavaScript</action-type>
        <action-inputs> 
          <Empresa type="string"/>  
          <Cedente type="string"/> 
  	      <query_result_Empresa type="result-set"/>
        </action-inputs>
        <action-outputs> 
          <strQuery type="string"/> 
        </action-outputs>
        <component-definition> 
          <script><![CDATA[
		
  
  strQuery   =   "SELECT  case when F.crft004_550 = 'N' then 'Nao vai pagar'              when F.crft004_550 = 'N/A' then 'N/A'              when F.crft004_550 = 'S' then 'Vai pagar' end as  DescTag,   SUM(F.opft001_110) AS Valor FROM titbft001 F INNER JOIN tctbdm090 TC ON F.dm090_000 = TC.dm090_000           INNER JOIN optbdm060 CO ON F.dm099_000 = CO.dm060_000           INNER JOIN tctbdm001 C ON F.dm001_000 = C.dm001_000 inner join tctbdm023 as emp on f.dm023_000 = emp.dm023_000 WHERE F.dm062_000 IN (1,2) AND    F.dm012_000 IN (1,3) AND    emp.dm023_001 IN ( {Empresa} ) AND    C.dm001_001 = {Cedente} AND    CO.dm060_001 IN ('040','041','046') GROUP BY F.crft004_550 order by 1";


 if ({Cedente} == "0")
 {
   strQuery   =   "SELECT  case when F.crft004_550 = 'N' then 'Nao vai pagar'                          when F.crft004_550 = 'N/A' then 'N/A'                           when F.crft004_550 = 'S' then 'Vai pagar'              end as  DescTag  ,                  SUM(F.opft001_110) AS Valor  FROM titbft001 F        INNER JOIN optbdm060 CO ON F.dm099_000 = CO.dm060_000                 INNER JOIN tctbdm001 C ON F.dm001_000 = C.dm001_000 inner join tctbdm023 as emp on f.dm023_000 = emp.dm023_000 WHERE F.dm062_000 IN (1,2) AND           F.dm012_000 IN (1,3 ) AND               emp.dm023_001 IN ( {Empresa} ) AND           CO.dm060_001 IN ('040','041','046')  GROUP BY F.crft004_550 order by 1";
 }
   
;]]> </script> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>SQLLookupRule</component-name>
        <action-type>OLAP</action-type>
        <action-inputs> 
		  <Empresa type="string"/>  
		  <Cedente type="string"/>         
		  <strQuery type="string"/> 
		</action-inputs>
        <action-resources> 
          <catalog mapping="catalog"/> 
        </action-resources>
        <action-outputs> 
          <query-results type="result-set" mapping="query_result"/> 
        </action-outputs>
        <component-definition> 
          <jndi><![CDATA[dw_wba_fi]]></jndi>  
          <catalog>Operacoes de Credito</catalog> 
          <query><![CDATA[{strQuery}]]></query> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>JavascriptRule</component-name>
        <action-type>JavaScript</action-type>
        <action-inputs> 
          <query_result type="result-set"/>  
          <callback type="string"/> 
        </action-inputs>
        <action-outputs> 
          <json type="string"/>  
          <rowCount type="integer"/> 
        </action-outputs>
        <component-definition> 
          <script><![CDATA[
QL = ''; 
DEBUG=false;

function formataJSON(v) {
        var s = null;
        if (v == null) {
            s = 'null';
        } else if (v instanceof java.lang.String) {
            s = '"' + v + '"';
        } else if (v instanceof java.util.Date) {
            s = /*"new Date(" +*/ v.getTime() /*+ ")"*/;
        } else if (v instanceof Array) {
            s = new java.lang.StringBuilder("[ ");
            for (var i=0; i<v.length; i++) {
                if (i>0) {
                    s.append(',');
                }
                s.append(formataJSON(v[i]));
            }
            s.append(" ]");
        } else {
            s = v.toString();
        }
        if (DEBUG) {
             s = s.toString() + " /* " + v.getClass().getName() + " */";
        }
        return s.toString();
}

var rowCount=query_result.getRowCount();
var colCount=query_result.getColumnCount();
var json=new java.lang.StringBuilder('{ "result" : {');

var columnHeaders = new Array();
columnHeaders[0] = '"metrica"';
for (var col=0; col<colCount; col++) {
	columnHeaders[col+1] = query_result.getMetaData().getColumnHeaders()[0][col];
}

json.append( 
    '"metadata": { ' +
        '"columns": ' + formataJSON(columnHeaders) + ', ' + QL +
        '"rows": ' + rowCount + ', ' + QL +
        '"cols": ' + (colCount+1) + QL +
    ' },' + QL);


json.append('"data" : [ ');
var rowData = null;
while (rowData = query_result.nextFlattened()) {
	json.append(QL).append(formataJSON(rowData));
	json.append(',');
}
json.deleteCharAt(json.length()-1); 

json.append(QL + '] ' + QL);

json.append('}' + QL + '}');

if (callback !== '' || callback === null) {
    json = callback + '(' + json.toString() + ')'
} else {
    json = json.toString();
}]]></script> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>TemplateComponent</component-name>
        <action-type>Message Template</action-type>
        <action-inputs> 
          <json type="string"/> 
        </action-inputs>
        <action-outputs> 
          <output-message type="string" mapping="out"/> 
        </action-outputs>
        <component-definition> 
          <template><![CDATA[{json}]]></template> 
        </component-definition> 
      </action-definition>
 
    </actions>
	
	
	
	
	
	
		<!-- **********************************BOA VISTA******** -->  
    <actions> 
      <condition><![CDATA[getData == "BoaVista"]]></condition>  
      <action-definition> 
        <component-name>JavascriptRule</component-name>
        <action-type>JavaScript</action-type>
        <action-inputs> 
          <Cedente type="string"/> 
		  <TipoConsulta type="string"/> 
        </action-inputs>
        <action-outputs> 
          <strQuery type="string"/> 
        </action-outputs>
        <component-definition> 
          <script><![CDATA[
		  
   strQuery   =   "select Tipo, Ano, Data, VLRPROTESTO, QTDEPROTESTO, QTDEFALENCIA, QTDECHEQUE from ( select distinct 'B' as Tipo, 				  YEAR(C.UltimoDia) as Ano, 				  MONTH(C.UltimoDia) as Mes, 				  CONVERT(VARCHAR(12),C.Em,103) as Data, 				  C.VLRPROTESTO, 				  C.QTDEPROTESTO, 				  C.QTDEFALENCIA, 				  C.QTDECHEQUE   from ( SELECT Sigcad_ID, 				RazaoSocial, 				Em, 				isnull(SUM(PrtstQuantidade),0) AS QTDEPROTESTO, 				isnull(SUM(PrtstTotal),0) AS VLRPROTESTO, 				isnull(SUM(FalenciaQtd),0) AS QTDEFALENCIA, 				isnull(SUM(CSFQtd),0) AS QTDECHEQUE, 				dateadd(m,1,dateadd(d,-day(E.Em),E.Em)) as UltimoDia 		 FROM EqEmpresarial E 		 WHERE Sigcad_ID = {Cedente} and  			   E.Em BETWEEN DATEADD(YEAR,-1,getDate()) and GETDATE() 		 GROUP BY 	Sigcad_ID   , RazaoSocial   , Em  ) C   UNION ALL   select 'S' as Tipo , 		 YEAR(S.Em) as Ano, 		 MONTH(S.Em) as Mes, 		 CONVERT(VARCHAR(12),S.Em,103) as Data, 		 0 as VLRPROTESTO, 		 ( select SUM(P.QUANTIDADE) from relatosegmento20_04_03_01 as P where P.NUmero=S.Numero and P.codigo =S.codigo ) as QTDEPROTESTO, 		 ( select SUM(QUANTIDADE) from RELATOSEGMENTO20_04_03_01 where tipo = 5 and CODIGO = S.Codigo and NUMERO =S.Numero )as QTDEFALENCIA, 		 ( select SUM(C.QUANTIDADENOBANCO) from relatosegmento20_04_08_01 as C where C.Numero = S.Numero and C.codigo = S.Codigo ) as QTDECHEQUE   from relatosegmento as S where S.CODIGO = {Cedente} )X where X.Tipo = {TipoConsulta} order by X.Ano, X.Mes";
   
;]]> </script> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>SQLLookupRule</component-name>
        <action-type>OLAP</action-type>
        <action-inputs> 
		  <Cedente type="string"/>   
		  <TipoConsulta type="string"/> 		  
		  <strQuery type="string"/> 
		</action-inputs>
        <action-resources> 
          <catalog mapping="catalog"/> 
        </action-resources>
        <action-outputs> 
          <query-results type="result-set" mapping="query_result"/> 
        </action-outputs>
        <component-definition> 
          <jndi><![CDATA[Factoring]]></jndi>  
          <catalog>Operacoes de Credito</catalog> 
          <query><![CDATA[{strQuery}]]></query> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>JavascriptRule</component-name>
        <action-type>JavaScript</action-type>
        <action-inputs> 
          <query_result type="result-set"/>  
          <callback type="string"/> 
        </action-inputs>
        <action-outputs> 
          <json type="string"/>  
          <rowCount type="integer"/> 
        </action-outputs>
        <component-definition> 
          <script><![CDATA[
QL = ''; 
DEBUG=false;

function formataJSON(v) {
        var s = null;
        if (v == null) {
            s = 'null';
        } else if (v instanceof java.lang.String) {
            s = '"' + v + '"';
        } else if (v instanceof java.util.Date) {
            s = /*"new Date(" +*/ v.getTime() /*+ ")"*/;
        } else if (v instanceof Array) {
            s = new java.lang.StringBuilder("[ ");
            for (var i=0; i<v.length; i++) {
                if (i>0) {
                    s.append(',');
                }
                s.append(formataJSON(v[i]));
            }
            s.append(" ]");
        } else {
            s = v.toString();
        }
        if (DEBUG) {
             s = s.toString() + " /* " + v.getClass().getName() + " */";
        }
        return s.toString();
}

var rowCount=query_result.getRowCount();
var colCount=query_result.getColumnCount();
var json=new java.lang.StringBuilder('{ "result" : {');

var columnHeaders = new Array();
columnHeaders[0] = '"metrica"';
for (var col=0; col<colCount; col++) {
	columnHeaders[col+1] = query_result.getMetaData().getColumnHeaders()[0][col];
}

json.append( 
    '"metadata": { ' +
        '"columns": ' + formataJSON(columnHeaders) + ', ' + QL +
        '"rows": ' + rowCount + ', ' + QL +
        '"cols": ' + (colCount+1) + QL +
    ' },' + QL);


json.append('"data" : [ ');
var rowData = null;
while (rowData = query_result.nextFlattened()) {
	json.append(QL).append(formataJSON(rowData));
	json.append(',');
}
json.deleteCharAt(json.length()-1); 

json.append(QL + '] ' + QL);

json.append('}' + QL + '}');

if (callback !== '' || callback === null) {
    json = callback + '(' + json.toString() + ')'
} else {
    json = json.toString();
}]]></script> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>TemplateComponent</component-name>
        <action-type>Message Template</action-type>
        <action-inputs> 
          <json type="string"/> 
        </action-inputs>
        <action-outputs> 
          <output-message type="string" mapping="out"/> 
        </action-outputs>
        <component-definition> 
          <template><![CDATA[{json}]]></template> 
        </component-definition> 
      </action-definition>
 
    </actions>
	
	
	


	




	
	
	
	
		<!-- **********************************AVENCER/VENCIDO\ABERTO etc ******** -->  
    <actions> 
      <condition><![CDATA[getData == "ContenciosoMes"]]></condition>  
      <action-definition> 
        <component-name>JavascriptRule</component-name>
        <action-type>JavaScript</action-type>
        <action-inputs> 
          <Empresa type="string"/>  
          <Cedente type="string"/> 
  	      <CNPJ    type="string"/> 
  	    </action-inputs>
        <action-outputs> 
          <strQuery type="string"/> 
        </action-outputs>
        <component-definition> 
          <script><![CDATA[
		
strQuery   =   "select D.dm028_060 as NuMes,   SUBSTRING(D.dm028_070,1,3) as DescMes , SUM(F.opft001_110)  as Valor from optbft001 as F inner join tctbdm028 as D on D.dm028_000 = F.sk_data_vcto inner join tctbdm023 as emp on f.dm023_000 = emp.dm023_000 where emp.dm023_001 in ({Empresa})  and   F.dm003_000 = 6 group by D.dm028_060 , D.dm028_070 order by D.dm028_060 ";

;]]> </script> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>SQLLookupRule</component-name>
        <action-type>OLAP</action-type>
        <action-inputs> 
		  <Empresa type="string"/>  
		  <Cedente type="string"/>      
		  <CNPJ    type="string"/> 		  
		  <strQuery type="string"/> 
		</action-inputs>
        <action-resources> 
          <catalog mapping="catalog"/> 
        </action-resources>
        <action-outputs> 
          <query-results type="result-set" mapping="query_result"/> 
        </action-outputs>
        <component-definition> 
          <jndi><![CDATA[dw_wba_fi]]></jndi>  
          <catalog>Operacoes de Credito</catalog> 
          <query><![CDATA[{strQuery}]]></query> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>JavascriptRule</component-name>
        <action-type>JavaScript</action-type>
        <action-inputs> 
          <query_result type="result-set"/>  
          <callback type="string"/> 
        </action-inputs>
        <action-outputs> 
          <json type="string"/>  
          <rowCount type="integer"/> 
        </action-outputs>
        <component-definition> 
          <script><![CDATA[
QL = ''; 
DEBUG=false;

function formataJSON(v) {
        var s = null;
        if (v == null) {
            s = 'null';
        } else if (v instanceof java.lang.String) {
            s = '"' + v + '"';
        } else if (v instanceof java.util.Date) {
            s = /*"new Date(" +*/ v.getTime() /*+ ")"*/;
        } else if (v instanceof Array) {
            s = new java.lang.StringBuilder("[ ");
            for (var i=0; i<v.length; i++) {
                if (i>0) {
                    s.append(',');
                }
                s.append(formataJSON(v[i]));
            }
            s.append(" ]");
        } else {
            s = v.toString();
        }
        if (DEBUG) {
             s = s.toString() + " /* " + v.getClass().getName() + " */";
        }
        return s.toString();
}

var rowCount=query_result.getRowCount();
var colCount=query_result.getColumnCount();
var json=new java.lang.StringBuilder('{ "result" : {');

var columnHeaders = new Array();
columnHeaders[0] = '"metrica"';
for (var col=0; col<colCount; col++) {
	columnHeaders[col+1] = query_result.getMetaData().getColumnHeaders()[0][col];
}

json.append( 
    '"metadata": { ' +
        '"columns": ' + formataJSON(columnHeaders) + ', ' + QL +
        '"rows": ' + rowCount + ', ' + QL +
        '"cols": ' + (colCount+1) + QL +
    ' },' + QL);


json.append('"data" : [ ');
var rowData = null;
while (rowData = query_result.nextFlattened()) {
	json.append(QL).append(formataJSON(rowData));
	json.append(',');
}
json.deleteCharAt(json.length()-1); 

json.append(QL + '] ' + QL);

json.append('}' + QL + '}');

if (callback !== '' || callback === null) {
    json = callback + '(' + json.toString() + ')'
} else {
    json = json.toString();
}]]></script> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>TemplateComponent</component-name>
        <action-type>Message Template</action-type>
        <action-inputs> 
          <json type="string"/> 
        </action-inputs>
        <action-outputs> 
          <output-message type="string" mapping="out"/> 
        </action-outputs>
        <component-definition> 
          <template><![CDATA[{json}]]></template> 
        </component-definition> 
      </action-definition>
 
    </actions>
	
	
  </actions> 
</action-sequence>