<?xml version="1.0" encoding="UTF-8"?>
<action-sequence> 
  <title>getData</title>
  <version>1</version>
  <logging-level>ERROR</logging-level>
  <documentation> 
    <author>Rpassos</author>  
    <description>MDX Query to JSON</description>  
    <help/>  
    <result-type/>  
    <icon/> 
  </documentation>

  <inputs> 
    <callback type="string"> 
      <sources> 
        <request>callback</request> 
      </sources>  
      <default-value/> 
    </callback>  
    <getData type="string"> 
      <sources> 
        <request>getData</request> 
      </sources>  
      <default-value><![CDATA[1]]></default-value> 
    </getData>  
    <Ano type="string"> 
      <sources> 
        <request>Ano</request> 
      </sources>  
      <default-value><![CDATA[2001]]></default-value> 
    </Ano>  
    <Cedente type="string"> 
      <sources> 
        <request>Cedente</request> 
      </sources>  
      <default-value><![CDATA['xx']]></default-value> 
    </Cedente>  
    <Mes type="string"> 
      <sources> 
        <request>Mes</request> 
      </sources>  
      <default-value><![CDATA['xx']]></default-value> 
    </Mes>  
    <Sacado type="string"> 
      <sources> 
        <request>Sacado</request> 
      </sources>  
      <default-value><![CDATA['xx']]></default-value> 
    </Sacado>  
    <Gerente type="string"> 
      <sources> 
        <request>Gerente</request> 
      </sources>  
      <default-value><![CDATA['xx']]></default-value> 
    </Gerente> 
  </inputs>

  <outputs> 
    <out type="string"> 
      <destinations> 
        <response>content</response> 
      </destinations> 
    </out>  
    <json_done type="string"> 
      <destinations> 
        <response>content</response> 
      </destinations> 
    </json_done> 
  </outputs>

  <resources> 
    <catalog> 
      <solution-file> 
        <location>/2.Credito/Analises/OperacoesCredito.mondrian.xml</location>  
        <mime-type>text/plain</mime-type> 
      </solution-file> 
    </catalog> 
  </resources>
  
  <!-- Mapeamento dos parametros-->  
  <!-- variaveis de saida-->  
  <!-- Schemas XML-->  
  <actions> 
    <!-- *************************** TOP 5 CEDENTES - CONCENTRACAO*************** -->  
    <actions> 
      <condition><![CDATA[getData == "4"]]></condition>  
      <action-definition> 
        <component-name>MDXLookupRule</component-name>
        <action-type>OLAP</action-type>
        <action-inputs> 
          <Ano type="string"/> 
        </action-inputs>
        <action-resources> 
          <catalog mapping="catalog"/> 
        </action-resources>
        <action-outputs> 
          <query-results type="result-set" mapping="query_result"/> 
        </action-outputs>
        <component-definition> 
          <jndi><![CDATA[dw_wba_fi]]></jndi>  
          <catalog>Operacoes de Credito</catalog> 
          <query><![CDATA[
	
	with member [Measures].[Valor Total] as 'Sum({Ancestor([Cedente].CurrentMember, 1.0)}, [Measures].[Valor do Titulo])'
  member [Measures].[%] as '(([Measures].[Valor do Titulo] / [Measures].[Valor Total]) * 100)'
select NON EMPTY {[Measures].[%]} ON COLUMNS,
  NON EMPTY TopCount(Order({[Cedente].[Total].Children}, [Measures].[Valor do Titulo], DESC), 5) ON ROWS
from [Operacoes de Credito]
where Crossjoin(Crossjoin({[Produto].[Propria]}, {[Situacao do Pagamento].[Em aberto]}), {[Operacoes.Operacoes : Codigo].[Outros].[053], [Operacoes.Operacoes : Codigo].[Titulos].[040], [Operacoes.Operacoes : Codigo].[Titulos].[041], [Operacoes.Operacoes : Codigo].[Titulos].[046]})

		
]]></query> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>JavascriptRule</component-name>
        <action-type>JavaScript</action-type>
        <action-inputs> 
          <query_result type="result-set"/>  
          <callback type="string"/> 
        </action-inputs>
        <action-outputs> 
          <json type="string"/>  
          <rowCount type="integer"/> 
        </action-outputs>
        <component-definition> 
          <script><![CDATA[
QL = ''; 
DEBUG=false;

function formataJSON(v) {
        var s = null;
        if (v == null) {
            s = 'null';
        } else if (v instanceof java.lang.String) {
            s = '"' + v + '"';
        } else if (v instanceof java.util.Date) {
            s = /*"new Date(" +*/ v.getTime() /*+ ")"*/;
        } else if (v instanceof Array) {
            s = new java.lang.StringBuilder("[ ");
            for (var i=0; i<v.length; i++) {
                if (i>0) {
                    s.append(',');
                }
                s.append(formataJSON(v[i]));
            }
            s.append(" ]");
        } else {
            s = v.toString();
        }
        if (DEBUG) {
             s = s.toString() + " /* " + v.getClass().getName() + " */";
        }
        return s.toString();
}

var rowCount=query_result.getRowCount();
var colCount=query_result.getColumnCount();
var json=new java.lang.StringBuilder('{ "result" : {');

var columnHeaders = new Array();
columnHeaders[0] = '"metrica"';
for (var col=0; col<colCount; col++) {
	columnHeaders[col+1] = query_result.getMetaData().getColumnHeaders()[0][col];
}

json.append( 
    '"metadata": { ' +
        '"columns": ' + formataJSON(columnHeaders) + ', ' + QL +
        '"rows": ' + rowCount + ', ' + QL +
        '"cols": ' + (colCount+1) + QL +
    ' },' + QL);


json.append('"data" : [ ');
var rowData = null;
while (rowData = query_result.nextFlattened()) {
	json.append(QL).append(formataJSON(rowData));
	json.append(',');
}
json.deleteCharAt(json.length()-1); 

json.append(QL + '] ' + QL);

json.append('}' + QL + '}');

if (callback !== '' || callback === null) {
    json = callback + '(' + json.toString() + ')'
} else {
    json = json.toString();
}]]></script> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>TemplateComponent</component-name>
        <action-type>Message Template</action-type>
        <action-inputs> 
          <json type="string"/> 
        </action-inputs>
        <action-outputs> 
          <output-message type="string" mapping="out"/> 
        </action-outputs>
        <component-definition> 
          <template><![CDATA[{json}]]></template> 
        </component-definition> 
      </action-definition>
 
    </actions>
  
    <!-- *************************** CEDENTES - EVOLUCAO DE OPERACAO*************** -->  
    <actions> 
      <condition><![CDATA[getData == "5"]]></condition>  
      <action-definition> 
        <component-name>JavascriptRule</component-name>
        <action-type>JavaScript</action-type>
        <action-inputs> 
          <Cedente type="string"/>  
          <Ano type="string"/>  
          <Mes type="string"/> 
        </action-inputs>
        <action-outputs> 
          <strQuery type="string"/> 
        </action-outputs>
        <component-definition> 
          <script><![CDATA[
		
var hoje_ = new Date();
var ano_  = hoje_.getFullYear();
var Mes_  = hoje_.getMonth();
Mes_ =  Mes_+1;
ano_ = ano_- 1;


var Mes_2="";
if (Mes_.toString().length == 1) {
	Mes_2 = "0"+Mes_.toString();
}else
{
    Mes_2 = Mes_;
}
		
var data    = "01/";     	
    data   += Mes_2.toString()+"/";
	data   += ano_.toString();


var dataFim    = "01/";     	
    dataFim   += Mes_2.toString()+"/";
	dataFim   += (ano_+1).toString();

	
strQuery   =   "   select NON EMPTY {[Measures].[Valor do Titulo]} ON COLUMNS,";
strQuery  +=   "   NON EMPTY {([Data Inc Contabil.AnoMesDia].["+ano_+"].[{Mes}].["+data+"] : [Data Inc Contabil.AnoMesDia].["+Ano+"].[{Mes}].["+dataFim+"])} ON ROWS";
strQuery  +=   "   from [Operacoes de Credito]";

if (Cedente == "TODOS"){
	strQuery  +=   "    where Crossjoin(Crossjoin({[Cedente].[Total]}, {[Produto].[Propria]}), {[Operacoes.Operacoes : Codigo].[Titulos].[046], [Operacoes.Operacoes : Codigo].[Titulos].[041], [Operacoes.Operacoes : Codigo].[Titulos].[040]})";
}
else
{
	strQuery  +=   "    where Crossjoin(Crossjoin({[Cedente].["+Cedente+"]}, {[Produto].[Propria]}), {[Operacoes.Operacoes : Codigo].[Titulos].[046], [Operacoes.Operacoes : Codigo].[Titulos].[041], [Operacoes.Operacoes : Codigo].[Titulos].[040]})";
}
         


;]]> </script> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>MDXLookupRule</component-name>
        <action-type>OLAP</action-type>
        <action-inputs> 
          <Mes type="string"/>  
          <strQuery type="string"/> 
        </action-inputs>
        <action-resources> 
          <catalog mapping="catalog"/> 
        </action-resources>
        <action-outputs> 
          <query-results type="result-set" mapping="query_result"/> 
        </action-outputs>
        <component-definition> 
          <jndi><![CDATA[dw_wba_fi]]></jndi>  
          <catalog>Operacoes de Credito</catalog> 
          <query><![CDATA[{strQuery}]]></query> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>JavascriptRule</component-name>
        <action-type>JavaScript</action-type>
        <action-inputs> 
          <query_result type="result-set"/>  
          <callback type="string"/> 
        </action-inputs>
        <action-outputs> 
          <json type="string"/>  
          <rowCount type="integer"/> 
        </action-outputs>
        <component-definition> 
          <script><![CDATA[
QL = ''; 
DEBUG=false;

function formataJSON(v) {
        var s = null;
        if (v == null) {
            s = 'null';
        } else if (v instanceof java.lang.String) {
            s = '"' + v + '"';
        } else if (v instanceof java.util.Date) {
            s = /*"new Date(" +*/ v.getTime() /*+ ")"*/;
        } else if (v instanceof Array) {
            s = new java.lang.StringBuilder("[ ");
            for (var i=0; i<v.length; i++) {
                if (i>0) {
                    s.append(',');
                }
                s.append(formataJSON(v[i]));
            }
            s.append(" ]");
        } else {
            s = v.toString();
        }
        if (DEBUG) {
             s = s.toString() + " /* " + v.getClass().getName() + " */";
        }
        return s.toString();
}

var rowCount=query_result.getRowCount();
var colCount=query_result.getColumnCount();
var json=new java.lang.StringBuilder('{ "result" : {');

var columnHeaders = new Array();
columnHeaders[0] = '"metrica"';
for (var col=0; col<colCount; col++) {
	columnHeaders[col+1] = query_result.getMetaData().getColumnHeaders()[0][col];
}

json.append( 
    '"metadata": { ' +
        '"columns": ' + formataJSON(columnHeaders) + ', ' + QL +
        '"rows": ' + rowCount + ', ' + QL +
        '"cols": ' + (colCount+1) + QL +
    ' },' + QL);


json.append('"data" : [ ');
var rowData = null;
while (rowData = query_result.nextFlattened()) {
	json.append(QL).append(formataJSON(rowData));
	json.append(',');
}
json.deleteCharAt(json.length()-1); 

json.append(QL + '] ' + QL);

json.append('}' + QL + '}');

if (callback !== '' || callback === null) {
    json = callback + '(' + json.toString() + ')'
} else {
    json = json.toString();
}]]></script> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>TemplateComponent</component-name>
        <action-type>Message Template</action-type>
        <action-inputs> 
          <json type="string"/> 
        </action-inputs>
        <action-outputs> 
          <output-message type="string" mapping="out"/> 
        </action-outputs>
        <component-definition> 
          <template><![CDATA[{json}]]></template> 
        </component-definition> 
      </action-definition>
 
    </actions>
  
    <!-- ***************************  TOP 5 SACADOS NO CEDENTE - EVOLUCAO DE OPERACAO*************** -->  
    <actions> 
      <condition><![CDATA[getData == "6"]]></condition>  
      <action-definition> 
        <component-name>JavascriptRule</component-name>
        <action-type>JavaScript</action-type>
        <action-inputs> 
          <Cedente type="string"/>  
          <Ano type="string"/>  
          <Mes type="string"/> 
        </action-inputs>
        <action-outputs> 
          <strQuery type="string"/> 
        </action-outputs>
        <component-definition> 
          <script><![CDATA[
		
var hoje_ = new Date();
var ano_  = hoje_.getFullYear();
ano_ = ano_- 1;

		strQuery   =   "  with member [Measures].[Diogo] as 'IIf(([Measures].[Valor do Titulo] IS EMPTY), 0, [Measures].[Valor do Titulo])'";
		strQuery   +=  "  select NON EMPTY {([Data Inc Contabil.AnoMes].[{Mes}-"+ano_+"] : [Data Inc Contabil.AnoMes].[{Mes}-"+(ano_+1)+"])} ON COLUMNS,";
		strQuery   +=  "    NON EMPTY {TopCount(Order({[Sacado].[Total].Children}, [Measures].[Valor do Titulo], DESC), 5)} ON ROWS";
		strQuery   +=  "  from [Operacoes de Credito]";
		
		
		
		
		
if (Cedente == "TODOS"){
	strQuery   +=  "  where Crossjoin(Crossjoin(Crossjoin({[Cedente].[Total]}, {[Produto].[Propria]}), {[Operacoes.Operacoes : Codigo].[Titulos].[040], [Operacoes.Operacoes : Codigo].[Titulos].[041], [Operacoes.Operacoes : Codigo].[Titulos].[046]}), {[Measures].[Diogo]})";
}
else
{
	strQuery   +=  "  where Crossjoin(Crossjoin(Crossjoin({[Cedente].["+Cedente+"]}, {[Produto].[Propria]}), {[Operacoes.Operacoes : Codigo].[Titulos].[040], [Operacoes.Operacoes : Codigo].[Titulos].[041], [Operacoes.Operacoes : Codigo].[Titulos].[046]}), {[Measures].[Diogo]})";
}
    
	
	
	
;]]> </script> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>MDXLookupRule</component-name>
        <action-type>OLAP</action-type>
        <action-inputs> 
          <strQuery type="string"/> 
        </action-inputs>
        <action-resources> 
          <catalog mapping="catalog"/> 
        </action-resources>
        <action-outputs> 
          <query-results type="result-set" mapping="query_result"/> 
        </action-outputs>
        <component-definition> 
          <jndi><![CDATA[dw_wba_fi]]></jndi>  
          <catalog>Operacoes de Credito</catalog> 
          <query><![CDATA[{strQuery}]]></query> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>JavascriptRule</component-name>
        <action-type>JavaScript</action-type>
        <action-inputs> 
          <query_result type="result-set"/>  
          <callback type="string"/> 
        </action-inputs>
        <action-outputs> 
          <json type="string"/>  
          <rowCount type="integer"/> 
        </action-outputs>
        <component-definition> 
          <script><![CDATA[
QL = ''; 
DEBUG=false;

function formataJSON(v) {
        var s = null;
        if (v == null) {
            s = 'null';
        } else if (v instanceof java.lang.String) {
            s = '"' + v + '"';
        } else if (v instanceof java.util.Date) {
            s = /*"new Date(" +*/ v.getTime() /*+ ")"*/;
        } else if (v instanceof Array) {
            s = new java.lang.StringBuilder("[ ");
            for (var i=0; i<v.length; i++) {
                if (i>0) {
                    s.append(',');
                }
                s.append(formataJSON(v[i]));
            }
            s.append(" ]");
        } else {
            s = v.toString();
        }
        if (DEBUG) {
             s = s.toString() + " /* " + v.getClass().getName() + " */";
        }
        return s.toString();
}

var rowCount=query_result.getRowCount();
var colCount=query_result.getColumnCount();
var json=new java.lang.StringBuilder('{ "result" : {');

var columnHeaders = new Array();
columnHeaders[0] = '"metrica"';
for (var col=0; col<colCount; col++) {
	columnHeaders[col+1] = query_result.getMetaData().getColumnHeaders()[0][col];
}

json.append( 
    '"metadata": { ' +
        '"columns": ' + formataJSON(columnHeaders) + ', ' + QL +
        '"rows": ' + rowCount + ', ' + QL +
        '"cols": ' + (colCount+1) + QL +
    ' },' + QL);


json.append('"data" : [ ');
var rowData = null;
while (rowData = query_result.nextFlattened()) {
	json.append(QL).append(formataJSON(rowData));
	json.append(',');
}
json.deleteCharAt(json.length()-1); 

json.append(QL + '] ' + QL);

json.append('}' + QL + '}');

if (callback !== '' || callback === null) {
    json = callback + '(' + json.toString() + ')'
} else {
    json = json.toString();
}]]></script> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>TemplateComponent</component-name>
        <action-type>Message Template</action-type>
        <action-inputs> 
          <json type="string"/> 
        </action-inputs>
        <action-outputs> 
          <output-message type="string" mapping="out"/> 
        </action-outputs>
        <component-definition> 
          <template><![CDATA[{json}]]></template> 
        </component-definition> 
      </action-definition>
 
    </actions>
  
    <!-- *************************** Trazer todos os CEDENTES*************** -->  
    <actions> 
      <condition><![CDATA[getData == "7"]]></condition>  
      <action-definition> 
        <component-name>MDXLookupRule</component-name>
        <action-type>OLAP</action-type>
        <action-inputs/>
        <action-resources> 
          <catalog mapping="catalog"/> 
        </action-resources>
        <action-outputs> 
          <query-results type="result-set" mapping="query_result"/> 
        </action-outputs>
        <component-definition> 
          <jndi><![CDATA[dw_wba_fi]]></jndi>  
          <catalog>Operacoes de Credito</catalog> 
          <query><![CDATA[
	
select NON EMPTY {[Measures].[Valor do Titulo]} ON COLUMNS,
  NON EMPTY {[Cedente].Children} ON ROWS
from [Operacoes de Credito]
where {[Produto].[Propria]}

		
]]></query> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>JavascriptRule</component-name>
        <action-type>JavaScript</action-type>
        <action-inputs> 
          <query_result type="result-set"/>  
          <callback type="string"/> 
        </action-inputs>
        <action-outputs> 
          <json type="string"/>  
          <rowCount type="integer"/> 
        </action-outputs>
        <component-definition> 
          <script><![CDATA[
QL = ''; 
DEBUG=false;

function formataJSON(v) {
        var s = null;
        if (v == null) {
            s = 'null';
        } else if (v instanceof java.lang.String) {
            s = '"' + v + '"';
        } else if (v instanceof java.util.Date) {
            s = /*"new Date(" +*/ v.getTime() /*+ ")"*/;
        } else if (v instanceof Array) {
            s = new java.lang.StringBuilder("[ ");
            for (var i=0; i<v.length; i++) {
                if (i>0) {
                    s.append(',');
                }
                s.append(formataJSON(v[i]));
            }
            s.append(" ]");
        } else {
            s = v.toString();
        }
        if (DEBUG) {
             s = s.toString() + " /* " + v.getClass().getName() + " */";
        }
        return s.toString();
}

var rowCount=query_result.getRowCount();
var colCount=query_result.getColumnCount();
var json=new java.lang.StringBuilder('{ "result" : {');

var columnHeaders = new Array();
columnHeaders[0] = '"metrica"';
for (var col=0; col<colCount; col++) {
	columnHeaders[col+1] = query_result.getMetaData().getColumnHeaders()[0][col];
}

json.append( 
    '"metadata": { ' +
        '"columns": ' + formataJSON(columnHeaders) + ', ' + QL +
        '"rows": ' + rowCount + ', ' + QL +
        '"cols": ' + (colCount+1) + QL +
    ' },' + QL);


json.append('"data" : [ ');
var rowData = null;
while (rowData = query_result.nextFlattened()) {
	json.append(QL).append(formataJSON(rowData));
	json.append(',');
}
json.deleteCharAt(json.length()-1); 

json.append(QL + '] ' + QL);

json.append('}' + QL + '}');

if (callback !== '' || callback === null) {
    json = callback + '(' + json.toString() + ')'
} else {
    json = json.toString();
}]]></script> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>TemplateComponent</component-name>
        <action-type>Message Template</action-type>
        <action-inputs> 
          <json type="string"/> 
        </action-inputs>
        <action-outputs> 
          <output-message type="string" mapping="out"/> 
        </action-outputs>
        <component-definition> 
          <template><![CDATA[{json}]]></template> 
        </component-definition> 
      </action-definition>
 
    </actions>
  
    <!-- *************************** Query filtrando CEDENTE*************** -->  
    <actions> 
      <condition><![CDATA[getData == "8"]]></condition>  
      <action-definition> 
        <component-name>MDXLookupRule</component-name>
        <action-type>OLAP</action-type>
        <action-inputs> 
          <Cedente type="string"/> 
        </action-inputs>
        <action-resources> 
          <catalog mapping="catalog"/> 
        </action-resources>
        <action-outputs> 
          <query-results type="result-set" mapping="query_result"/> 
        </action-outputs>
        <component-definition> 
          <jndi><![CDATA[dw_wba_fi]]></jndi>  
          <catalog>Operacoes de Credito</catalog> 
          <query><![CDATA[
	
with member [Measures].[Comissaria] as '([Operacoes.Operacoes : Codigo].[Titulos].[046], [Measures].[Valor do Titulo])'
  member [Measures].[Cheques] as '([Operacoes.Operacoes : Codigo].[Titulos].[041], [Measures].[Valor do Titulo])'
  member [Measures].[Titulos] as '([Operacoes.Operacoes : Codigo].[Titulos].[040], [Measures].[Valor do Titulo])'
  member [Measures].[Fomento] as '([Operacoes.Operacoes : Codigo].[Outros].[053], [Measures].[Valor do Titulo])'
  member [Measures].[Renegociados] as '([Operacoes.Operacoes : Codigo].[Titulos].[042], [Measures].[Valor do Titulo])'
select {[Measures].[Cheques], [Measures].[Titulos], [Measures].[Fomento], [Measures].[Renegociados]} ON COLUMNS,
  Hierarchize({[Empresa].[CONSOLIDADO]}) ON ROWS
from [Operacoes de Credito]
where Crossjoin(Crossjoin({[Cedente].[{Cedente}]}, {[Produto].[Propria]}), {[Situacao do Pagamento].[Em aberto]})




		
]]></query> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>JavascriptRule</component-name>
        <action-type>JavaScript</action-type>
        <action-inputs> 
          <query_result type="result-set"/>  
          <callback type="string"/> 
        </action-inputs>
        <action-outputs> 
          <json type="string"/>  
          <rowCount type="integer"/> 
        </action-outputs>
        <component-definition> 
          <script><![CDATA[
QL = ''; 
DEBUG=false;

function formataJSON(v) {
        var s = null;
        if (v == null) {
            s = 'null';
        } else if (v instanceof java.lang.String) {
            s = '"' + v + '"';
        } else if (v instanceof java.util.Date) {
            s = /*"new Date(" +*/ v.getTime() /*+ ")"*/;
        } else if (v instanceof Array) {
            s = new java.lang.StringBuilder("[ ");
            for (var i=0; i<v.length; i++) {
                if (i>0) {
                    s.append(',');
                }
                s.append(formataJSON(v[i]));
            }
            s.append(" ]");
        } else {
            s = v.toString();
        }
        if (DEBUG) {
             s = s.toString() + " /* " + v.getClass().getName() + " */";
        }
        return s.toString();
}

var rowCount=query_result.getRowCount();
var colCount=query_result.getColumnCount();
var json=new java.lang.StringBuilder('{ "result" : {');

var columnHeaders = new Array();
columnHeaders[0] = '"metrica"';
for (var col=0; col<colCount; col++) {
	columnHeaders[col+1] = query_result.getMetaData().getColumnHeaders()[0][col];
}

json.append( 
    '"metadata": { ' +
        '"columns": ' + formataJSON(columnHeaders) + ', ' + QL +
        '"rows": ' + rowCount + ', ' + QL +
        '"cols": ' + (colCount+1) + QL +
    ' },' + QL);


json.append('"data" : [ ');
var rowData = null;
while (rowData = query_result.nextFlattened()) {
	json.append(QL).append(formataJSON(rowData));
	json.append(',');
}
json.deleteCharAt(json.length()-1); 

json.append(QL + '] ' + QL);

json.append('}' + QL + '}');

if (callback !== '' || callback === null) {
    json = callback + '(' + json.toString() + ')'
} else {
    json = json.toString();
}]]></script> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>TemplateComponent</component-name>
        <action-type>Message Template</action-type>
        <action-inputs> 
          <json type="string"/> 
        </action-inputs>
        <action-outputs> 
          <output-message type="string" mapping="out"/> 
        </action-outputs>
        <component-definition> 
          <template><![CDATA[{json}]]></template> 
        </component-definition> 
      </action-definition>
 
    </actions>
  
    <!-- *************************** Query filtrando Sem CEDENTE*************** -->  
    <actions> 
      <condition><![CDATA[getData == "9"]]></condition>  
      <action-definition> 
        <component-name>MDXLookupRule</component-name>
        <action-type>OLAP</action-type>
        <action-inputs> 
          <Cedente type="string"/> 
        </action-inputs>
        <action-resources> 
          <catalog mapping="catalog"/> 
        </action-resources>
        <action-outputs> 
          <query-results type="result-set" mapping="query_result"/> 
        </action-outputs>
        <component-definition> 
          <jndi><![CDATA[dw_wba_fi]]></jndi>  
          <catalog>Operacoes de Credito</catalog> 
          <query><![CDATA[
	
with member [Measures].[Comissaria] as '([Operacoes.Operacoes : Codigo].[Titulos].[046], [Measures].[Valor do Titulo])'
  member [Measures].[Cheques] as '([Operacoes.Operacoes : Codigo].[Titulos].[041], [Measures].[Valor do Titulo])'
  member [Measures].[Titulos] as '([Operacoes.Operacoes : Codigo].[Titulos].[040], [Measures].[Valor do Titulo])'
  member [Measures].[Fomento] as '([Operacoes.Operacoes : Codigo].[Outros].[053], [Measures].[Valor do Titulo])'
  member [Measures].[Renegociados] as '([Operacoes.Operacoes : Codigo].[Titulos].[042], [Measures].[Valor do Titulo])'
select NON EMPTY {[Measures].[Cheques], [Measures].[Titulos], [Measures].[Fomento], [Measures].[Renegociados]} ON COLUMNS,
  NON EMPTY Hierarchize({[Empresa].[CONSOLIDADO]}) ON ROWS
from [Operacoes de Credito]
where Crossjoin({[Produto].[Propria]}, {[Situacao do Pagamento].[Em aberto]})


		
]]></query> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>JavascriptRule</component-name>
        <action-type>JavaScript</action-type>
        <action-inputs> 
          <query_result type="result-set"/>  
          <callback type="string"/> 
        </action-inputs>
        <action-outputs> 
          <json type="string"/>  
          <rowCount type="integer"/> 
        </action-outputs>
        <component-definition> 
          <script><![CDATA[
QL = ''; 
DEBUG=false;

function formataJSON(v) {
        var s = null;
        if (v == null) {
            s = 'null';
        } else if (v instanceof java.lang.String) {
            s = '"' + v + '"';
        } else if (v instanceof java.util.Date) {
            s = /*"new Date(" +*/ v.getTime() /*+ ")"*/;
        } else if (v instanceof Array) {
            s = new java.lang.StringBuilder("[ ");
            for (var i=0; i<v.length; i++) {
                if (i>0) {
                    s.append(',');
                }
                s.append(formataJSON(v[i]));
            }
            s.append(" ]");
        } else {
            s = v.toString();
        }
        if (DEBUG) {
             s = s.toString() + " /* " + v.getClass().getName() + " */";
        }
        return s.toString();
}

var rowCount=query_result.getRowCount();
var colCount=query_result.getColumnCount();
var json=new java.lang.StringBuilder('{ "result" : {');

var columnHeaders = new Array();
columnHeaders[0] = '"metrica"';
for (var col=0; col<colCount; col++) {
	columnHeaders[col+1] = query_result.getMetaData().getColumnHeaders()[0][col];
}

json.append( 
    '"metadata": { ' +
        '"columns": ' + formataJSON(columnHeaders) + ', ' + QL +
        '"rows": ' + rowCount + ', ' + QL +
        '"cols": ' + (colCount+1) + QL +
    ' },' + QL);


json.append('"data" : [ ');
var rowData = null;
while (rowData = query_result.nextFlattened()) {
	json.append(QL).append(formataJSON(rowData));
	json.append(',');
}
json.deleteCharAt(json.length()-1); 

json.append(QL + '] ' + QL);

json.append('}' + QL + '}');

if (callback !== '' || callback === null) {
    json = callback + '(' + json.toString() + ')'
} else {
    json = json.toString();
}]]></script> 
        </component-definition> 
      </action-definition>
  
      <action-definition> 
        <component-name>TemplateComponent</component-name>
        <action-type>Message Template</action-type>
        <action-inputs> 
          <json type="string"/> 
        </action-inputs>
        <action-outputs> 
          <output-message type="string" mapping="out"/> 
        </action-outputs>
        <component-definition> 
          <template><![CDATA[{json}]]></template> 
        </component-definition> 
      </action-definition>
 
    </actions>
 
  </actions> 
</action-sequence>